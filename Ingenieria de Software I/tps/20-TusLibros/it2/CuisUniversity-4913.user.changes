

----QUIT----(13 October 2021 15:20:10) CuisUniversity-4913.image priorSource: 14638157!

----STARTUP---- (13 October 2021 15:20:10) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4913.image!


----QUIT----(13 October 2021 15:20:10) CuisUniversity-4913.image priorSource: 18661767!

----STARTUP---- (13 October 2021 15:21:02) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4913.image!


----QUIT----(13 October 2021 15:21:02) CuisUniversity-4913.image priorSource: 18661997!

----QUIT----(13 October 2021 15:26:07) CuisUniversity-4913.image priorSource: 14638157!

----STARTUP---- (13 October 2021 15:26:08) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4913.image!


----QUIT----(13 October 2021 15:26:08) CuisUniversity-4913.image priorSource: 18661767!

----STARTUP---- (28 October 2021 20:56:18) as C:\Users\DESKTOP-MIGUE\Desktop\windows64\CuisUniversity-4913.image!


TestCase subclass: #TusLibrosTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosTests category: 'TusLibros' stamp: 'MR 10/28/2021 21:00:33'!
TestCase subclass: #TusLibrosTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RestService category: 'TusLibros' stamp: 'MR 10/28/2021 21:14:08'!
Object subclass: #RestService
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosTests methodsFor: 'nil' stamp: 'MR 10/28/2021 21:14:49'!
test01NewCartStartsEmpty

	| clientId clientPassword cart |
	
	clientId _ 'unCliente'.
	clientPassword _ 'unaPassword'.
	
	cart _ RestService createCartFor: clientId withPassword: clientPassword.

	self assert: 0 equals: cart size.! !

!testRun: #TusLibrosTests #test01NewCartStartsEmpty stamp: 'MR 10/28/2021 21:14:51'!
ERROR!
!TusLibrosTests methodsFor: 'as yet unclassified' stamp: 'MR 10/28/2021 21:15:29' prior: 50914862!
test01NewCartStartsEmpty

	| clientId clientPassword cart restAPI |
	
	clientId _ 'unCliente'.
	clientPassword _ 'unaPassword'.
	restAPI _ RestService new.
	
	cart _ restAPI createCartFor: clientId withPassword: clientPassword.

	self assert: 0 equals: cart size.! !

!testRun: #TusLibrosTests #test01NewCartStartsEmpty stamp: 'MR 10/28/2021 21:15:33'!
ERROR!
!RestService methodsFor: 'as yet unclassified' stamp: 'MR 10/28/2021 21:15:40'!
createCartFor: aString withPassword: aString2 
	self shouldBeImplemented.! !
!RestService methodsFor: 'as yet unclassified' stamp: 'MR 10/28/2021 21:16:37' prior: 50914890!
createCartFor: aClientId withPassword: aClientPassword 
	^OrderedCollection new.! !

!testRun: #TusLibrosTests #test01NewCartStartsEmpty stamp: 'MR 10/28/2021 21:16:38'!
PASSED!

!testRun: #TusLibrosTests #test01NewCartStartsEmpty stamp: 'MR 10/28/2021 21:16:38'!
PASSED!
!TusLibrosTests methodsFor: 'as yet unclassified' stamp: 'MR 10/28/2021 21:16:51' prior: 50914876!
test01NewCartStartsEmpty

	| clientId clientPassword cart restAPI |
	
	clientId _ 'unCliente'.
	clientPassword _ 'unaPassword'.
	restAPI _ RestService new.
	
	cart _ restAPI createCartFor: clientId withPassword: clientPassword.

	self assert: 0 equals: cart size.! !

!classRenamed: #TusLibrosTests as: #RestServiceTests stamp: 'MR 10/28/2021 21:17:14'!
Smalltalk renameClassNamed: #TusLibrosTests as: #RestServiceTests!
!RestServiceTests methodsFor: 'as yet unclassified' stamp: 'MR 10/28/2021 21:19:08'!
test02CartWithABookIsNotEmpty

	| clientId clientPassword cart restAPI |
	
	clientId _ 'unCliente'.
	clientPassword _ 'unaPassword'.
	restAPI _ RestService new.
	
	cart _ restAPI createCartFor: clientId withPassword: clientPassword.

	self assert: 0 equals: cart size.! !
!RestServiceTests methodsFor: 'as yet unclassified' stamp: 'MR 10/28/2021 21:19:14' prior: 50914908!
test01NewCartStartsEmpty

	| clientId clientPassword cart restAPI |
	
	clientId _ 'unCliente'.
	clientPassword _ 'unaPassword'.
	restAPI _ RestService new.
	
	cart _ restAPI createCartFor: clientId withPassword: clientPassword.

	self assert: true equals: cart isEmpty.! !
!RestServiceTests methodsFor: 'as yet unclassified' stamp: 'MR 10/28/2021 21:20:25' prior: 50914924!
test02CartWithABookIsNotEmpty

	| clientId clientPassword cart restAPI bookIsbn |
	
	clientId _ 'unCliente'.
	clientPassword _ 'unaPassword'.
	restAPI _ RestService new.
	
	bookIsbn _ '10'.
	
	cart _ restAPI createCartFor: clientId withPassword: clientPassword.
	restAPI addToCart: cart bookIsbn: bookIsbn bookQuantity: 1. 
	
	self assert: 1 equals: cart size.! !
!RestServiceTests methodsFor: 'as yet unclassified' stamp: 'MR 10/28/2021 21:20:37' prior: 50914948!
test02CartWithABookIsNotEmpty

	| clientId clientPassword cart restAPI bookIsbn |
	
	clientId _ 'unCliente'.
	clientPassword _ 'unaPassword'.
	restAPI _ RestService new.
	
	bookIsbn _ '10'.
	
	cart _ restAPI createCartFor: clientId withPassword: clientPassword.
	restAPI addToCart: cart bookIsbn: bookIsbn bookQuantity: 1. 
	
	self assert: 1 equals: cart size.! !

!testRun: #RestServiceTests #test02CartWithABookIsNotEmpty stamp: 'MR 10/28/2021 21:20:38'!
ERROR!
!RestService methodsFor: 'as yet unclassified' stamp: 'MR 10/28/2021 21:20:48'!
addToCart: anOrderedCollection bookIsbn: aString bookQuantity: aSmallInteger 
	self shouldBeImplemented.! !
!RestService methodsFor: 'as yet unclassified' stamp: 'MR 10/28/2021 21:21:29' prior: 50914980!
addToCart: aCart bookIsbn: aBookIsbn bookQuantity: aBookQuantity 
	aCart add: aBookIsbn.! !

!testRun: #RestServiceTests #test02CartWithABookIsNotEmpty stamp: 'MR 10/28/2021 21:21:30'!
PASSED!

!testRun: #RestServiceTests #test01NewCartStartsEmpty stamp: 'MR 10/28/2021 21:21:30'!
PASSED!

!testRun: #RestServiceTests #test02CartWithABookIsNotEmpty stamp: 'MR 10/28/2021 21:21:30'!
PASSED!
!RestServiceTests methodsFor: 'as yet unclassified' stamp: 'MR 10/28/2021 21:21:34' prior: 50914963!
test02CartWithABookIsNotEmpty

	| clientId clientPassword cart restAPI bookIsbn |
	
	clientId _ 'unCliente'.
	clientPassword _ 'unaPassword'.
	restAPI _ RestService new.
	
	bookIsbn _ '10'.
	
	cart _ restAPI createCartFor: clientId withPassword: clientPassword.
	restAPI addToCart: cart bookIsbn: bookIsbn bookQuantity: 1.
	
	self assert: 1 equals: cart size.! !
!RestServiceTests methodsFor: 'as yet unclassified' stamp: 'MR 10/28/2021 21:23:30'!
test03CartWithABookHasTheBookInItsList

	| clientId clientPassword cart restAPI bookIsbn |
	
	clientId _ 'unCliente'.
	clientPassword _ 'unaPassword'.
	restAPI _ RestService new.
	
	bookIsbn _ '10'.
	
	cart _ restAPI createCartFor: clientId withPassword: clientPassword.
	restAPI addToCart: cart bookIsbn: bookIsbn bookQuantity: 1.
	
	self assert: cart first equals: bookIsbn.! !
!RestServiceTests methodsFor: 'as yet unclassified' stamp: 'MR 10/28/2021 21:24:25' prior: 50915017!
test03CartWithABookHasTheBookInItsList

	| clientId clientPassword cart restAPI bookIsbn cartList |
	
	clientId _ 'unCliente'.
	clientPassword _ 'unaPassword'.
	restAPI _ RestService new.
	
	bookIsbn _ '10'.
	
	cart _ restAPI createCartFor: clientId withPassword: clientPassword.
	restAPI addToCart: cart bookIsbn: bookIsbn bookQuantity: 1.
	cartList _ restAPI listCart: cart.
	
	self assert: '0|10|1' equals: cartList.! !

----End fileIn of C:\Users\DESKTOP-MIGUE\Desktop\windows64\Packages\TerseGuide.pck.st----!
!RestServiceTests methodsFor: 'as yet unclassified' stamp: 'MR 10/28/2021 21:31:07' prior: 50914936!
test01NewCartStartsEmpty

	| clientId clientPassword cart restAPI result |
	
	clientId _ 'unCliente'.
	clientPassword _ 'unaPassword'.
	restAPI _ RestService new.
	
	result _ restAPI createCartFor: clientId withPassword: clientPassword.
	"0|ID_DEL_CARRITO"
	
	self assert: (OrderedCollection with: 0 with: 0) equals: result.
	self assert: true equals: (restAPI cart: result at: 2) isEmpty.! !

----STARTUP---- (1 November 2021 14:14:57) as /home/ryan/UBA/Ing1/cuis2/CuisUniversity-4913.image!


----End fileIn of /home/ryan/UBA/Ing1/cuis2/TusLibros.st----!

!testRun: #RestServiceTests #test01NewCartStartsEmpty stamp: 'RI 11/1/2021 14:15:55'!
FAILURE!

!testRun: #RestServiceTests #test02CartWithABookIsNotEmpty stamp: 'RI 11/1/2021 14:15:55'!
PASSED!

!testRun: #RestServiceTests #test03CartWithABookHasTheBookInItsList stamp: 'RI 11/1/2021 14:15:55'!
ERROR!

!classDefinition: #Cart category: 'TusLibros' stamp: 'RI 11/1/2021 14:18:39'!
Object subclass: #Cart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestServiceTests methodsFor: 'as yet unclassified' stamp: 'RI 11/1/2021 14:18:33' prior: 50915923!
test01NewCartStartsEmpty

	| cart |
	
	cart _ Cart new.
	
	self assert: (OrderedCollection new) equals: cart books.! !
!RestServiceTests methodsFor: 'as yet unclassified' stamp: 'RI 11/1/2021 14:18:58' prior: 50915938!
test02CartWithABookIsNotEmpty

	| clientId clientPassword cart restAPI bookIsbn |
	
	clientId _ 'unCliente'.
	clientPassword _ 'unaPassword'.
	restAPI _ RestService new.
	
	bookIsbn _ '10'.
	
	cart _ restAPI createCartFor: clientId withPassword: clientPassword.
	restAPI addToCart: cart bookIsbn: bookIsbn bookQuantity: 1.
	
	"self assert: 1 equals: cart size."! !
!RestServiceTests methodsFor: 'as yet unclassified' stamp: 'RI 11/1/2021 14:19:02' prior: 50915952!
test03CartWithABookHasTheBookInItsList

	| clientId clientPassword cart restAPI bookIsbn cartList |
	
	clientId _ 'unCliente'.
	clientPassword _ 'unaPassword'.
	restAPI _ RestService new.
	
	bookIsbn _ '10'.
	
	cart _ restAPI createCartFor: clientId withPassword: clientPassword.
	restAPI addToCart: cart bookIsbn: bookIsbn bookQuantity: 1.
	cartList _ restAPI listCart: cart.
	
	"self assert: '0|10|1' equals: cartList."! !

!testRun: #RestServiceTests #test01NewCartStartsEmpty stamp: 'RI 11/1/2021 14:19:09'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'RI 11/1/2021 14:19:19'!
books
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'RI 11/1/2021 14:19:41' prior: 50916050!
books
	^OrderedCollection new.! !

!testRun: #RestServiceTests #test01NewCartStartsEmpty stamp: 'RI 11/1/2021 14:19:42'!
PASSED!

!testRun: #RestServiceTests #test01NewCartStartsEmpty stamp: 'RI 11/1/2021 14:19:42'!
PASSED!

!testRun: #RestServiceTests #test02CartWithABookIsNotEmpty stamp: 'RI 11/1/2021 14:19:42'!
PASSED!

!testRun: #RestServiceTests #test03CartWithABookHasTheBookInItsList stamp: 'RI 11/1/2021 14:19:42'!
ERROR!

!testRun: #RestServiceTests #test03CartWithABookHasTheBookInItsList stamp: 'RI 11/1/2021 14:19:42'!
ERROR!

!testRun: #RestServiceTests #test03CartWithABookHasTheBookInItsList stamp: 'RI 11/1/2021 14:19:48'!
ERROR!

!testRun: #RestServiceTests #test03CartWithABookHasTheBookInItsList stamp: 'RI 11/1/2021 14:19:50'!
ERROR!
!RestServiceTests methodsFor: 'as yet unclassified' stamp: 'RI 11/1/2021 14:20:01' prior: 50916016!
test02CartWithABookIsNotEmpty! !
!RestServiceTests methodsFor: 'as yet unclassified' stamp: 'RI 11/1/2021 14:20:06' prior: 50916031!
test03CartWithABookHasTheBookInItsList! !

!testRun: #RestServiceTests #test03CartWithABookHasTheBookInItsList stamp: 'RI 11/1/2021 14:20:08'!
PASSED!

!testRun: #RestServiceTests #test01NewCartStartsEmpty stamp: 'RI 11/1/2021 14:20:08'!
PASSED!

!testRun: #RestServiceTests #test02CartWithABookIsNotEmpty stamp: 'RI 11/1/2021 14:20:08'!
PASSED!

!testRun: #RestServiceTests #test03CartWithABookHasTheBookInItsList stamp: 'RI 11/1/2021 14:20:08'!
PASSED!
!RestServiceTests methodsFor: 'as yet unclassified' stamp: 'RI 11/1/2021 14:21:51' prior: 50916081!
test02CartWithABookIsNotEmpty

	| cart |
	
	cart _ Cart new.
	cart addBook: '1'.
	
	self assert: (OrderedCollection with: '1') equals: cart books.! !

!testRun: #RestServiceTests #test02CartWithABookIsNotEmpty stamp: 'RI 11/1/2021 14:21:53'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'RI 11/1/2021 14:22:01'!
addBook: aString 
	self shouldBeImplemented.! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'RI 11/1/2021 14:22:36'!
Object subclass: #Cart
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'as yet unclassified' stamp: 'RI 11/1/2021 14:22:30' prior: 50916115!
addBook: anISBN 
	
	books add: anISBN.! !

!testRun: #RestServiceTests #test02CartWithABookIsNotEmpty stamp: 'RI 11/1/2021 14:22:40'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'RI 11/1/2021 14:23:10' overrides: 16896425!
initialize

	books _ OrderedCollection new.! !

!testRun: #RestServiceTests #test01NewCartStartsEmpty stamp: 'RI 11/1/2021 14:23:13'!
PASSED!

!testRun: #RestServiceTests #test02CartWithABookIsNotEmpty stamp: 'RI 11/1/2021 14:23:13'!
FAILURE!

!testRun: #RestServiceTests #test03CartWithABookHasTheBookInItsList stamp: 'RI 11/1/2021 14:23:13'!
PASSED!

!testRun: #RestServiceTests #test02CartWithABookIsNotEmpty stamp: 'RI 11/1/2021 14:23:13'!
FAILURE!

!testRun: #RestServiceTests #test01NewCartStartsEmpty stamp: 'RI 11/1/2021 14:23:34'!
PASSED!

!testRun: #RestServiceTests #test01NewCartStartsEmpty stamp: 'RI 11/1/2021 14:23:34'!
PASSED!

!testRun: #RestServiceTests #test02CartWithABookIsNotEmpty stamp: 'RI 11/1/2021 14:23:34'!
FAILURE!

!testRun: #RestServiceTests #test03CartWithABookHasTheBookInItsList stamp: 'RI 11/1/2021 14:23:34'!
PASSED!

!testRun: #RestServiceTests #test02CartWithABookIsNotEmpty stamp: 'RI 11/1/2021 14:23:34'!
FAILURE!
!Cart methodsFor: 'as yet unclassified' stamp: 'RI 11/1/2021 14:24:04' prior: 50916054!
books
	^books.! !

!testRun: #RestServiceTests #test02CartWithABookIsNotEmpty stamp: 'RI 11/1/2021 14:24:06'!
PASSED!

!testRun: #RestServiceTests #test01NewCartStartsEmpty stamp: 'RI 11/1/2021 14:24:10'!
PASSED!

!testRun: #RestServiceTests #test01NewCartStartsEmpty stamp: 'RI 11/1/2021 14:24:10'!
PASSED!

!testRun: #RestServiceTests #test02CartWithABookIsNotEmpty stamp: 'RI 11/1/2021 14:24:10'!
PASSED!

!testRun: #RestServiceTests #test03CartWithABookHasTheBookInItsList stamp: 'RI 11/1/2021 14:24:10'!
PASSED!

!testRun: #RestServiceTests #test02CartWithABookIsNotEmpty stamp: 'RI 11/1/2021 14:24:21'!
PASSED!

!testRun: #RestServiceTests #test01NewCartStartsEmpty stamp: 'RI 11/1/2021 14:24:21'!
PASSED!

!testRun: #RestServiceTests #test02CartWithABookIsNotEmpty stamp: 'RI 11/1/2021 14:24:21'!
PASSED!

!testRun: #RestServiceTests #test03CartWithABookHasTheBookInItsList stamp: 'RI 11/1/2021 14:24:21'!
PASSED!
!RestServiceTests methodsFor: 'as yet unclassified' stamp: 'RI 11/1/2021 14:25:13' prior: 50916104!
test02CartWithABookIsNotEmpty

	| cart |
	
	cart _ Cart new.
	cart addBook: '1' withAmount: 2.
	
	self assert: (OrderedCollection with: '1') equals: cart books.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'RI 11/1/2021 14:28:20'!
addBook: anISBN withAmount: anAmount
	
	books add: (anISBN, '|', anAmount).! !

!methodRemoval: Cart #addBook: stamp: 'RI 11/1/2021 14:28:25'!
addBook: anISBN 
	
	books add: anISBN.!
!RestServiceTests methodsFor: 'as yet unclassified' stamp: 'RI 11/1/2021 14:28:37' prior: 50916199!
test02CartWithABookIsNotEmpty

	| cart |
	
	cart _ Cart new.
	cart addBook: '1' withAmount: 2.
	
	self assert: (OrderedCollection with: '1|2') equals: cart books.! !

!testRun: #RestServiceTests #test02CartWithABookIsNotEmpty stamp: 'RI 11/1/2021 14:28:38'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'RI 11/1/2021 14:28:57' prior: 50916207!
addBook: anISBN withAmount: anAmount
	
	books add: (anISBN, '|', anAmount asString).! !

!testRun: #RestServiceTests #test02CartWithABookIsNotEmpty stamp: 'RI 11/1/2021 14:29:05'!
PASSED!

!testRun: #RestServiceTests #test01NewCartStartsEmpty stamp: 'RI 11/1/2021 14:29:05'!
PASSED!

!testRun: #RestServiceTests #test02CartWithABookIsNotEmpty stamp: 'RI 11/1/2021 14:29:05'!
PASSED!

!testRun: #RestServiceTests #test03CartWithABookHasTheBookInItsList stamp: 'RI 11/1/2021 14:29:05'!
PASSED!

!methodRemoval: RestServiceTests #test03CartWithABookHasTheBookInItsList stamp: 'RI 11/1/2021 14:31:08'!
test03CartWithABookHasTheBookInItsList!
!RestServiceTests methodsFor: 'as yet unclassified' stamp: 'RI 11/1/2021 14:31:54'!
test03! !
!RestServiceTests methodsFor: 'as yet unclassified' stamp: 'RI 11/1/2021 14:34:38' prior: 50916251!
test03! !
!RestServiceTests methodsFor: 'as yet unclassified' stamp: 'RI 11/1/2021 14:35:53' prior: 50916255!
test03

	| cart |
	
	cart _ Cart new.
	cart addBook: '1' withAmount: 2.
	cart addBook: '1' withAmount: 2.	
	
	self assert: (OrderedCollection with: '1|4') equals: cart books.! !

!testRun: #RestServiceTests #test03 stamp: 'RI 11/1/2021 14:35:54'!
FAILURE!

----End fileIn of /home/ryan/UBA/Ing1/cuis2/Packages/TerseGuide.pck.st----!
!Cart methodsFor: 'as yet unclassified' stamp: 'RI 11/1/2021 14:38:00' prior: 50916134 overrides: 16896425!
initialize

	books _ Dictionary new.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'RI 11/1/2021 14:41:13' prior: 50916228!
addBook: anISBN withAmount: anAmount
	
	| y |
	y _ books at: anISBN ifAbsent: [
		^books add: anISBN->anAmount. 
	].

	books at: anISBN put: y + anAmount.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'RI 11/1/2021 14:41:47' prior: 50919200!
addBook: anISBN withAmount: anAmount
	
	| originalAmount |
	originalAmount _ books at: anISBN ifAbsent: [
		^books add: anISBN->anAmount. 
	].

	books at: anISBN put: originalAmount + anAmount.! !

!testRun: #RestServiceTests #test01NewCartStartsEmpty stamp: 'RI 11/1/2021 14:41:52'!
FAILURE!

!testRun: #RestServiceTests #test02CartWithABookIsNotEmpty stamp: 'RI 11/1/2021 14:41:52'!
FAILURE!

!testRun: #RestServiceTests #test03 stamp: 'RI 11/1/2021 14:41:52'!
FAILURE!

!testRun: #RestServiceTests #test01NewCartStartsEmpty stamp: 'RI 11/1/2021 14:42:22'!
FAILURE!
!RestServiceTests methodsFor: 'as yet unclassified' stamp: 'RI 11/1/2021 14:42:29' prior: 50916009!
test01NewCartStartsEmpty

	| cart |
	
	cart _ Cart new.
	
	self assert: true equals: cart books isEmpty .! !

!testRun: #RestServiceTests #test01NewCartStartsEmpty stamp: 'RI 11/1/2021 14:42:32'!
PASSED!

!testRun: #RestServiceTests #test02CartWithABookIsNotEmpty stamp: 'RI 11/1/2021 14:42:32'!
FAILURE!

!testRun: #RestServiceTests #test03 stamp: 'RI 11/1/2021 14:42:32'!
FAILURE!

!testRun: #RestServiceTests #test01NewCartStartsEmpty stamp: 'RI 11/1/2021 14:44:05'!
PASSED!

!testRun: #RestServiceTests #test02CartWithABookIsNotEmpty stamp: 'RI 11/1/2021 14:44:05'!
FAILURE!

!testRun: #RestServiceTests #test03 stamp: 'RI 11/1/2021 14:44:05'!
FAILURE!
!RestServiceTests methodsFor: 'as yet unclassified' stamp: 'RI 11/1/2021 14:44:08' prior: 50916216!
test02CartWithABookIsNotEmpty

	| cart |
	
	cart _ Cart new.
	cart addBook: '1' withAmount: 2.
	
	self assert: 2 equals: (cart books at: '1').
	self assert: 1 equals: cart books size.! !

!testRun: #RestServiceTests #test01NewCartStartsEmpty stamp: 'RI 11/1/2021 14:44:10'!
PASSED!

!testRun: #RestServiceTests #test02CartWithABookIsNotEmpty stamp: 'RI 11/1/2021 14:44:10'!
PASSED!

!testRun: #RestServiceTests #test03 stamp: 'RI 11/1/2021 14:44:10'!
FAILURE!

!testRun: #RestServiceTests #test03 stamp: 'RI 11/1/2021 14:44:10'!
FAILURE!
!RestServiceTests methodsFor: 'as yet unclassified' stamp: 'RI 11/1/2021 14:44:44' prior: 50916259!
test03

	| cart |
	
	cart _ Cart new.
	cart addBook: '1' withAmount: 2.
	cart addBook: '1' withAmount: 2.	
	
	self assert: 4 equals: (cart books at: '1').! !

!testRun: #RestServiceTests #test03 stamp: 'RI 11/1/2021 14:44:45'!
PASSED!

!testRun: #RestServiceTests #test03 stamp: 'RI 11/1/2021 14:44:53'!
PASSED!

!testRun: #RestServiceTests #test01NewCartStartsEmpty stamp: 'RI 11/1/2021 14:44:53'!
PASSED!

!testRun: #RestServiceTests #test02CartWithABookIsNotEmpty stamp: 'RI 11/1/2021 14:44:53'!
PASSED!

!testRun: #RestServiceTests #test03 stamp: 'RI 11/1/2021 14:44:53'!
PASSED!
!RestServiceTests methodsFor: 'as yet unclassified' stamp: 'RI 11/1/2021 14:45:13' prior: 50919273!
test03

	| cart |
	
	cart _ Cart new.
	cart addBook: '1' withAmount: 2.
	cart addBook: '1' withAmount: 2.	
	
	self assert: 4 equals: (cart books at: '1').
	self assert: 1 equals: cart books size.! !
!RestServiceTests methodsFor: 'as yet unclassified' stamp: 'RI 11/1/2021 14:46:44'!
test03AddingExistingBookToACartModifesAmount

	| cart |
	
	cart _ Cart new.
	cart addBook: '1' withAmount: 2.
	cart addBook: '1' withAmount: 2.	
	
	self assert: 4 equals: (cart books at: '1').
	self assert: 1 equals: cart books size.! !

!methodRemoval: RestServiceTests #test03 stamp: 'RI 11/1/2021 14:46:44'!
test03

	| cart |
	
	cart _ Cart new.
	cart addBook: '1' withAmount: 2.
	cart addBook: '1' withAmount: 2.	
	
	self assert: 4 equals: (cart books at: '1').
	self assert: 1 equals: cart books size.!
!RestServiceTests methodsFor: 'as yet unclassified' stamp: 'RI 11/1/2021 14:47:01'!
test03AddingExistingBookToACartModifiesAmount

	| cart |
	
	cart _ Cart new.
	cart addBook: '1' withAmount: 2.
	cart addBook: '1' withAmount: 2.	
	
	self assert: 4 equals: (cart books at: '1').
	self assert: 1 equals: cart books size.! !

!methodRemoval: RestServiceTests #test03AddingExistingBookToACartModifesAmount stamp: 'RI 11/1/2021 14:47:01'!
test03AddingExistingBookToACartModifesAmount

	| cart |
	
	cart _ Cart new.
	cart addBook: '1' withAmount: 2.
	cart addBook: '1' withAmount: 2.	
	
	self assert: 4 equals: (cart books at: '1').
	self assert: 1 equals: cart books size.!
!RestServiceTests methodsFor: 'as yet unclassified' stamp: 'RI 11/1/2021 14:50:05' prior: 50919323!
test03AddingExistingBookToACartModifiesAmount

	| cart |
	
	cart _ Cart new.
	cart addBook: '1' withAmount: 2.
	cart addBook: '1' withAmount: 2.	
	cart addBook: '2' withAmount: 3.		
	
	self assert: '1|4|2|3' equals: (cart listBooks).! !

!testRun: #RestServiceTests #test03AddingExistingBookToACartModifiesAmount stamp: 'RI 11/1/2021 14:50:07'!
ERROR!
!RestServiceTests methodsFor: 'as yet unclassified' stamp: 'RI 11/1/2021 14:47:01' prior: 50919345!
test03AddingExistingBookToACartModifiesAmount

	| cart |
	
	cart _ Cart new.
	cart addBook: '1' withAmount: 2.
	cart addBook: '1' withAmount: 2.	
	
	self assert: 4 equals: (cart books at: '1').
	self assert: 1 equals: cart books size.! !
!RestServiceTests methodsFor: 'as yet unclassified' stamp: 'RI 11/1/2021 14:50:46'!
test04AddingExistingBookToACartModifiesAmount

	| cart |
	
	cart _ Cart new.
	cart addBook: '1' withAmount: 2.
	cart addBook: '1' withAmount: 2.	
	cart addBook: '2' withAmount: 3.		
	
	self assert: '1|4|2|3' equals: (cart listBooks).! !
!RestServiceTests methodsFor: 'as yet unclassified' stamp: 'RI 11/1/2021 14:50:58'!
test04

	| cart |
	
	cart _ Cart new.
	cart addBook: '1' withAmount: 2.
	cart addBook: '1' withAmount: 2.	
	cart addBook: '2' withAmount: 3.		
	
	self assert: '1|4|2|3' equals: (cart listBooks).! !

!methodRemoval: RestServiceTests #test04AddingExistingBookToACartModifiesAmount stamp: 'RI 11/1/2021 14:51:00'!
test04AddingExistingBookToACartModifiesAmount

	| cart |
	
	cart _ Cart new.
	cart addBook: '1' withAmount: 2.
	cart addBook: '1' withAmount: 2.	
	cart addBook: '2' withAmount: 3.		
	
	self assert: '1|4|2|3' equals: (cart listBooks).!

!testRun: #RestServiceTests #test04 stamp: 'RI 11/1/2021 14:51:03'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'RI 11/1/2021 14:51:09'!
listBooks
	self shouldBeImplemented.! !

'test' removeLast.!

'test' copyFrom: 0 to: ('test' size - 1)!

'test' copyFrom: 1 to: ('test' size - 1)!
!Cart methodsFor: 'as yet unclassified' stamp: 'RI 11/1/2021 14:56:30' prior: 50919404!
listBooks
	| result |
	
	result _ ''.
	
	books keysAndValuesDo: [:aKey :aValue | result _ result , aKey ,  '|' , aValue, '|'].
	
	^result copyFrom: 1 to: (result size - 1).! !

!testRun: #RestServiceTests #test04 stamp: 'RI 11/1/2021 14:56:32'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'RI 11/1/2021 14:56:52' prior: 50919412!
listBooks
	| result |
	
	result _ ''.
	
	books keysAndValuesDo: [:aKey :aValue | result _ result , aKey ,  '|' , aValue asString , '|'].
	
	^result copyFrom: 1 to: (result size - 1).! !

!testRun: #RestServiceTests #test01NewCartStartsEmpty stamp: 'RI 11/1/2021 14:56:52'!
PASSED!

!testRun: #RestServiceTests #test02CartWithABookIsNotEmpty stamp: 'RI 11/1/2021 14:56:52'!
PASSED!

!testRun: #RestServiceTests #test03AddingExistingBookToACartModifiesAmount stamp: 'RI 11/1/2021 14:56:52'!
PASSED!

!testRun: #RestServiceTests #test04 stamp: 'RI 11/1/2021 14:56:52'!
FAILURE!

!testRun: #RestServiceTests #test04 stamp: 'RI 11/1/2021 14:56:52'!
FAILURE!

a := Dictionary new.!

a at: '1' put: 2!

a!

a at: '2' put: 2.!

a!

a at: '2' put: 3.!

a!

cart _ Cart new.!

cart addBook: '1' withAmount: 2.!

cart addBook: '1' withAmount: 2.	!

cart addBook: '2' withAmount: 3.		!

cart!

cart books!

a _ ''.!

cart books  keysDo: [:aKey | a _ a, aKey].!

a!

cart addBook: '3' withAmount: 3.		!

a _ ''.!

cart books  keysDo: [:aKey | a _ a, aKey].!

a!

cart addBook: '0' withAmount: 3.		!

a _ ''.!

cart books  keysDo: [:aKey | a _ a, aKey].!

a!

cart keys !

cart books keys!

cart books asSortedCollection!

cart books sort!

cart books!

cart books asArray !

cart books keys !

cart books keys sort!

cart books keys sort do: [:aKey | a _ a , aKey , '|' , cart books at: aKey]!

cart books keys sort do: [:aKey | a _ a , aKey , '|' , cart books at: aKey asString]!

cart books keys sort do: [:aKey | a _ a , aKey , '|' , (cart books at: aKey asString)]!

cart books keys sort do: [:aKey | a _ a , aKey , '|' , ((cart books at: aKey) asString)]!

a!

a _ ''.!

cart books keys sort do: [:aKey | a _ a , aKey , '|' , ((cart books at: aKey) asString)]!

a!

cart _ Cart new.!

cart addBook: '1' withAmount: 2.
cart addBook: '1' withAmount: 2.	
cart addBook: '2' withAmount: 3.		
a _ ''.!

cart books keys sort do: [:aKey | a _ a , aKey , '|' , ((cart books at: aKey) asString)]!

a!
!Cart methodsFor: 'as yet unclassified' stamp: 'RI 11/1/2021 15:14:46' prior: 50919423!
listBooks
	| result |
	
	result _ ''.
	
	books keys sort do: [:aKey | result _ result , aKey , '|' , (books at: aKey) asString , '|'].
	
	^result copyFrom: 1 to: (result size - 1).! !

!testRun: #RestServiceTests #test01NewCartStartsEmpty stamp: 'RI 11/1/2021 15:14:47'!
PASSED!

!testRun: #RestServiceTests #test02CartWithABookIsNotEmpty stamp: 'RI 11/1/2021 15:14:47'!
PASSED!

!testRun: #RestServiceTests #test03AddingExistingBookToACartModifiesAmount stamp: 'RI 11/1/2021 15:14:47'!
PASSED!

!testRun: #RestServiceTests #test04 stamp: 'RI 11/1/2021 15:14:47'!
PASSED!
!RestServiceTests methodsFor: 'as yet unclassified' stamp: 'RI 11/1/2021 15:16:15'!
test04CartWithMultipleBooksListsThemCorrectly

	| cart |
	
	cart _ Cart new.
	cart addBook: '1' withAmount: 2.
	cart addBook: '1' withAmount: 2.	
	cart addBook: '2' withAmount: 3.		
	
	self assert: '1|4|2|3' equals: (cart listBooks).! !

!methodRemoval: RestServiceTests #test04 stamp: 'RI 11/1/2021 15:16:15'!
test04

	| cart |
	
	cart _ Cart new.
	cart addBook: '1' withAmount: 2.
	cart addBook: '1' withAmount: 2.	
	cart addBook: '2' withAmount: 3.		
	
	self assert: '1|4|2|3' equals: (cart listBooks).!

!classRenamed: #RestServiceTests as: #CartTests stamp: 'RI 11/1/2021 15:20:12'!
Smalltalk renameClassNamed: #RestServiceTests as: #CartTests!
!CartTests methodsFor: 'as yet unclassified' stamp: 'RI 11/1/2021 15:24:26'!
test05

	| cart |
	
	cart _ Cart new.
	
	self should: [cart addBook: '1' withAmount: 0.]
		raise: Error
		withExceptionDo: [:anError | self assert: Cart cannotAddInvalidAmountOfBooks equals: anError messageText].! !

!testRun: #CartTests #test05 stamp: 'RI 11/1/2021 15:24:30'!
FAILURE!

!testRun: #CartTests #test05 stamp: 'RI 11/1/2021 15:24:42'!
FAILURE!

!testRun: #CartTests #test05 stamp: 'RI 11/1/2021 15:24:54'!
FAILURE!

!testRun: #CartTests #test05 stamp: 'RI 11/1/2021 15:24:58'!
FAILURE!

!testRun: #CartTests #test05 stamp: 'RI 11/1/2021 15:25:07'!
FAILURE!

!testRun: #CartTests #test05 stamp: 'RI 11/1/2021 15:25:40'!
FAILURE!
!Cart methodsFor: 'as yet unclassified' stamp: 'RI 11/1/2021 15:27:52' prior: 50919208!
addBook: anISBN withAmount: anAmount
	
	| originalAmount |
	
	(anAmount < 1) ifTrue: [self error: Cart cannotAddInvalidAmountOfBooks].
	
	originalAmount _ books at: anISBN ifAbsent: [
		^books add: anISBN->anAmount. 
	].

	books at: anISBN put: originalAmount + anAmount.! !

!testRun: #CartTests #test01NewCartStartsEmpty stamp: 'RI 11/1/2021 15:27:56'!
PASSED!

!testRun: #CartTests #test02CartWithABookIsNotEmpty stamp: 'RI 11/1/2021 15:27:56'!
PASSED!

!testRun: #CartTests #test03AddingExistingBookToACartModifiesAmount stamp: 'RI 11/1/2021 15:27:56'!
PASSED!

!testRun: #CartTests #test04CartWithMultipleBooksListsThemCorrectly stamp: 'RI 11/1/2021 15:27:56'!
PASSED!

!testRun: #CartTests #test05 stamp: 'RI 11/1/2021 15:27:56'!
ERROR!

!testRun: #CartTests #test05 stamp: 'RI 11/1/2021 15:27:56'!
ERROR!
!Cart class methodsFor: 'as yet unclassified' stamp: 'RI 11/1/2021 15:28:04'!
cannotAddInvalidAmountOfBooks
	self shouldBeImplemented.! !

	^'Cannot add 0 or less books.'.!
!Cart class methodsFor: 'as yet unclassified' stamp: 'RI 11/1/2021 15:28:40' prior: 50919583!
cannotAddInvalidAmountOfBooks
	
	^'Cannot add 0 or less books.'.! !

!testRun: #CartTests #test05 stamp: 'RI 11/1/2021 15:28:41'!
FAILURE!
!CartTests methodsFor: 'as yet unclassified' stamp: 'RI 11/1/2021 15:29:22' prior: 50919532!
test05

	| cart |
	
	cart _ Cart new.
	
	self should: [cart addBook: '1' withAmount: 0.]
		raise: Error
		withExceptionDo: [:anError | self assert: Cart cannotAddInvalidAmountOfBooks equals: anError messageText].! !
!Cart methodsFor: 'as yet unclassified' stamp: 'RI 11/1/2021 15:29:46' prior: 50919555!
addBook: anISBN withAmount: anAmount
	
	| originalAmount |
	
	(anAmount < 1) ifTrue: [^self error: Cart cannotAddInvalidAmountOfBooks].
	
	originalAmount _ books at: anISBN ifAbsent: [
		^books add: anISBN->anAmount. 
	].

	books at: anISBN put: originalAmount + anAmount.! !

!testRun: #CartTests #test01NewCartStartsEmpty stamp: 'RI 11/1/2021 15:29:47'!
PASSED!

!testRun: #CartTests #test02CartWithABookIsNotEmpty stamp: 'RI 11/1/2021 15:29:47'!
PASSED!

!testRun: #CartTests #test03AddingExistingBookToACartModifiesAmount stamp: 'RI 11/1/2021 15:29:47'!
PASSED!

!testRun: #CartTests #test04CartWithMultipleBooksListsThemCorrectly stamp: 'RI 11/1/2021 15:29:47'!
PASSED!

!testRun: #CartTests #test05 stamp: 'RI 11/1/2021 15:29:47'!
PASSED!
!CartTests methodsFor: 'as yet unclassified' stamp: 'RI 11/1/2021 15:30:58'!
test05AddNegativeOrZeroAmountInCartThrowsError

	| cart |
	
	cart _ Cart new.
	
	self should: [cart addBook: '1' withAmount: 0.]
		raise: Error
		withExceptionDo: [:anError | self assert: Cart cannotAddInvalidAmountOfBooks equals: anError messageText].! !

!methodRemoval: CartTests #test05 stamp: 'RI 11/1/2021 15:30:58'!
test05

	| cart |
	
	cart _ Cart new.
	
	self should: [cart addBook: '1' withAmount: 0.]
		raise: Error
		withExceptionDo: [:anError | self assert: Cart cannotAddInvalidAmountOfBooks equals: anError messageText].!
!CartTests methodsFor: 'as yet unclassified' stamp: 'RI 11/1/2021 15:31:07'!
test05AddingNegativeOrZeroAmountInCartThrowsError

	| cart |
	
	cart _ Cart new.
	
	self should: [cart addBook: '1' withAmount: 0.]
		raise: Error
		withExceptionDo: [:anError | self assert: Cart cannotAddInvalidAmountOfBooks equals: anError messageText].! !

!methodRemoval: CartTests #test05AddNegativeOrZeroAmountInCartThrowsError stamp: 'RI 11/1/2021 15:31:07'!
test05AddNegativeOrZeroAmountInCartThrowsError

	| cart |
	
	cart _ Cart new.
	
	self should: [cart addBook: '1' withAmount: 0.]
		raise: Error
		withExceptionDo: [:anError | self assert: Cart cannotAddInvalidAmountOfBooks equals: anError messageText].!
!CartTests methodsFor: 'as yet unclassified' stamp: 'RI 11/1/2021 15:32:37'!
test06

	| cart |
	
	cart _ Cart new.
	
	self should: [cart addBook: '1' withAmount: 1.5.]
		raise: Error
		withExceptionDo: [:anError | self assert: Cart cannotAddInvalidAmountOfBooks equals: anError messageText].! !

!testRun: #CartTests #test06 stamp: 'RI 11/1/2021 15:32:39'!
FAILURE!

1.5 isInteger !

1 isInteger !

0 isInteger !

-1 isInteger !
!Cart methodsFor: 'as yet unclassified' stamp: 'RI 11/1/2021 15:34:21' prior: 50919607!
addBook: anISBN withAmount: anAmount
	
	| originalAmount |
	
	((anAmount < 1) or: [anAmount isInteger not ]) ifTrue: [^self error: Cart cannotAddInvalidAmountOfBooks].
	
	originalAmount _ books at: anISBN ifAbsent: [
		^books add: anISBN->anAmount. 
	].

	books at: anISBN put: originalAmount + anAmount.! !

!testRun: #CartTests #test01NewCartStartsEmpty stamp: 'RI 11/1/2021 15:34:22'!
PASSED!

!testRun: #CartTests #test02CartWithABookIsNotEmpty stamp: 'RI 11/1/2021 15:34:22'!
PASSED!

!testRun: #CartTests #test03AddingExistingBookToACartModifiesAmount stamp: 'RI 11/1/2021 15:34:22'!
PASSED!

!testRun: #CartTests #test04CartWithMultipleBooksListsThemCorrectly stamp: 'RI 11/1/2021 15:34:22'!
PASSED!

!testRun: #CartTests #test05AddingNegativeOrZeroAmountInCartThrowsError stamp: 'RI 11/1/2021 15:34:22'!
PASSED!

!testRun: #CartTests #test06 stamp: 'RI 11/1/2021 15:34:22'!
PASSED!
!Cart methodsFor: 'as yet unclassified' stamp: 'RI 11/1/2021 15:34:29' prior: 50919689!
addBook: anISBN withAmount: anAmount
	
	| originalAmount |
	
	((anAmount < 1) or: [anAmount isInteger not]) ifTrue: [^self error: Cart cannotAddInvalidAmountOfBooks].
	
	originalAmount _ books at: anISBN ifAbsent: [
		^books add: anISBN->anAmount. 
	].

	books at: anISBN put: originalAmount + anAmount.! !

!testRun: #CartTests #test01NewCartStartsEmpty stamp: 'RI 11/1/2021 15:34:31'!
PASSED!

!testRun: #CartTests #test02CartWithABookIsNotEmpty stamp: 'RI 11/1/2021 15:34:31'!
PASSED!

!testRun: #CartTests #test03AddingExistingBookToACartModifiesAmount stamp: 'RI 11/1/2021 15:34:31'!
PASSED!

!testRun: #CartTests #test04CartWithMultipleBooksListsThemCorrectly stamp: 'RI 11/1/2021 15:34:31'!
PASSED!

!testRun: #CartTests #test05AddingNegativeOrZeroAmountInCartThrowsError stamp: 'RI 11/1/2021 15:34:31'!
PASSED!

!testRun: #CartTests #test06 stamp: 'RI 11/1/2021 15:34:31'!
PASSED!
!Cart class methodsFor: 'as yet unclassified' stamp: 'RI 11/1/2021 15:34:49' prior: 50919589!
cannotAddInvalidAmountOfBooks
	
	^'Invalid amount of book to be added.'.! !

!testRun: #CartTests #test01NewCartStartsEmpty stamp: 'RI 11/1/2021 15:34:50'!
PASSED!

!testRun: #CartTests #test02CartWithABookIsNotEmpty stamp: 'RI 11/1/2021 15:34:50'!
PASSED!

!testRun: #CartTests #test03AddingExistingBookToACartModifiesAmount stamp: 'RI 11/1/2021 15:34:50'!
PASSED!

!testRun: #CartTests #test04CartWithMultipleBooksListsThemCorrectly stamp: 'RI 11/1/2021 15:34:50'!
PASSED!

!testRun: #CartTests #test05AddingNegativeOrZeroAmountInCartThrowsError stamp: 'RI 11/1/2021 15:34:50'!
PASSED!

!testRun: #CartTests #test06 stamp: 'RI 11/1/2021 15:34:50'!
PASSED!
!CartTests methodsFor: 'as yet unclassified' stamp: 'RI 11/1/2021 15:35:31'!
test06AddingNotIntegerAmountOfBooksThrowsError

	| cart |
	
	cart _ Cart new.
	
	self should: [cart addBook: '1' withAmount: 1.5.]
		raise: Error
		withExceptionDo: [:anError | self assert: Cart cannotAddInvalidAmountOfBooks equals: anError messageText].! !

!methodRemoval: CartTests #test06 stamp: 'RI 11/1/2021 15:35:31'!
test06

	| cart |
	
	cart _ Cart new.
	
	self should: [cart addBook: '1' withAmount: 1.5.]
		raise: Error
		withExceptionDo: [:anError | self assert: Cart cannotAddInvalidAmountOfBooks equals: anError messageText].!
!CartTests methodsFor: 'as yet unclassified' stamp: 'RI 11/1/2021 15:35:50'!
test05AddingNegativeOrZeroAmountOfBooksThrowsError

	| cart |
	
	cart _ Cart new.
	
	self should: [cart addBook: '1' withAmount: 0.]
		raise: Error
		withExceptionDo: [:anError | self assert: Cart cannotAddInvalidAmountOfBooks equals: anError messageText].! !

!methodRemoval: CartTests #test05AddingNegativeOrZeroAmountInCartThrowsError stamp: 'RI 11/1/2021 15:35:50'!
test05AddingNegativeOrZeroAmountInCartThrowsError

	| cart |
	
	cart _ Cart new.
	
	self should: [cart addBook: '1' withAmount: 0.]
		raise: Error
		withExceptionDo: [:anError | self assert: Cart cannotAddInvalidAmountOfBooks equals: anError messageText].!

!classRemoval: #RestService stamp: 'RI 11/1/2021 15:46:44'!
Object subclass: #RestService
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----SNAPSHOT----(1 November 2021 15:47:05) CuisUniversity-4913.image priorSource: 18696138!

----STARTUP---- (1 November 2021 18:23:37) as C:\Users\migue\Desktop\CuisUniversity\CuisUniversity-4913.image!


----End fileIn of \Users\migue\Desktop\CuisUniversity\TusLibros.st----!

!classRemoval: #Cart stamp: 'MR 11/1/2021 19:16:40'!
Object subclass: #Cart
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTests stamp: 'MR 11/1/2021 19:16:41'!
TestCase subclass: #CartTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of \Users\migue\Desktop\CuisUniversity\TusLibros-18.st----!

TestCase subclass: #CheckoutTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CheckoutTest category: 'TusLibros' stamp: 'MR 11/1/2021 19:25:13'!
TestCase subclass: #CheckoutTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CheckoutTest methodsFor: 'nil' stamp: 'MR 11/1/2021 19:25:27'!
test01

	! !
!CheckoutTest methodsFor: 'nil' stamp: 'MR 11/1/2021 19:25:47'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MR 11/1/2021 19:25:49' prior: 50918243!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog.! !
!CheckoutTest methodsFor: 'nil' stamp: 'MR 11/1/2021 19:25:55'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore! !
!CheckoutTest methodsFor: 'nil' stamp: 'MR 11/1/2021 19:26:02'!
itemSellByTheStore
	
	^ 'validBook'! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MR 11/1/2021 19:26:14' prior: 50918240!
test01

	| cart |
	cart _ self createCart.
	! !

!methodRemoval: CheckoutTest #test01 stamp: 'MR 11/1/2021 19:27:07'!
test01

	| cart |
	cart _ self createCart.
	!
!CartTest methodsFor: 'tests' stamp: 'MR 11/1/2021 19:27:24'!
test09

	| cart |
	
	cart := self createCart.
	
	self ! !
!CartTest methodsFor: 'tests' stamp: 'MR 11/1/2021 19:28:03' prior: 50918269!
test09

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart checkout ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidCheckoutErrorMessage.
		]! !

!testRun: #CartTest #test09 stamp: 'MR 11/1/2021 19:28:05'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'MR 11/1/2021 19:28:18'!
checkout
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'MR 11/1/2021 19:28:38' prior: 50918286!
checkout
	^self error: Cart invalidCheckoutErrorMessage! !

!testRun: #CartTest #test09 stamp: 'MR 11/1/2021 19:28:38'!
ERROR!
!Cart class methodsFor: 'category-name' stamp: 'MR 11/1/2021 19:28:44'!
invalidCheckoutErrorMessage
	self shouldBeImplemented.! !
!Cart class methodsFor: 'category-name' stamp: 'MR 11/1/2021 19:28:58' prior: 50918297!
invalidCheckoutErrorMessage
	^'Cannot checkout this cart'.! !

!testRun: #CartTest #test09 stamp: 'MR 11/1/2021 19:28:59'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'MR 11/1/2021 19:29:16' prior: 50918274!
test09

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart checkout ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart invalidCheckoutErrorMessage.
		]! !

!testRun: #CartTest #test09 stamp: 'MR 11/1/2021 19:29:17'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MR 11/1/2021 19:29:17'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MR 11/1/2021 19:29:17'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MR 11/1/2021 19:29:17'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MR 11/1/2021 19:29:17'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MR 11/1/2021 19:29:17'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MR 11/1/2021 19:29:17'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MR 11/1/2021 19:29:17'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MR 11/1/2021 19:29:17'!
PASSED!

!testRun: #CartTest #test09 stamp: 'MR 11/1/2021 19:29:17'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'MR 11/1/2021 19:30:23'!
test10

	| cart |
	
	cart := self createCart.
	
	self assert: 10 equals: cart checkout.! !
!CartTest methodsFor: 'tests' stamp: 'MR 11/1/2021 19:30:35' prior: 50918348!
test10

	| cart |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	
	self assert: 10 equals: cart checkout.! !

!testRun: #CartTest #test10 stamp: 'MR 11/1/2021 19:30:43'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'MR 11/1/2021 19:32:15' prior: 50918290!
checkout
	self isEmpty ifTrue: [	^self error: Cart invalidCheckoutErrorMessage].
	
	^10.! !

!testRun: #CartTest #test10 stamp: 'MR 11/1/2021 19:32:21'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MR 11/1/2021 19:32:21'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MR 11/1/2021 19:32:21'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MR 11/1/2021 19:32:21'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MR 11/1/2021 19:32:21'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MR 11/1/2021 19:32:21'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MR 11/1/2021 19:32:21'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MR 11/1/2021 19:32:21'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MR 11/1/2021 19:32:21'!
PASSED!

!testRun: #CartTest #test09 stamp: 'MR 11/1/2021 19:32:21'!
PASSED!

!testRun: #CartTest #test10 stamp: 'MR 11/1/2021 19:32:21'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'MR 11/1/2021 19:32:31'!
test11

	| cart |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cart add: self itemSellByTheStore.
	
	self assert: 10 equals: cart checkout.! !
!CartTest methodsFor: 'tests' stamp: 'MR 11/1/2021 19:32:34' prior: 50918400!
test11

	| cart |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cart add: self itemSellByTheStore.
	
	self assert: 20 equals: cart checkout.! !

!testRun: #CartTest #test11 stamp: 'MR 11/1/2021 19:32:36'!
FAILURE!

----End fileIn of C:\Users\migue\Desktop\CuisUniversity\Packages\TerseGuide.pck.st----!
!CartTest methodsFor: 'support' stamp: 'MR 11/1/2021 19:35:28' prior: 50918218!
defaultCatalog
	
	| dict |
	dict _ Dictionary new.
	
	"dict at:" 
	
	^dict.! !
!CartTest methodsFor: 'support' stamp: 'MR 11/1/2021 19:35:50' prior: 50921344!
defaultCatalog
	
	| dict |
	dict _ Dictionary new.
	
	dict at: self itemSellByTheStore put: 10.
	
	^dict.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'MR 11/1/2021 19:37:01' prior: 50918363!
checkout
	|value|
	
	self isEmpty ifTrue: [	^self error: Cart invalidCheckoutErrorMessage].
	
	value _ 0.
	items do: [:anItem |
		value _ value + catalog at: anItem.
	].

	^value.
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MR 11/1/2021 19:37:05'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MR 11/1/2021 19:37:05'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MR 11/1/2021 19:37:05'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MR 11/1/2021 19:37:05'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MR 11/1/2021 19:37:05'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MR 11/1/2021 19:37:05'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MR 11/1/2021 19:37:05'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MR 11/1/2021 19:37:05'!
ERROR!

!testRun: #CartTest #test09 stamp: 'MR 11/1/2021 19:37:05'!
PASSED!

!testRun: #CartTest #test10 stamp: 'MR 11/1/2021 19:37:05'!
ERROR!

!testRun: #CartTest #test11 stamp: 'MR 11/1/2021 19:37:05'!
ERROR!
!Cart methodsFor: 'assertions' stamp: 'MR 11/1/2021 19:38:04' prior: 50918066!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MR 11/1/2021 19:38:20'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MR 11/1/2021 19:38:20'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MR 11/1/2021 19:38:20'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MR 11/1/2021 19:38:20'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MR 11/1/2021 19:38:20'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MR 11/1/2021 19:38:20'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MR 11/1/2021 19:38:20'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MR 11/1/2021 19:38:20'!
PASSED!

!testRun: #CartTest #test09 stamp: 'MR 11/1/2021 19:38:20'!
PASSED!

!testRun: #CartTest #test10 stamp: 'MR 11/1/2021 19:38:20'!
PASSED!

!testRun: #CartTest #test11 stamp: 'MR 11/1/2021 19:38:20'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'MR 11/1/2021 19:39:37'!
test12
	| cart |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cart add: self itemSellByTheStore.
	
	self assert: 20 equals: cart checkout.! !

!methodRemoval: CartTest #test12 stamp: 'MR 11/1/2021 19:40:17'!
test12
	| cart |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cart add: self itemSellByTheStore.
	
	self assert: 20 equals: cart checkout.!

Object subclass: #Cashier
	instanceVariableNames: 'catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'MR 11/1/2021 19:40:31'!
Object subclass: #Cashier
	instanceVariableNames: 'catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'nil' stamp: 'MR 11/1/2021 19:40:51'!
checkoutFor: aCart

	! !
!Cashier methodsFor: 'nil' stamp: 'MR 11/1/2021 19:41:10'!
initializeWith: aCatalog

	catalog _ aCatalog.! !
!CartTest methodsFor: 'tests' stamp: 'MR 11/1/2021 19:43:23' prior: 50918309!
test09

	| cart cashier |
	
	cart := self createCart.
	cashier := Cashier new.
	
	self 
		should: [cashier checkoutFor: cart ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart invalidCheckoutErrorMessage.
		]! !
!CartTest methodsFor: 'tests' stamp: 'MR 11/1/2021 19:43:29' prior: 50921466!
test09

	| cart cashier |
	
	cart := self createCart.
	cashier := Cashier new.
	
	self 
		should: [cashier checkout: cart ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart invalidCheckoutErrorMessage.
		]! !
!CartTest methodsFor: 'tests' stamp: 'MR 11/1/2021 19:43:50' prior: 50921478!
test09

	| cart cashier |
	
	cart := self createCart.
	cashier := Cashier with: self defaultCatalog.
	
	self 
		should: [cashier checkout: cart ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart invalidCheckoutErrorMessage.
		]! !
!CartTest methodsFor: 'tests' stamp: 'MR 11/1/2021 19:44:13' prior: 50921489!
test09

	| cart cashier |
	
	cart := self createCart.
	cashier := Cashier with: self defaultCatalog.
	
	self 
		should: [cashier checkout: cart]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !

!testRun: #CartTest #test09 stamp: 'MR 11/1/2021 19:44:21'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'MR 11/1/2021 19:44:26'!
with: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: aDictionary ! !
!Cashier class methodsFor: 'instance creation' stamp: 'MR 11/1/2021 19:44:34' prior: 50921515!
with: aCatalog
	^self new initializeWith: aCatalog ! !

!testRun: #CartTest #test09 stamp: 'MR 11/1/2021 19:44:35'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/1/2021 19:44:41'!
checkout: aCart 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/1/2021 19:44:49' prior: 50921530!
checkout: aCart 
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/1/2021 19:45:20' prior: 50921535!
checkout: aCart 
	|value|
	
	aCart isEmpty ifTrue: [	^self error: Cashier invalidCheckoutErrorMessage].
	
	value _ 0.
	aCart items do: [:anItem |
		value _ value + catalog at: anItem.
	].

	^value.! !

!methodRemoval: Cashier #checkoutFor: stamp: 'MR 11/1/2021 19:45:26'!
checkoutFor: aCart

	!
!Cart methodsFor: 'as yet unclassified' stamp: 'MR 11/1/2021 19:46:47'!
items

	^items.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MR 11/1/2021 19:47:16'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MR 11/1/2021 19:47:16'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MR 11/1/2021 19:47:16'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MR 11/1/2021 19:47:16'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MR 11/1/2021 19:47:16'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MR 11/1/2021 19:47:16'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MR 11/1/2021 19:47:16'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MR 11/1/2021 19:47:16'!
PASSED!

!testRun: #CartTest #test09 stamp: 'MR 11/1/2021 19:47:16'!
ERROR!

!testRun: #CartTest #test10 stamp: 'MR 11/1/2021 19:47:16'!
PASSED!

!testRun: #CartTest #test11 stamp: 'MR 11/1/2021 19:47:16'!
PASSED!

!testRun: #CartTest #test09 stamp: 'MR 11/1/2021 19:47:16'!
ERROR!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'MR 11/1/2021 19:47:31'!
invalidCheckoutErrorMessage
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'MR 11/1/2021 19:47:38' prior: 50921589!
invalidCheckoutErrorMessage
	^'Carrito invalido'.! !

!testRun: #CartTest #test09 stamp: 'MR 11/1/2021 19:47:39'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MR 11/1/2021 19:47:42'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MR 11/1/2021 19:47:42'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MR 11/1/2021 19:47:42'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MR 11/1/2021 19:47:42'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MR 11/1/2021 19:47:42'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MR 11/1/2021 19:47:42'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MR 11/1/2021 19:47:42'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MR 11/1/2021 19:47:42'!
PASSED!

!testRun: #CartTest #test09 stamp: 'MR 11/1/2021 19:47:42'!
PASSED!

!testRun: #CartTest #test10 stamp: 'MR 11/1/2021 19:47:42'!
PASSED!

!testRun: #CartTest #test11 stamp: 'MR 11/1/2021 19:47:42'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'MR 11/1/2021 19:48:11' prior: 50918354!
test10

	| cart cashier |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cashier := Cashier new: self defaultCatalog.
	
	self assert: 10 equals: cashier checkout: cart.! !
!CartTest methodsFor: 'tests' stamp: 'MR 11/1/2021 19:48:17' prior: 50921633!
test10

	| cart cashier |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cashier := Cashier new: self defaultCatalog.
	
	self assert: 10 equals: (cashier checkout: cart).! !

!testRun: #CartTest #test10 stamp: 'MR 11/1/2021 19:48:18'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'MR 11/1/2021 19:48:27' prior: 50921642!
test10

	| cart cashier |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cashier := Cashier for: self defaultCatalog.
	
	self assert: 10 equals: (cashier checkout: cart).! !
!CartTest methodsFor: 'tests' stamp: 'MR 11/1/2021 19:48:47' prior: 50921653!
test10

	| cart cashier |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cashier := Cashier with: self defaultCatalog.
	
	self assert: 10 equals: (cashier checkout: cart).! !

!testRun: #CartTest #test10 stamp: 'MR 11/1/2021 19:48:54'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MR 11/1/2021 19:48:54'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MR 11/1/2021 19:48:54'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MR 11/1/2021 19:48:54'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MR 11/1/2021 19:48:54'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MR 11/1/2021 19:48:54'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MR 11/1/2021 19:48:54'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MR 11/1/2021 19:48:54'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MR 11/1/2021 19:48:54'!
PASSED!

!testRun: #CartTest #test09 stamp: 'MR 11/1/2021 19:48:54'!
PASSED!

!testRun: #CartTest #test10 stamp: 'MR 11/1/2021 19:48:54'!
PASSED!

!testRun: #CartTest #test11 stamp: 'MR 11/1/2021 19:48:54'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'MR 11/1/2021 19:49:16' prior: 50918408!
test11

	| cart cashier |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cart add: self itemSellByTheStore.
	cashier := Cashier with: self defaultCatalog.
	
	self assert: 20 equals: (cashier checkout: cart).! !

!testRun: #CartTest #test11 stamp: 'MR 11/1/2021 19:49:18'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MR 11/1/2021 19:49:18'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MR 11/1/2021 19:49:18'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MR 11/1/2021 19:49:18'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MR 11/1/2021 19:49:18'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MR 11/1/2021 19:49:18'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MR 11/1/2021 19:49:18'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MR 11/1/2021 19:49:18'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MR 11/1/2021 19:49:18'!
PASSED!

!testRun: #CartTest #test09 stamp: 'MR 11/1/2021 19:49:18'!
PASSED!

!testRun: #CartTest #test10 stamp: 'MR 11/1/2021 19:49:18'!
PASSED!

!testRun: #CartTest #test11 stamp: 'MR 11/1/2021 19:49:18'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'MR 11/1/2021 19:50:49'!
test12

	| cart cashier |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cart add: self itemSellByTheStore.
	cashier := Cashier with: self defaultCatalog.
	
	self assert: 20 equals: (cashier checkout: cart ).! !
!CartTest methodsFor: 'tests' stamp: 'MR 11/1/2021 19:52:37' prior: 50921749!
test12

	| cart cashier |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cashier := Cashier with: self defaultCatalog.
	
	
	
	"self assert: 10 equals: (cashier checkout: cart withCreditCardExpirationDate: )."! !
!CartTest methodsFor: 'tests' stamp: 'MR 11/1/2021 19:55:16' prior: 50921759!
test12

	| cart cashier actualDate futureDate |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cashier := Cashier with: self defaultCatalog.
	
	actualDate := GregorianMonthOfYear current.
	futureDate := actualDate next: 1.
	
	"self assert: 10 equals: (cashier checkout: cart withCreditCardExpirationDate: )."! !
!CartTest methodsFor: 'tests' stamp: 'MR 11/1/2021 19:56:21' prior: 50921769!
test12

	| cart cashier actualDate expirationDate |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cashier := Cashier with: self defaultCatalog.
	
	actualDate := GregorianMonthOfYear current.
	expirationDate := actualDate next: 1.
	
	self 
		should: [cashier checkout: cart withCreditCardExpirationDate: expirationDate]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]
	
	"self assert: 10 equals: (cashier checkout: cart withCreditCardExpirationDate: )."! !
!CartTest methodsFor: 'tests' stamp: 'MR 11/1/2021 19:56:50' prior: 50921782!
test12

	| cart cashier actualDate expirationDate |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cashier := Cashier with: self defaultCatalog.
	
	actualDate := GregorianMonthOfYear current.
	expirationDate := actualDate next: 1.
	
	self 
		should: [cashier checkout: cart withCreditCardExpirationDate: expirationDate]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]
	
	"self assert: 10 equals: (cashier checkout: cart withCreditCardExpirationDate: )."! !

!testRun: #CartTest #test12 stamp: 'MR 11/1/2021 19:56:50'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'MR 11/1/2021 19:58:06' prior: 50921803!
test12

	| cart cashier actualDate expirationDate |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cashier := Cashier with: self defaultCatalog.
	
	actualDate := GregorianMonthOfYear current.
	expirationDate := actualDate previous: 1.
	
	self 
		should: [cashier checkout: cart withCreditCardExpirationDate: expirationDate]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]
	
	"self assert: 10 equals: (cashier checkout: cart withCreditCardExpirationDate: )."! !
!CartTest methodsFor: 'tests' stamp: 'MR 11/1/2021 19:58:09' prior: 50921826!
test12

	| cart cashier actualDate expirationDate |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cashier := Cashier with: self defaultCatalog.
	
	actualDate := GregorianMonthOfYear current.
	expirationDate := actualDate previous: 1.
	
	self 
		should: [cashier checkout: cart withCreditCardExpirationDate: expirationDate]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !

!testRun: #CartTest #test12 stamp: 'MR 11/1/2021 19:58:09'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'MR 11/1/2021 19:58:43' prior: 50921847!
test12

	| cart cashier actualDate expirationDate |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cashier := Cashier with: self defaultCatalog.
	
	actualDate := GregorianMonthOfYear current.
	expirationDate := actualDate previous: 100000.
	
	self 
		should: [cashier checkout: cart withCreditCardExpirationDate: expirationDate]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !

!testRun: #CartTest #test12 stamp: 'MR 11/1/2021 19:58:44'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'MR 11/1/2021 19:58:55' prior: 50921867!
test12

	| cart cashier actualDate expirationDate |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cashier := Cashier with: self defaultCatalog.
	
	actualDate := GregorianMonthOfYear current.
	expirationDate := actualDate previous: 1 * month.
	
	self 
		should: [cashier checkout: cart withCreditCardExpirationDate: expirationDate]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !

!testRun: #CartTest #test12 stamp: 'MR 11/1/2021 19:58:56'!
ERROR!

!testRun: #CartTest #test12 stamp: 'MR 11/1/2021 19:59:02'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/1/2021 19:59:10'!
checkout: aCart withCreditCardExpirationDate: aGregorianMonthOfYear 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/1/2021 20:00:14' prior: 50921911!
checkout: aCart withCreditCardExpirationDate: anExpirationMonthOfYear

	(GregorianMonthOfYear current > anExpirationMonthOfYear) ifTrue: [
		^self error: Cashier invalidCheckoutErrorMessage 
	].

	^self checkout: aCart.
	! !

!testRun: #CartTest #test12 stamp: 'MR 11/1/2021 20:00:15'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MR 11/1/2021 20:00:15'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MR 11/1/2021 20:00:15'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MR 11/1/2021 20:00:15'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MR 11/1/2021 20:00:15'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MR 11/1/2021 20:00:15'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MR 11/1/2021 20:00:15'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MR 11/1/2021 20:00:15'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MR 11/1/2021 20:00:15'!
PASSED!

!testRun: #CartTest #test09 stamp: 'MR 11/1/2021 20:00:15'!
PASSED!

!testRun: #CartTest #test10 stamp: 'MR 11/1/2021 20:00:15'!
PASSED!

!testRun: #CartTest #test11 stamp: 'MR 11/1/2021 20:00:15'!
PASSED!

!testRun: #CartTest #test12 stamp: 'MR 11/1/2021 20:00:15'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'MR 11/1/2021 20:00:23' prior: 50921888!
test12

	| cart cashier actualDate expirationDate |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cashier := Cashier with: self defaultCatalog.
	
	actualDate := GregorianMonthOfYear current.
	expirationDate := actualDate previous: 1 * month.
	
	self 
		should: [cashier checkout: cart withCreditCardExpirationDate: expirationDate]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !

!classRemoval: #CheckoutTest stamp: 'MR 11/1/2021 20:02:31'!
TestCase subclass: #CheckoutTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'tests' stamp: 'MR 11/1/2021 20:03:09'!
test09CannotCheckoutEmptyCart

	| cart cashier |
	
	cart := self createCart.
	cashier := Cashier with: self defaultCatalog.
	
	self 
		should: [cashier checkout: cart]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !

!methodRemoval: CartTest #test09 stamp: 'MR 11/1/2021 20:03:09'!
test09

	| cart cashier |
	
	cart := self createCart.
	cashier := Cashier with: self defaultCatalog.
	
	self 
		should: [cashier checkout: cart]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]!

!methodRemoval: CartTest #test10 stamp: 'MR 11/1/2021 20:03:26'!
test10

	| cart cashier |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cashier := Cashier with: self defaultCatalog.
	
	self assert: 10 equals: (cashier checkout: cart).!
!CartTest methodsFor: 'tests' stamp: 'MR 11/1/2021 20:03:53'!
test10CartCheckoutWithMultipleItemsHasCorrectPrice

	| cart cashier |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cart add: self itemSellByTheStore.
	cashier := Cashier with: self defaultCatalog.
	
	self assert: 20 equals: (cashier checkout: cart).! !

!methodRemoval: CartTest #test11 stamp: 'MR 11/1/2021 20:03:53'!
test11

	| cart cashier |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cart add: self itemSellByTheStore.
	cashier := Cashier with: self defaultCatalog.
	
	self assert: 20 equals: (cashier checkout: cart).!
!CartTest methodsFor: 'tests' stamp: 'MR 11/1/2021 20:04:55'!
test11CannotCheckoutCartWithExpiredCreditCard

	| cart cashier actualDate expirationDate |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cashier := Cashier with: self defaultCatalog.
	
	actualDate := GregorianMonthOfYear current.
	expirationDate := actualDate previous: 1 * month.
	
	self 
		should: [cashier checkout: cart withCreditCardExpirationDate: expirationDate]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !

!methodRemoval: CartTest #test12 stamp: 'MR 11/1/2021 20:04:55'!
test12

	| cart cashier actualDate expirationDate |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cashier := Cashier with: self defaultCatalog.
	
	actualDate := GregorianMonthOfYear current.
	expirationDate := actualDate previous: 1 * month.
	
	self 
		should: [cashier checkout: cart withCreditCardExpirationDate: expirationDate]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]!
!CartTest methodsFor: 'tests' stamp: 'MR 11/1/2021 20:06:14' prior: 50922039!
test11CannotCheckoutCartWithExpiredCreditCard

	| cart cashier actualDate expirationDate |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cashier := Cashier with: self defaultCatalog.
	
	actualDate := GregorianMonthOfYear current.
	expirationDate := actualDate previous: 1 * month.
	
	self 
		should: [cashier checkout: cart withCreditCardExpirationDate: expirationDate]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !
!CartTest methodsFor: 'tests' stamp: 'MR 11/1/2021 20:07:29' prior: 50921987!
test09CannotCheckoutEmptyCart

	| cart cashier creditCard |
	
	cart := self createCart.
	cashier := Cashier with: self defaultCatalog.
	creditCard := self createValidCreditCard.
	
	self 
		should: [cashier checkout: cart withCreditCard: creditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !
!CartTest methodsFor: 'tests' stamp: 'MR 11/1/2021 20:11:08' prior: 50922097!
test09CannotCheckoutEmptyCart

	| cart cashier creditCard |
	
	cart := self createCart.
	cashier := Cashier with: self defaultCatalog.
	creditCard := self createCreditCard.
	
	self 
		should: [cashier checkout: cart withCreditCard: creditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !
!CartTest methodsFor: 'support' stamp: 'MR 11/1/2021 20:12:06'!
createCreditCard

	| creditCard |
	creditCard _ Dictionary new.
	
	creditCard 
		add: #a->4;
		add: #b->3;
		add: #c->1;
		add: #d->2.
		
	^creditCard.! !
!CartTest methodsFor: 'support' stamp: 'MR 11/1/2021 20:13:19' prior: 50922127!
createCreditCard

	| creditCard |
	
	creditCard _ Dictionary new.
	
	creditCard 
		add: 'name' -> 'Mike Wazowsky';
		add: 'number' -> '4545565667677878';
		add: 'expirationMonth' -> 02;
		add: 'expirationYear' -> 2025.
		
	^creditCard.! !

!testRun: #CartTest #test09CannotCheckoutEmptyCart stamp: 'MR 11/1/2021 20:13:35'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/1/2021 20:13:39'!
checkout: aCart withCreditCard: aDictionary 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/1/2021 20:14:17' prior: 50922148!
checkout: aCart withCreditCard: aCreditCard 
	"(GregorianMonthOfYear current > anExpirationMonthOfYear) ifTrue: [
		^self error: Cashier invalidCheckoutErrorMessage 
	]."

	self checkout: aCart.! !

!testRun: #CartTest #test09CannotCheckoutEmptyCart stamp: 'MR 11/1/2021 20:14:27'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MR 11/1/2021 20:14:27'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MR 11/1/2021 20:14:27'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MR 11/1/2021 20:14:27'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MR 11/1/2021 20:14:27'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MR 11/1/2021 20:14:27'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MR 11/1/2021 20:14:27'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MR 11/1/2021 20:14:27'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MR 11/1/2021 20:14:27'!
PASSED!

!testRun: #CartTest #test09CannotCheckoutEmptyCart stamp: 'MR 11/1/2021 20:14:28'!
PASSED!

!testRun: #CartTest #test10CartCheckoutWithMultipleItemsHasCorrectPrice stamp: 'MR 11/1/2021 20:14:28'!
PASSED!

!testRun: #CartTest #test11CannotCheckoutCartWithExpiredCreditCard stamp: 'MR 11/1/2021 20:14:28'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'MR 11/1/2021 20:14:42' prior: 50922019!
test10CartCheckoutWithMultipleItemsHasCorrectPrice

	| cart cashier creditCard |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cart add: self itemSellByTheStore.
	cashier := Cashier with: self defaultCatalog.
	creditCard := self createCreditCard.
	
	self assert: 20 equals: (cashier checkout: cart withCreditCard: creditCard).! !

!testRun: #CartTest #test10CartCheckoutWithMultipleItemsHasCorrectPrice stamp: 'MR 11/1/2021 20:14:45'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/1/2021 20:14:58' prior: 50922154!
checkout: aCart withCreditCard: aCreditCard 
	"(GregorianMonthOfYear current > anExpirationMonthOfYear) ifTrue: [
		^self error: Cashier invalidCheckoutErrorMessage 
	]."

	^self checkout: aCart.! !

!testRun: #CartTest #test10CartCheckoutWithMultipleItemsHasCorrectPrice stamp: 'MR 11/1/2021 20:15:02'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MR 11/1/2021 20:15:02'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MR 11/1/2021 20:15:02'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MR 11/1/2021 20:15:02'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MR 11/1/2021 20:15:02'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MR 11/1/2021 20:15:02'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MR 11/1/2021 20:15:02'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MR 11/1/2021 20:15:02'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MR 11/1/2021 20:15:02'!
PASSED!

!testRun: #CartTest #test09CannotCheckoutEmptyCart stamp: 'MR 11/1/2021 20:15:02'!
PASSED!

!testRun: #CartTest #test10CartCheckoutWithMultipleItemsHasCorrectPrice stamp: 'MR 11/1/2021 20:15:02'!
PASSED!

!testRun: #CartTest #test11CannotCheckoutCartWithExpiredCreditCard stamp: 'MR 11/1/2021 20:15:02'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'MR 11/1/2021 20:16:04' prior: 50922077!
test11CannotCheckoutCartWithExpiredCreditCard

	| cart cashier expiredCreditCard |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cashier := Cashier with: self defaultCatalog.
	expiredCreditCard := self createCreditCard.
	expiredCreditCard at: 'expirationYear' put: 2020.
	
	self 
		should: [cashier checkout: cart withCreditCard: expiredCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !

!testRun: #CartTest #test11CannotCheckoutCartWithExpiredCreditCard stamp: 'MR 11/1/2021 20:16:12'!
FAILURE!

!methodRemoval: Cashier #checkout:withCreditCardExpirationDate: stamp: 'MR 11/1/2021 20:16:19'!
checkout: aCart withCreditCardExpirationDate: anExpirationMonthOfYear

	(GregorianMonthOfYear current > anExpirationMonthOfYear) ifTrue: [
		^self error: Cashier invalidCheckoutErrorMessage 
	].

	^self checkout: aCart.
	!
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/1/2021 20:17:27' prior: 50922219!
checkout: aCart withCreditCard: aCreditCard 
	
	| creditCardExpirationDate currentDate |
	currentDate := GregorianMonthOfYear current.
	creditCardExpirationDate := GregorianMonthOfYear year: (aCreditCard at: 'expirationYear') month: (aCreditCard at: 'expirationMonth').
	
	(currentDate > creditCardExpirationDate) ifTrue: [
		^self error: Cashier invalidCheckoutErrorMessage 
	].

	^self checkout: aCart.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/1/2021 20:17:31' prior: 50922300!
checkout: aCart withCreditCard: aCreditCard 
	
	| creditCardExpirationDate currentDate |
	
	currentDate := GregorianMonthOfYear current.
	creditCardExpirationDate := GregorianMonthOfYear year: (aCreditCard at: 'expirationYear') month: (aCreditCard at: 'expirationMonth').
	
	(currentDate > creditCardExpirationDate) ifTrue: [
		^self error: Cashier invalidCheckoutErrorMessage 
	].

	^self checkout: aCart.! !

!testRun: #CartTest #test11CannotCheckoutCartWithExpiredCreditCard stamp: 'MR 11/1/2021 20:17:35'!
ERROR!

!testRun: #CartTest #test11CannotCheckoutCartWithExpiredCreditCard stamp: 'MR 11/1/2021 20:17:51'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/1/2021 20:19:19' prior: 50922316!
checkout: aCart withCreditCard: aCreditCard 
	
	| creditCardExpirationDate currentDate |
	
	currentDate := GregorianMonthOfYear current.
	creditCardExpirationDate := GregorianMonthOfYear year: (aCreditCard at: 'expirationYear') * year month: (aCreditCard at: 'expirationMonth') * month.
	
	(currentDate > creditCardExpirationDate) ifTrue: [
		^self error: Cashier invalidCheckoutErrorMessage 
	].

	^self checkout: aCart.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MR 11/1/2021 20:19:26'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MR 11/1/2021 20:19:26'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MR 11/1/2021 20:19:26'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MR 11/1/2021 20:19:26'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MR 11/1/2021 20:19:26'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MR 11/1/2021 20:19:26'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MR 11/1/2021 20:19:26'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MR 11/1/2021 20:19:26'!
PASSED!

!testRun: #CartTest #test09CannotCheckoutEmptyCart stamp: 'MR 11/1/2021 20:19:26'!
ERROR!

!testRun: #CartTest #test10CartCheckoutWithMultipleItemsHasCorrectPrice stamp: 'MR 11/1/2021 20:19:26'!
ERROR!

!testRun: #CartTest #test11CannotCheckoutCartWithExpiredCreditCard stamp: 'MR 11/1/2021 20:19:26'!
ERROR!

!testRun: #CartTest #test09CannotCheckoutEmptyCart stamp: 'MR 11/1/2021 20:19:32'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/1/2021 20:21:59' prior: 50922339!
checkout: aCart withCreditCard: aCreditCard 
	
	| creditCardExpirationDate currentDate creditCardExpirationMonth creditCardExpirationYear |
	
	currentDate := GregorianMonthOfYear current.
	creditCardExpirationYear := GregorianYear number: (aCreditCard at: 'expirationYear').
	creditCardExpirationMonth := GregorianMonth new.
	creditCardExpirationDate := GregorianMonthOfYear year: creditCardExpirationYear month: (aCreditCard at: 'expirationMonth') * month.
	
	(currentDate > creditCardExpirationDate) ifTrue: [
		^self error: Cashier invalidCheckoutErrorMessage 
	].

	^self checkout: aCart.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/1/2021 20:23:08' prior: 50922393!
checkout: aCart withCreditCard: aCreditCard 
	
	| creditCardExpirationDate currentDate creditCardExpirationMonth creditCardExpirationYear |
	
	currentDate := GregorianMonthOfYear current.
	creditCardExpirationYear := GregorianYear number: (aCreditCard at: 'expirationYear').
	creditCardExpirationMonth := (GregorianMonth new) numbered: (aCreditCard at: 'expirationMonth').
	creditCardExpirationDate := GregorianMonthOfYear year: creditCardExpirationYear month: creditCardExpirationMonth.
	
	(currentDate > creditCardExpirationDate) ifTrue: [
		^self error: Cashier invalidCheckoutErrorMessage 
	].

	^self checkout: aCart.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MR 11/1/2021 20:23:10'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MR 11/1/2021 20:23:10'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MR 11/1/2021 20:23:10'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MR 11/1/2021 20:23:10'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MR 11/1/2021 20:23:10'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MR 11/1/2021 20:23:10'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MR 11/1/2021 20:23:10'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MR 11/1/2021 20:23:10'!
PASSED!

!testRun: #CartTest #test09CannotCheckoutEmptyCart stamp: 'MR 11/1/2021 20:23:10'!
ERROR!

!testRun: #CartTest #test10CartCheckoutWithMultipleItemsHasCorrectPrice stamp: 'MR 11/1/2021 20:23:10'!
ERROR!

!testRun: #CartTest #test11CannotCheckoutCartWithExpiredCreditCard stamp: 'MR 11/1/2021 20:23:10'!
ERROR!

!testRun: #CartTest #test09CannotCheckoutEmptyCart stamp: 'MR 11/1/2021 20:23:16'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/1/2021 20:23:39' prior: 50922415!
checkout: aCart withCreditCard: aCreditCard 
	
	| creditCardExpirationDate currentDate creditCardExpirationMonth creditCardExpirationYear |
	
	currentDate := GregorianMonthOfYear current.
	creditCardExpirationYear := GregorianYear number: (aCreditCard at: 'expirationYear').
	creditCardExpirationMonth := GregorianMonth numbered: (aCreditCard at: 'expirationMonth').
	creditCardExpirationDate := GregorianMonthOfYear year: creditCardExpirationYear month: creditCardExpirationMonth.
	
	(currentDate > creditCardExpirationDate) ifTrue: [
		^self error: Cashier invalidCheckoutErrorMessage 
	].

	^self checkout: aCart.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MR 11/1/2021 20:23:40'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MR 11/1/2021 20:23:40'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MR 11/1/2021 20:23:40'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MR 11/1/2021 20:23:40'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MR 11/1/2021 20:23:40'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MR 11/1/2021 20:23:40'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MR 11/1/2021 20:23:40'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MR 11/1/2021 20:23:40'!
PASSED!

!testRun: #CartTest #test09CannotCheckoutEmptyCart stamp: 'MR 11/1/2021 20:23:40'!
PASSED!

!testRun: #CartTest #test10CartCheckoutWithMultipleItemsHasCorrectPrice stamp: 'MR 11/1/2021 20:23:41'!
PASSED!

!testRun: #CartTest #test11CannotCheckoutCartWithExpiredCreditCard stamp: 'MR 11/1/2021 20:23:41'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'MR 11/1/2021 20:24:06' prior: 50922267!
test11CannotCheckoutCartWithExpiredCreditCard

	| cart cashier expiredCreditCard |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cashier := Cashier with: self defaultCatalog.
	
	expiredCreditCard := self createCreditCard.
	expiredCreditCard at: 'expirationYear' put: 2020.
	
	self 
		should: [cashier checkout: cart withCreditCard: expiredCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !
!CartTest methodsFor: 'tests' stamp: 'MR 11/1/2021 20:24:53'!
test12CannotCheckoutCartWithInvalidCreditCard

	| cart cashier expiredCreditCard |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cashier := Cashier with: self defaultCatalog.
	
	expiredCreditCard := self createCreditCard.
	expiredCreditCard at: 'expirationYear' put: 2020.
	
	self 
		should: [cashier checkout: cart withCreditCard: expiredCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !
!CartTest methodsFor: 'tests' stamp: 'MR 11/1/2021 20:25:03' prior: 50922552!
test12CannotCheckoutCartWithInvalidCreditCard

	| cart cashier expiredCreditCard |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cashier := Cashier with: self defaultCatalog.
	
	expiredCreditCard := self createCreditCard.
	expiredCreditCard at: 'name' put: ''.
	
	self 
		should: [cashier checkout: cart withCreditCard: expiredCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !
!CartTest methodsFor: 'tests' stamp: 'MR 11/1/2021 20:25:09' prior: 50922571!
test12CannotCheckoutCartWithInvalidCreditCard

	| cart cashier expiredCreditCard |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cashier := Cashier with: self defaultCatalog.
	
	expiredCreditCard := self createCreditCard.
	expiredCreditCard at: 'name' put: ''.
	
	self 
		should: [cashier checkout: cart withCreditCard: expiredCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !
!CartTest methodsFor: 'tests' stamp: 'MR 11/1/2021 20:25:19' prior: 50922590!
test12CannotCheckoutCartWithInvalidCreditCard

	| cart cashier invalidCreditCard |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cashier := Cashier with: self defaultCatalog.
	
	invalidCreditCard := self createCreditCard.
	invalidCreditCard at: 'name' put: ''.
	
	self 
		should: [cashier checkout: cart withCreditCard: invalidCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/1/2021 20:26:00' prior: 50922476!
checkout: aCart withCreditCard: aCreditCard 
	
	self assertCreditCardExpirationDate.
	self assertCreditCardName.

	^self checkout: aCart.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/1/2021 20:26:12' prior: 50922628!
checkout: aCart withCreditCard: aCreditCard 
	
	self assertCreditCardExpirationDate: aCreditCard.
	self assertCreditCardName: aCreditCard.

	^self checkout: aCart.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/1/2021 20:26:23'!
assertCreditCardExpirationDate: aCreditCard

	| creditCardExpirationDate currentDate creditCardExpirationMonth creditCardExpirationYear |
	
	currentDate := GregorianMonthOfYear current.
	creditCardExpirationYear := GregorianYear number: (aCreditCard at: 'expirationYear').
	creditCardExpirationMonth := GregorianMonth numbered: (aCreditCard at: 'expirationMonth').
	creditCardExpirationDate := GregorianMonthOfYear year: creditCardExpirationYear month: creditCardExpirationMonth.
	
	(currentDate > creditCardExpirationDate) ifTrue: [
		^self error: Cashier invalidCheckoutErrorMessage 
	].! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/1/2021 20:27:14'!
assertCreditCardName: aCreditCard
	
	| creditCardName |
	creditCardName _ aCreditCard at: 'name'.
	
	(creditCardName = '') ifTrue: [
		^self error: Cashier invalidCheckoutErrorMessage 
	].! !
!Cashier class methodsFor: 'instance creation' stamp: 'MR 11/1/2021 20:27:30' prior: 50921523!
with: aCatalog
	^self new initializeWith: aCatalog. ! !

!testRun: #CartTest #test12CannotCheckoutCartWithInvalidCreditCard stamp: 'MR 11/1/2021 20:27:35'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MR 11/1/2021 20:27:35'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MR 11/1/2021 20:27:35'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MR 11/1/2021 20:27:35'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MR 11/1/2021 20:27:35'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MR 11/1/2021 20:27:35'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MR 11/1/2021 20:27:35'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MR 11/1/2021 20:27:35'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MR 11/1/2021 20:27:35'!
PASSED!

!testRun: #CartTest #test09CannotCheckoutEmptyCart stamp: 'MR 11/1/2021 20:27:35'!
PASSED!

!testRun: #CartTest #test10CartCheckoutWithMultipleItemsHasCorrectPrice stamp: 'MR 11/1/2021 20:27:35'!
PASSED!

!testRun: #CartTest #test11CannotCheckoutCartWithExpiredCreditCard stamp: 'MR 11/1/2021 20:27:35'!
PASSED!

!testRun: #CartTest #test12CannotCheckoutCartWithInvalidCreditCard stamp: 'MR 11/1/2021 20:27:35'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'MR 11/1/2021 20:28:34'!
test13CannotCheckoutCartWithInvalidCreditCardNumber

	| cart cashier invalidCreditCard |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cashier := Cashier with: self defaultCatalog.
	
	invalidCreditCard := self createCreditCard.
	invalidCreditCard at: 'name' put: ''.
	
	self 
		should: [cashier checkout: cart withCreditCard: invalidCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !
!CartTest methodsFor: 'tests' stamp: 'MR 11/1/2021 20:28:38'!
test12CannotCheckoutCartWithInvalidCreditCardName

	| cart cashier invalidCreditCard |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cashier := Cashier with: self defaultCatalog.
	
	invalidCreditCard := self createCreditCard.
	invalidCreditCard at: 'name' put: ''.
	
	self 
		should: [cashier checkout: cart withCreditCard: invalidCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !

!methodRemoval: CartTest #test12CannotCheckoutCartWithInvalidCreditCard stamp: 'MR 11/1/2021 20:28:38'!
test12CannotCheckoutCartWithInvalidCreditCard

	| cart cashier invalidCreditCard |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cashier := Cashier with: self defaultCatalog.
	
	invalidCreditCard := self createCreditCard.
	invalidCreditCard at: 'name' put: ''.
	
	self 
		should: [cashier checkout: cart withCreditCard: invalidCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]!
!CartTest methodsFor: 'tests' stamp: 'MR 11/1/2021 20:29:02' prior: 50922720!
test13CannotCheckoutCartWithInvalidCreditCardNumber

	| cart cashier invalidCreditCard |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cashier := Cashier with: self defaultCatalog.
	
	invalidCreditCard := self createCreditCard.
	invalidCreditCard at: 'number' put: ''.
	
	self 
		should: [cashier checkout: cart withCreditCard: invalidCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !
!CartTest methodsFor: 'tests' stamp: 'MR 11/1/2021 20:29:18' prior: 50922777!
test13CannotCheckoutCartWithInvalidCreditCardNumber

	| cart cashier invalidCreditCard |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cashier := Cashier with: self defaultCatalog.
	
	invalidCreditCard := self createCreditCard.
	invalidCreditCard at: 'number' put: 'noSoyUnNumeroooo'.
	
	self 
		should: [cashier checkout: cart withCreditCard: invalidCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !

!testRun: #CartTest #test13CannotCheckoutCartWithInvalidCreditCardNumber stamp: 'MR 11/1/2021 20:29:26'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/1/2021 20:29:54' prior: 50922636!
checkout: aCart withCreditCard: aCreditCard 
	
	self assertCreditCardExpirationDate: aCreditCard.
	self assertCreditCardName: aCreditCard.
	self assertCreditCardNumber: aCreditCard.

	^self checkout: aCart.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/1/2021 20:30:30'!
assertCreditCardNumber: aCreditCard

	(aCreditCard at: 'number') isNumber ifFalse: [
		
	]. ! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/1/2021 20:31:11' prior: 50922829!
assertCreditCardNumber: aCreditCard

	| creditCardNumber |
	creditCardNumber _ (aCreditCard at: 'number').
	creditCardNumber isNumber and ifFalse: [
		
	]. ! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/1/2021 20:31:28' prior: 50922835!
assertCreditCardNumber: aCreditCard

	| creditCardNumber |
	creditCardNumber _ (aCreditCard at: 'number').
	creditCardNumber isNumber and ifFalse: [
		^self error: Cashier invalidCheckoutErrorMessage.
	]. ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MR 11/1/2021 20:31:35'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MR 11/1/2021 20:31:35'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MR 11/1/2021 20:31:35'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MR 11/1/2021 20:31:35'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MR 11/1/2021 20:31:35'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MR 11/1/2021 20:31:35'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MR 11/1/2021 20:31:35'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MR 11/1/2021 20:31:35'!
PASSED!

!testRun: #CartTest #test09CannotCheckoutEmptyCart stamp: 'MR 11/1/2021 20:31:35'!
ERROR!

!testRun: #CartTest #test10CartCheckoutWithMultipleItemsHasCorrectPrice stamp: 'MR 11/1/2021 20:31:35'!
ERROR!

!testRun: #CartTest #test11CannotCheckoutCartWithExpiredCreditCard stamp: 'MR 11/1/2021 20:31:35'!
PASSED!

!testRun: #CartTest #test12CannotCheckoutCartWithInvalidCreditCardName stamp: 'MR 11/1/2021 20:31:35'!
PASSED!

!testRun: #CartTest #test13CannotCheckoutCartWithInvalidCreditCardNumber stamp: 'MR 11/1/2021 20:31:35'!
ERROR!
!CartTest methodsFor: 'support' stamp: 'MR 11/1/2021 20:31:49' prior: 50922135!
createCreditCard

	| creditCard |
	
	creditCard _ Dictionary new.
	
	creditCard 
		add: 'name' -> 'Mike Wazowsky';
		add: 'number' -> 4545565667677878;
		add: 'expirationMonth' -> 02;
		add: 'expirationYear' -> 2025.
		
	^creditCard.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MR 11/1/2021 20:31:55'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MR 11/1/2021 20:31:55'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MR 11/1/2021 20:31:55'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MR 11/1/2021 20:31:55'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MR 11/1/2021 20:31:55'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MR 11/1/2021 20:31:55'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MR 11/1/2021 20:31:55'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MR 11/1/2021 20:31:55'!
PASSED!

!testRun: #CartTest #test09CannotCheckoutEmptyCart stamp: 'MR 11/1/2021 20:31:55'!
ERROR!

!testRun: #CartTest #test10CartCheckoutWithMultipleItemsHasCorrectPrice stamp: 'MR 11/1/2021 20:31:55'!
ERROR!

!testRun: #CartTest #test11CannotCheckoutCartWithExpiredCreditCard stamp: 'MR 11/1/2021 20:31:55'!
PASSED!

!testRun: #CartTest #test12CannotCheckoutCartWithInvalidCreditCardName stamp: 'MR 11/1/2021 20:31:55'!
PASSED!

!testRun: #CartTest #test13CannotCheckoutCartWithInvalidCreditCardNumber stamp: 'MR 11/1/2021 20:31:55'!
ERROR!

!testRun: #CartTest #test09CannotCheckoutEmptyCart stamp: 'MR 11/1/2021 20:31:59'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/1/2021 20:32:12' prior: 50922843!
assertCreditCardNumber: aCreditCard

	| creditCardNumber |
	creditCardNumber _ (aCreditCard at: 'number').
	creditCardNumber isNumber ifFalse: [
		^self error: Cashier invalidCheckoutErrorMessage.
	]. ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MR 11/1/2021 20:32:15'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MR 11/1/2021 20:32:15'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MR 11/1/2021 20:32:15'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MR 11/1/2021 20:32:15'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MR 11/1/2021 20:32:15'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MR 11/1/2021 20:32:15'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MR 11/1/2021 20:32:15'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MR 11/1/2021 20:32:15'!
PASSED!

!testRun: #CartTest #test09CannotCheckoutEmptyCart stamp: 'MR 11/1/2021 20:32:15'!
PASSED!

!testRun: #CartTest #test10CartCheckoutWithMultipleItemsHasCorrectPrice stamp: 'MR 11/1/2021 20:32:15'!
PASSED!

!testRun: #CartTest #test11CannotCheckoutCartWithExpiredCreditCard stamp: 'MR 11/1/2021 20:32:15'!
PASSED!

!testRun: #CartTest #test12CannotCheckoutCartWithInvalidCreditCardName stamp: 'MR 11/1/2021 20:32:15'!
PASSED!

!testRun: #CartTest #test13CannotCheckoutCartWithInvalidCreditCardNumber stamp: 'MR 11/1/2021 20:32:15'!
PASSED!

TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'MR 11/1/2021 21:27:08'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosTest category: 'TusLibros' stamp: 'MR 11/1/2021 21:27:18'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #TusLibrosTest stamp: 'MR 11/1/2021 21:27:22'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosTest category: 'TusLibros' stamp: 'MR 11/1/2021 21:28:19'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TusLibrosTest subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'MR 11/1/2021 21:28:25'!
TusLibrosTest subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TusLibrosTest subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'MR 11/1/2021 21:28:30'!
TusLibrosTest subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MR 11/1/2021 21:28:43'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MR 11/1/2021 21:28:43'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MR 11/1/2021 21:28:43'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MR 11/1/2021 21:28:43'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MR 11/1/2021 21:28:43'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MR 11/1/2021 21:28:43'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MR 11/1/2021 21:28:43'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MR 11/1/2021 21:28:43'!
PASSED!

!testRun: #CartTest #test09CannotCheckoutEmptyCart stamp: 'MR 11/1/2021 21:28:43'!
PASSED!

!testRun: #CartTest #test10CartCheckoutWithMultipleItemsHasCorrectPrice stamp: 'MR 11/1/2021 21:28:43'!
PASSED!

!testRun: #CartTest #test11CannotCheckoutCartWithExpiredCreditCard stamp: 'MR 11/1/2021 21:28:43'!
PASSED!

!testRun: #CartTest #test12CannotCheckoutCartWithInvalidCreditCardName stamp: 'MR 11/1/2021 21:28:43'!
PASSED!

!testRun: #CartTest #test13CannotCheckoutCartWithInvalidCreditCardNumber stamp: 'MR 11/1/2021 21:28:43'!
PASSED!

Object subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'MR 11/1/2021 21:29:02'!
Object subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'MR 11/1/2021 21:29:04'!
Object subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #TusLibrosTest stamp: 'MR 11/1/2021 21:29:07'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'tests' stamp: 'MR 11/1/2021 21:29:31' prior: 50922112!
test09CannotCheckoutEmptyCart
	"PASAR A CLASE CashierTest"
	| cart cashier creditCard |
	
	cart := self createCart.
	cashier := Cashier with: self defaultCatalog.
	creditCard := self createCreditCard.
	
	self 
		should: [cashier checkout: cart withCreditCard: creditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !
!CartTest methodsFor: 'tests' stamp: 'MR 11/1/2021 21:29:34' prior: 50922201!
test10CartCheckoutWithMultipleItemsHasCorrectPrice
"PASAR A CLASE CashierTest"
	| cart cashier creditCard |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cart add: self itemSellByTheStore.
	cashier := Cashier with: self defaultCatalog.
	creditCard := self createCreditCard.
	
	self assert: 20 equals: (cashier checkout: cart withCreditCard: creditCard).! !
!CartTest methodsFor: 'tests' stamp: 'MR 11/1/2021 21:29:37' prior: 50922533!
test11CannotCheckoutCartWithExpiredCreditCard
"PASAR A CLASE CashierTest"
	| cart cashier expiredCreditCard |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cashier := Cashier with: self defaultCatalog.
	
	expiredCreditCard := self createCreditCard.
	expiredCreditCard at: 'expirationYear' put: 2020.
	
	self 
		should: [cashier checkout: cart withCreditCard: expiredCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !
!CartTest methodsFor: 'tests' stamp: 'MR 11/1/2021 21:29:40' prior: 50922739!
test12CannotCheckoutCartWithInvalidCreditCardName
"PASAR A CLASE CashierTest"
	| cart cashier invalidCreditCard |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cashier := Cashier with: self defaultCatalog.
	
	invalidCreditCard := self createCreditCard.
	invalidCreditCard at: 'name' put: ''.
	
	self 
		should: [cashier checkout: cart withCreditCard: invalidCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !
!CartTest methodsFor: 'tests' stamp: 'MR 11/1/2021 21:29:42' prior: 50922796!
test13CannotCheckoutCartWithInvalidCreditCardNumber
"PASAR A CLASE CashierTest"
	| cart cashier invalidCreditCard |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cashier := Cashier with: self defaultCatalog.
	
	invalidCreditCard := self createCreditCard.
	invalidCreditCard at: 'number' put: 'noSoyUnNumeroooo'.
	
	self 
		should: [cashier checkout: cart withCreditCard: invalidCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !
!CartTest methodsFor: 'tests' stamp: 'MR 11/1/2021 21:30:06' prior: 50923203!
test13CannotCheckoutCartWithInvalidCreditCardNumber
	"PASAR A CLASE CashierTest"
	| cart cashier invalidCreditCard |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cashier := Cashier with: self defaultCatalog.
	
	invalidCreditCard := self createCreditCard.
	invalidCreditCard at: 'number' put: 'noSoyUnNumeroooo'.
	
	self 
		should: [cashier checkout: cart withCreditCard: invalidCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !
!CartTest methodsFor: 'tests' stamp: 'MR 11/1/2021 21:30:24'!
test14

	! !

----SNAPSHOT----(1 November 2021 21:35:29) CuisUniversity-4913.image priorSource: 18661997!

----STARTUP---- (2 November 2021 15:04:11) as C:\Users\migue\Desktop\CuisUniversity\CuisUniversity-4913.image!


Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreTestObjectsFactory category: 'TusLibros' stamp: 'MR 11/2/2021 15:13:35'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!methodRemoval: CartTest #test09CannotCheckoutEmptyCart stamp: 'MR 11/2/2021 15:13:43'!
test09CannotCheckoutEmptyCart
	"PASAR A CLASE CashierTest"
	| cart cashier creditCard |
	
	cart := self createCart.
	cashier := Cashier with: self defaultCatalog.
	creditCard := self createCreditCard.
	
	self 
		should: [cashier checkout: cart withCreditCard: creditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]!
!CashierTest methodsFor: 'nil' stamp: 'MR 11/2/2021 15:14:29'!
test10CartCheckoutWithMultipleItemsHasCorrectPrice
"PASAR A CLASE CashierTest"
	| cart cashier creditCard |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cart add: self itemSellByTheStore.
	cashier := Cashier with: self defaultCatalog.
	creditCard := self createCreditCard.
	
	self assert: 20 equals: (cashier checkout: cart withCreditCard: creditCard).! !

!methodRemoval: CartTest #test10CartCheckoutWithMultipleItemsHasCorrectPrice stamp: 'MR 11/2/2021 15:14:34'!
test10CartCheckoutWithMultipleItemsHasCorrectPrice
"PASAR A CLASE CashierTest"
	| cart cashier creditCard |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cart add: self itemSellByTheStore.
	cashier := Cashier with: self defaultCatalog.
	creditCard := self createCreditCard.
	
	self assert: 20 equals: (cashier checkout: cart withCreditCard: creditCard).!
!CashierTest methodsFor: 'nil' stamp: 'MR 11/2/2021 15:14:40'!
test11CannotCheckoutCartWithExpiredCreditCard
"PASAR A CLASE CashierTest"
	| cart cashier expiredCreditCard |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cashier := Cashier with: self defaultCatalog.
	
	expiredCreditCard := self createCreditCard.
	expiredCreditCard at: 'expirationYear' put: 2020.
	
	self 
		should: [cashier checkout: cart withCreditCard: expiredCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !

!methodRemoval: CartTest #test11CannotCheckoutCartWithExpiredCreditCard stamp: 'MR 11/2/2021 15:14:45'!
test11CannotCheckoutCartWithExpiredCreditCard
"PASAR A CLASE CashierTest"
	| cart cashier expiredCreditCard |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cashier := Cashier with: self defaultCatalog.
	
	expiredCreditCard := self createCreditCard.
	expiredCreditCard at: 'expirationYear' put: 2020.
	
	self 
		should: [cashier checkout: cart withCreditCard: expiredCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]!
!CashierTest methodsFor: 'nil' stamp: 'MR 11/2/2021 15:14:50'!
test12CannotCheckoutCartWithInvalidCreditCardName
"PASAR A CLASE CashierTest"
	| cart cashier invalidCreditCard |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cashier := Cashier with: self defaultCatalog.
	
	invalidCreditCard := self createCreditCard.
	invalidCreditCard at: 'name' put: ''.
	
	self 
		should: [cashier checkout: cart withCreditCard: invalidCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !
!CashierTest methodsFor: 'nil' stamp: 'MR 11/2/2021 15:14:59'!
test13CannotCheckoutCartWithInvalidCreditCardNumber
	"PASAR A CLASE CashierTest"
	| cart cashier invalidCreditCard |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cashier := Cashier with: self defaultCatalog.
	
	invalidCreditCard := self createCreditCard.
	invalidCreditCard at: 'number' put: 'noSoyUnNumeroooo'.
	
	self 
		should: [cashier checkout: cart withCreditCard: invalidCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !

!methodRemoval: CartTest #test12CannotCheckoutCartWithInvalidCreditCardName stamp: 'MR 11/2/2021 15:15:03'!
test12CannotCheckoutCartWithInvalidCreditCardName
"PASAR A CLASE CashierTest"
	| cart cashier invalidCreditCard |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cashier := Cashier with: self defaultCatalog.
	
	invalidCreditCard := self createCreditCard.
	invalidCreditCard at: 'name' put: ''.
	
	self 
		should: [cashier checkout: cart withCreditCard: invalidCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]!

!methodRemoval: CartTest #test13CannotCheckoutCartWithInvalidCreditCardNumber stamp: 'MR 11/2/2021 15:15:04'!
test13CannotCheckoutCartWithInvalidCreditCardNumber
	"PASAR A CLASE CashierTest"
	| cart cashier invalidCreditCard |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cashier := Cashier with: self defaultCatalog.
	
	invalidCreditCard := self createCreditCard.
	invalidCreditCard at: 'number' put: 'noSoyUnNumeroooo'.
	
	self 
		should: [cashier checkout: cart withCreditCard: invalidCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]!

!methodRemoval: CartTest #test14 stamp: 'MR 11/2/2021 15:15:05'!
test14

	!
!CashierTest methodsFor: 'nil' stamp: 'MR 11/2/2021 15:15:14'!
test09CannotCheckoutEmptyCart
    "PASAR A CLASE CashierTest"
    | cart cashier creditCard |

    cart := self createCart.
    cashier := Cashier with: self defaultCatalog.
    creditCard := self createCreditCard.

    self 
        should: [cashier checkout: cart withCreditCard: creditCard]
        raise: Error - MessageNotUnderstood
        withExceptionDo: [ :anError |
            self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
        ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 15:15:17' prior: 50923432!
test09CannotCheckoutEmptyCart
    | cart cashier creditCard |

    cart := self createCart.
    cashier := Cashier with: self defaultCatalog.
    creditCard := self createCreditCard.

    self 
        should: [cashier checkout: cart withCreditCard: creditCard]
        raise: Error - MessageNotUnderstood
        withExceptionDo: [ :anError |
            self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
        ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 15:15:20' prior: 50923280!
test10CartCheckoutWithMultipleItemsHasCorrectPrice
	| cart cashier creditCard |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cart add: self itemSellByTheStore.
	cashier := Cashier with: self defaultCatalog.
	creditCard := self createCreditCard.
	
	self assert: 20 equals: (cashier checkout: cart withCreditCard: creditCard).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 15:15:24' prior: 50923309!
test11CannotCheckoutCartWithExpiredCreditCard

	| cart cashier expiredCreditCard |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cashier := Cashier with: self defaultCatalog.
	
	expiredCreditCard := self createCreditCard.
	expiredCreditCard at: 'expirationYear' put: 2020.
	
	self 
		should: [cashier checkout: cart withCreditCard: expiredCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 15:15:25' prior: 50923481!
test11CannotCheckoutCartWithExpiredCreditCard
	| cart cashier expiredCreditCard |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cashier := Cashier with: self defaultCatalog.
	
	expiredCreditCard := self createCreditCard.
	expiredCreditCard at: 'expirationYear' put: 2020.
	
	self 
		should: [cashier checkout: cart withCreditCard: expiredCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 15:15:28' prior: 50923349!
test12CannotCheckoutCartWithInvalidCreditCardName
	| cart cashier invalidCreditCard |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cashier := Cashier with: self defaultCatalog.
	
	invalidCreditCard := self createCreditCard.
	invalidCreditCard at: 'name' put: ''.
	
	self 
		should: [cashier checkout: cart withCreditCard: invalidCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 15:15:32' prior: 50923368!
test13CannotCheckoutCartWithInvalidCreditCardNumber
	| cart cashier invalidCreditCard |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cashier := Cashier with: self defaultCatalog.
	
	invalidCreditCard := self createCreditCard.
	invalidCreditCard at: 'number' put: 'noSoyUnNumeroooo'.
	
	self 
		should: [cashier checkout: cart withCreditCard: invalidCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !
!StoreTestObjectsFactory methodsFor: 'nil' stamp: 'MR 11/2/2021 15:15:59'!
itemSellByTheStore
	
	^ 'validBook'! !

Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreTestObjectsFactory category: 'TusLibros' stamp: 'MR 11/2/2021 15:16:12'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTestObjectsFactory methodsFor: 'nil' stamp: 'MR 11/2/2021 15:16:15'!
itemNotSellByTheStore
	
	^'invalidBook'! !
!CartTest methodsFor: 'support' stamp: 'MR 11/2/2021 15:16:22' prior: 50921349!
defaultCatalog
	
	| dict |
	dict _ Dictionary new.
	
	dict at: self itemSellByTheStore put: 10.
	
	^dict.! !
!StoreTestObjectsFactory methodsFor: 'nil' stamp: 'MR 11/2/2021 15:16:27'!
defaultCatalog
	
	| dict |
	dict _ Dictionary new.
	
	dict at: self itemSellByTheStore put: 10.
	
	^dict.! !
!StoreTestObjectsFactory methodsFor: 'nil' stamp: 'MR 11/2/2021 15:16:34'!
createCreditCard

	| creditCard |
	
	creditCard _ Dictionary new.
	
	creditCard 
		add: 'name' -> 'Mike Wazowsky';
		add: 'number' -> 4545565667677878;
		add: 'expirationMonth' -> 02;
		add: 'expirationYear' -> 2025.
		
	^creditCard.! !
!StoreTestObjectsFactory methodsFor: 'nil' stamp: 'MR 11/2/2021 15:16:42'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !

!methodRemoval: CartTest #createCart stamp: 'MR 11/2/2021 15:16:48'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog!

!methodRemoval: CartTest #createCreditCard stamp: 'MR 11/2/2021 15:16:48'!
createCreditCard

	| creditCard |
	
	creditCard _ Dictionary new.
	
	creditCard 
		add: 'name' -> 'Mike Wazowsky';
		add: 'number' -> 4545565667677878;
		add: 'expirationMonth' -> 02;
		add: 'expirationYear' -> 2025.
		
	^creditCard.!

!methodRemoval: CartTest #defaultCatalog stamp: 'MR 11/2/2021 15:16:48'!
defaultCatalog
	
	| dict |
	dict _ Dictionary new.
	
	dict at: self itemSellByTheStore put: 10.
	
	^dict.!

!methodRemoval: CartTest #itemNotSellByTheStore stamp: 'MR 11/2/2021 15:16:48'!
itemNotSellByTheStore
	
	^'invalidBook'!

!methodRemoval: CartTest #itemSellByTheStore stamp: 'MR 11/2/2021 15:16:48'!
itemSellByTheStore
	
	^ 'validBook'!

Object subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'MR 11/2/2021 15:17:18'!
Object subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'MR 11/2/2021 15:17:21'!
Object subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'nil' stamp: 'MR 11/2/2021 15:17:41'!
setUp

	! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 15:18:00' prior: 50923655!
setUp

	testObjectsFactory := StoreTestObjectsFactory new.! !
!CartTest methodsFor: 'tests' stamp: 'MR 11/2/2021 15:18:19' prior: 50918168!
test01NewCartsAreCreatedEmpty

	self assert: testObjectsFactory createCart isEmpty! !
!CartTest methodsFor: 'tests' stamp: 'MR 11/2/2021 15:18:23' prior: 50918146!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [ cart add: testObjectsFactory itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'MR 11/2/2021 15:18:27' prior: 50918173!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	cart add: testObjectsFactory itemSellByTheStore.
	self deny: cart isEmpty ! !

TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'MR 11/2/2021 15:18:41'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'MR 11/2/2021 15:18:45'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MR 11/2/2021 15:18:46'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MR 11/2/2021 15:18:46'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MR 11/2/2021 15:18:46'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MR 11/2/2021 15:18:46'!
ERROR!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MR 11/2/2021 15:18:46'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MR 11/2/2021 15:18:46'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MR 11/2/2021 15:18:46'!
ERROR!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MR 11/2/2021 15:18:46'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'MR 11/2/2021 15:18:53' prior: 50918133!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [cart add: 0 of: testObjectsFactory itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'MR 11/2/2021 15:18:58' prior: 50918188!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [cart add: 2 of: testObjectsFactory itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'MR 11/2/2021 15:19:02' prior: 50918201!
test06CartRemembersAddedItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	cart add: testObjectsFactory itemSellByTheStore.
	self assert: (cart includes: testObjectsFactory itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'MR 11/2/2021 15:19:05' prior: 50918181!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self deny: (cart includes: testObjectsFactory itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'MR 11/2/2021 15:19:10' prior: 50918159!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	self assert: (cart occurrencesOf: testObjectsFactory itemSellByTheStore) = 2! !

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MR 11/2/2021 15:19:11'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MR 11/2/2021 15:19:11'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MR 11/2/2021 15:19:11'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MR 11/2/2021 15:19:11'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MR 11/2/2021 15:19:11'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MR 11/2/2021 15:19:11'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MR 11/2/2021 15:19:11'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MR 11/2/2021 15:19:11'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MR 11/2/2021 15:19:11'!
PASSED!
!CashierTest methodsFor: 'nil' stamp: 'MR 11/2/2021 15:19:22' overrides: 16927572!
setUp

	testObjectsFactory := StoreTestObjectsFactory new.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 15:19:37' prior: 50923450!
test09CannotCheckoutEmptyCart
    | cart cashier creditCard |

    cart := testObjectsFactory createCart.
    cashier := Cashier with: testObjectsFactory defaultCatalog.
    creditCard := testObjectsFactory createCreditCard.

    self 
        should: [cashier checkout: cart withCreditCard: creditCard]
        raise: Error - MessageNotUnderstood
        withExceptionDo: [ :anError |
            self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
        ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 15:19:41' prior: 50923467!
test10CartCheckoutWithMultipleItemsHasCorrectPrice
	| cart cashier creditCard |
	
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	cart add: testObjectsFactory itemSellByTheStore.
	cashier := Cashier with: testObjectsFactory defaultCatalog.
	creditCard := testObjectsFactory createCreditCard.
	
	self assert: 20 equals: (cashier checkout: cart withCreditCard: creditCard).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 15:19:46' prior: 50923501!
test11CannotCheckoutCartWithExpiredCreditCard
	| cart cashier expiredCreditCard |
	
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	cashier := Cashier with: testObjectsFactory defaultCatalog.
	
	expiredCreditCard := testObjectsFactory createCreditCard.
	expiredCreditCard at: 'expirationYear' put: 2020.
	
	self 
		should: [cashier checkout: cart withCreditCard: expiredCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 15:19:53' prior: 50923521!
test12CannotCheckoutCartWithInvalidCreditCardName
	| cart cashier invalidCreditCard |
	
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	cashier := Cashier with: testObjectsFactory defaultCatalog.
	
	invalidCreditCard := testObjectsFactory createCreditCard.
	invalidCreditCard at: 'name' put: ''.
	
	self 
		should: [cashier checkout: cart withCreditCard: invalidCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 15:19:57' prior: 50923540!
test13CannotCheckoutCartWithInvalidCreditCardNumber
	| cart cashier invalidCreditCard |
	
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	cashier := Cashier with: testObjectsFactory defaultCatalog.
	
	invalidCreditCard := testObjectsFactory createCreditCard.
	invalidCreditCard at: 'number' put: 'noSoyUnNumeroooo'.
	
	self 
		should: [cashier checkout: cart withCreditCard: invalidCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !

!testRun: #CashierTest #test13CannotCheckoutCartWithInvalidCreditCardNumber stamp: 'MR 11/2/2021 15:19:59'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MR 11/2/2021 15:19:59'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MR 11/2/2021 15:19:59'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MR 11/2/2021 15:19:59'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MR 11/2/2021 15:19:59'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MR 11/2/2021 15:20:00'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MR 11/2/2021 15:20:00'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MR 11/2/2021 15:20:00'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MR 11/2/2021 15:20:00'!
PASSED!

!testRun: #CashierTest #test09CannotCheckoutEmptyCart stamp: 'MR 11/2/2021 15:20:00'!
PASSED!

!testRun: #CashierTest #test10CartCheckoutWithMultipleItemsHasCorrectPrice stamp: 'MR 11/2/2021 15:20:00'!
PASSED!

!testRun: #CashierTest #test11CannotCheckoutCartWithExpiredCreditCard stamp: 'MR 11/2/2021 15:20:00'!
PASSED!

!testRun: #CashierTest #test12CannotCheckoutCartWithInvalidCreditCardName stamp: 'MR 11/2/2021 15:20:00'!
PASSED!

!testRun: #CashierTest #test13CannotCheckoutCartWithInvalidCreditCardNumber stamp: 'MR 11/2/2021 15:20:00'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'MR 11/2/2021 15:22:38' prior: 50923830!
test09CannotCheckoutEmptyCart
	| cart cashier creditCard salesBook |

	salesBook := OrderedCollection new.
	cart := testObjectsFactory createCart.
	creditCard := testObjectsFactory createCreditCard.

	cashier := Cashier 
		toCheckout: cart 
		withCreditCard: creditCard
		onDate: testObjectsFactory today
		registerAt: salesBook.

	self 
		should: [cashier checkout: cart withCreditCard: creditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !
!CashierTest methodsFor: 'tests' stamp: 'MR 11/2/2021 15:24:02' prior: 50923976!
test09CannotCheckoutEmptyCart
	| cart cashier creditCard salesBook |

	salesBook := OrderedCollection new.
	cart := testObjectsFactory createCart.
	creditCard := testObjectsFactory createCreditCard.

	self 
		should: [Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !

!testRun: #CashierTest #test09CannotCheckoutEmptyCart stamp: 'MR 11/2/2021 15:24:08'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 15:24:13'!
today
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 15:24:35' prior: 50924017!
today
	GregorianMonthOfYear current.! !

!testRun: #CashierTest #test09CannotCheckoutEmptyCart stamp: 'MR 11/2/2021 15:24:36'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'MR 11/2/2021 15:24:43'!
toCheckout: aCart withCreditCard: aDictionary onDate: aStoreTestObjectsFactory registerAt: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeToCheckout: aCart withCreditCard: aDictionary onDate: aStoreTestObjectsFactory registerAt: anOrderedCollection ! !
!Cashier class methodsFor: 'instance creation' stamp: 'MR 11/2/2021 15:25:17' prior: 50924029!
toCheckout: aCart withCreditCard: aCreditCard onDate: aDate registerAt: aSalesBook 
	^self new initializeToCheckout: aCart withCreditCard: aCreditCard onDate: aDate registerAt: aSalesBook.! !

!testRun: #CashierTest #test09CannotCheckoutEmptyCart stamp: 'MR 11/2/2021 15:25:18'!
ERROR!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'MR 11/2/2021 15:25:22'!
Object subclass: #Cashier
	instanceVariableNames: 'catalog cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'MR 11/2/2021 15:25:22'!
Object subclass: #Cashier
	instanceVariableNames: 'catalog cart creditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'MR 11/2/2021 15:25:22'!
Object subclass: #Cashier
	instanceVariableNames: 'catalog cart creditCard date'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'MR 11/2/2021 15:25:22'!
Object subclass: #Cashier
	instanceVariableNames: 'catalog cart creditCard date salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'MR 11/2/2021 15:25:22'!
initializeToCheckout: aCart withCreditCard: aCreditCard onDate: aDate registerAt: aSalesBook 
	self shouldBeImplemented.
	cart := aCart.
	creditCard := aCreditCard.
	date := aDate.
	salesBook := aSalesBook.! !
!Cashier methodsFor: 'initialization' stamp: 'MR 11/2/2021 15:25:43' prior: 50924083!
initializeToCheckout: aCart withCreditCard: aCreditCard onDate: aDate registerAt: aSalesBook 
	cart := aCart.
	creditCard := aCreditCard.
	date := aDate.
	salesBook := aSalesBook.! !

!testRun: #CashierTest #test09CannotCheckoutEmptyCart stamp: 'MR 11/2/2021 15:25:43'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'MR 11/2/2021 15:25:55' prior: 50923996!
test09CannotCheckoutEmptyCart
	| cart creditCard salesBook |

	salesBook := OrderedCollection new.
	cart := testObjectsFactory createCart.
	creditCard := testObjectsFactory createCreditCard.

	self
		should: [Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !
!Cashier class methodsFor: 'instance creation' stamp: 'MR 11/2/2021 15:26:56' prior: 50924043!
toCheckout: aCart withCreditCard: aCreditCard onDate: aDate registerAt: aSalesBook 
	aCart isEmpty ifTrue: [
		^self error: Cashier invalidCheckoutErrorMessage.
	].

	^self new initializeToCheckout: aCart withCreditCard: aCreditCard onDate: aDate registerAt: aSalesBook.! !

!testRun: #CashierTest #test09CannotCheckoutEmptyCart stamp: 'MR 11/2/2021 15:27:05'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'MR 11/2/2021 15:28:29' prior: 50923849!
test10CartCheckoutWithMultipleItemsHasCorrectPrice
	| cart cashier creditCard salesBook |
	
	salesBook := OrderedCollection new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	cart add: testObjectsFactory itemSellByTheStore.
	
	creditCard := testObjectsFactory createCreditCard.
	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook.
	
	self assert: 20 equals: (cashier checkout).! !

!testRun: #CashierTest #test10CartCheckoutWithMultipleItemsHasCorrectPrice stamp: 'MR 11/2/2021 15:28:30'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 15:28:36'!
checkout
	self shouldBeImplemented.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 15:28:43' prior: 50924160!
checkout
	^20.! !

!testRun: #CashierTest #test10CartCheckoutWithMultipleItemsHasCorrectPrice stamp: 'MR 11/2/2021 15:28:44'!
PASSED!

!testRun: #CashierTest #test09CannotCheckoutEmptyCart stamp: 'MR 11/2/2021 15:28:44'!
PASSED!

!testRun: #CashierTest #test10CartCheckoutWithMultipleItemsHasCorrectPrice stamp: 'MR 11/2/2021 15:28:44'!
PASSED!

!testRun: #CashierTest #test11CannotCheckoutCartWithExpiredCreditCard stamp: 'MR 11/2/2021 15:28:44'!
PASSED!

!testRun: #CashierTest #test12CannotCheckoutCartWithInvalidCreditCardName stamp: 'MR 11/2/2021 15:28:44'!
PASSED!

!testRun: #CashierTest #test13CannotCheckoutCartWithInvalidCreditCardNumber stamp: 'MR 11/2/2021 15:28:44'!
PASSED!
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 15:29:19' prior: 50924165!
checkout
	|value|
	
	cart isEmpty ifTrue: [	^self error: Cashier invalidCheckoutErrorMessage].
	
	value _ 0.
	cart items do: [:anItem |
		value _ value + catalog at: anItem.
	].

	^value.! !

!methodRemoval: Cashier #checkout: stamp: 'MR 11/2/2021 15:29:25'!
checkout: aCart 
	|value|
	
	aCart isEmpty ifTrue: [	^self error: Cashier invalidCheckoutErrorMessage].
	
	value _ 0.
	aCart items do: [:anItem |
		value _ value + catalog at: anItem.
	].

	^value.!
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 15:29:42' prior: 50924190!
checkout
	^cart total.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 15:30:18'!
total
	|value|

	value _ 0.
	items do: [:anItem |
		value _ value + catalog at: anItem.
	].

	^value.
	! !

!testRun: #CashierTest #test10CartCheckoutWithMultipleItemsHasCorrectPrice stamp: 'MR 11/2/2021 15:30:26'!
PASSED!

!testRun: #CashierTest #test09CannotCheckoutEmptyCart stamp: 'MR 11/2/2021 15:30:26'!
PASSED!

!testRun: #CashierTest #test10CartCheckoutWithMultipleItemsHasCorrectPrice stamp: 'MR 11/2/2021 15:30:26'!
PASSED!

!testRun: #CashierTest #test11CannotCheckoutCartWithExpiredCreditCard stamp: 'MR 11/2/2021 15:30:26'!
PASSED!

!testRun: #CashierTest #test12CannotCheckoutCartWithInvalidCreditCardName stamp: 'MR 11/2/2021 15:30:26'!
PASSED!

!testRun: #CashierTest #test13CannotCheckoutCartWithInvalidCreditCardNumber stamp: 'MR 11/2/2021 15:30:26'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'MR 11/2/2021 15:31:09' prior: 50923866!
test11CannotCheckoutCartWithExpiredCreditCard
	| cart cashier expiredCreditCard salesBook |
	
	salesBook := OrderedCollection new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	
	expiredCreditCard := testObjectsFactory createCreditCard.
	expiredCreditCard at: 'expirationYear' put: 2020.
	
	cashier := Cashier toCheckout: cart withCreditCard: expiredCreditCard onDate: testObjectsFactory today registerAt: salesBook.
	
	self 
		should: [cashier checkout: cart withCreditCard: expiredCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !
!CashierTest methodsFor: 'tests' stamp: 'MR 11/2/2021 15:31:19' prior: 50924239!
test11CannotCheckoutCartWithExpiredCreditCard
	| cart cashier expiredCreditCard salesBook |
	
	salesBook := OrderedCollection new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	
	expiredCreditCard := testObjectsFactory createCreditCard.
	expiredCreditCard at: 'expirationYear' put: 2020.
	
	cashier := Cashier toCheckout: cart withCreditCard: expiredCreditCard onDate: testObjectsFactory today registerAt: salesBook.
	
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !

!testRun: #CashierTest #test11CannotCheckoutCartWithExpiredCreditCard stamp: 'MR 11/2/2021 15:31:20'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 15:31:46' prior: 50922820!
checkout: aCart withCreditCard: aCreditCard 
	
	self assertCreditCardExpirationDate: aCreditCard.
	self assertCreditCardName: aCreditCard.
	self assertCreditCardNumber: aCreditCard.

	^self checkout: aCart.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 15:31:58' prior: 50924208!
checkout
	self assertCreditCardExpirationDate.

	^cart total.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 15:33:11' prior: 50922644!
assertCreditCardExpirationDate: aDate

	| creditCardExpirationDate creditCardExpirationMonth creditCardExpirationYear |
	
	creditCardExpirationYear := GregorianYear number: (creditCard at: 'expirationYear').
	creditCardExpirationMonth := GregorianMonth numbered: (creditCard at: 'expirationMonth').
	creditCardExpirationDate := GregorianMonthOfYear year: creditCardExpirationYear month: creditCardExpirationMonth.
	
	(aDate > creditCardExpirationDate) ifTrue: [
		^self error: Cashier invalidCheckoutErrorMessage 
	].! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 15:33:23'!
assertCreditCardName
	
	| creditCardName |
	creditCardName _ creditCard at: 'name'.
	
	(creditCardName = '') ifTrue: [
		^self error: Cashier invalidCheckoutErrorMessage 
	].! !

!methodRemoval: Cashier #assertCreditCardName: stamp: 'MR 11/2/2021 15:33:26'!
assertCreditCardName: aCreditCard
	
	| creditCardName |
	creditCardName _ aCreditCard at: 'name'.
	
	(creditCardName = '') ifTrue: [
		^self error: Cashier invalidCheckoutErrorMessage 
	].!
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 15:33:31'!
assertCreditCardNumber

	| creditCardNumber |
	creditCardNumber _ (creditCard at: 'number').
	creditCardNumber isNumber ifFalse: [
		^self error: Cashier invalidCheckoutErrorMessage.
	]. ! !

!methodRemoval: Cashier #assertCreditCardNumber: stamp: 'MR 11/2/2021 15:33:33'!
assertCreditCardNumber: aCreditCard

	| creditCardNumber |
	creditCardNumber _ (aCreditCard at: 'number').
	creditCardNumber isNumber ifFalse: [
		^self error: Cashier invalidCheckoutErrorMessage.
	]. !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 15:33:46' prior: 50924301!
checkout
	self assertCreditCardExpirationDate.

	^cart total.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 15:33:54'!
assertCreditCardExpirationDate

	| creditCardExpirationDate creditCardExpirationMonth creditCardExpirationYear |
	
	creditCardExpirationYear := GregorianYear number: (creditCard at: 'expirationYear').
	creditCardExpirationMonth := GregorianMonth numbered: (creditCard at: 'expirationMonth').
	creditCardExpirationDate := GregorianMonthOfYear year: creditCardExpirationYear month: creditCardExpirationMonth.
	
	(date > creditCardExpirationDate) ifTrue: [
		^self error: Cashier invalidCheckoutErrorMessage 
	].! !

!methodRemoval: Cashier #assertCreditCardExpirationDate: stamp: 'MR 11/2/2021 15:34:16'!
assertCreditCardExpirationDate: aDate

	| creditCardExpirationDate creditCardExpirationMonth creditCardExpirationYear |
	
	creditCardExpirationYear := GregorianYear number: (creditCard at: 'expirationYear').
	creditCardExpirationMonth := GregorianMonth numbered: (creditCard at: 'expirationMonth').
	creditCardExpirationDate := GregorianMonthOfYear year: creditCardExpirationYear month: creditCardExpirationMonth.
	
	(aDate > creditCardExpirationDate) ifTrue: [
		^self error: Cashier invalidCheckoutErrorMessage 
	].!

!testRun: #CashierTest #test10CartCheckoutWithMultipleItemsHasCorrectPrice stamp: 'MR 11/2/2021 15:34:45'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 15:35:03' prior: 50924022!
today
	^GregorianMonthOfYear current.! !

!testRun: #CashierTest #test13CannotCheckoutCartWithInvalidCreditCardNumber stamp: 'MR 11/2/2021 15:35:07'!
ERROR!

!testRun: #CashierTest #test11CannotCheckoutCartWithExpiredCreditCard stamp: 'MR 11/2/2021 15:35:22'!
PASSED!
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 15:36:11' prior: 50924360!
checkout
	^cart total.! !
!Cashier class methodsFor: 'instance creation' stamp: 'MR 11/2/2021 15:36:50' prior: 50924123!
toCheckout: aCart withCreditCard: aCreditCard onDate: aDate registerAt: aSalesBook 

	self assertIsNotExpired: aCreditCard on: aDate.

	aCart isEmpty ifTrue: [
		^self error: Cashier invalidCheckoutErrorMessage.
	].

	^self new initializeToCheckout: aCart withCreditCard: aCreditCard onDate: aDate registerAt: aSalesBook.! !
!Cashier class methodsFor: 'instance creation' stamp: 'MR 11/2/2021 15:37:01' prior: 50924423!
toCheckout: aCart withCreditCard: aCreditCard onDate: aDate registerAt: aSalesBook 

	self assertIsNotExpired: aCreditCard on: aDate.

	aCart isEmpty ifTrue: [
		self error: Cashier invalidCheckoutErrorMessage.
	].

	^self new initializeToCheckout: aCart withCreditCard: aCreditCard onDate: aDate registerAt: aSalesBook.! !
!Cashier class methodsFor: 'instance creation' stamp: 'MR 11/2/2021 15:37:12'!
assertIsNotEmpty: aCart

	^ aCart isEmpty ifTrue: [
		self error: Cashier invalidCheckoutErrorMessage.
	]! !
!Cashier class methodsFor: 'instance creation' stamp: 'MR 11/2/2021 15:37:12' prior: 50924437!
toCheckout: aCart withCreditCard: aCreditCard onDate: aDate registerAt: aSalesBook 

	self assertIsNotExpired: aCreditCard on: aDate.

	self assertIsNotEmpty: aCart.

	^self new initializeToCheckout: aCart withCreditCard: aCreditCard onDate: aDate registerAt: aSalesBook.! !
!Cashier class methodsFor: 'instance creation' stamp: 'MR 11/2/2021 15:37:17' prior: 50924457!
toCheckout: aCart withCreditCard: aCreditCard onDate: aDate registerAt: aSalesBook 

	self assertIsNotExpired: aCreditCard on: aDate.
	self assertIsNotEmpty: aCart.

	^self new initializeToCheckout: aCart withCreditCard: aCreditCard onDate: aDate registerAt: aSalesBook.! !
!Cashier class methodsFor: 'instance creation' stamp: 'MR 11/2/2021 15:37:21' prior: 50924450!
assertIsNotEmpty: aCart

	^ aCart isEmpty ifTrue: [
		self error: Cashier invalidCheckoutErrorMessage.
	].! !
!Cashier class methodsFor: 'instance creation' stamp: 'MR 11/2/2021 15:37:22' prior: 50924481!
assertIsNotEmpty: aCart

	^ aCart isEmpty ifTrue: [
		^self error: Cashier invalidCheckoutErrorMessage.
	].! !
!Cashier class methodsFor: 'instance creation' stamp: 'MR 11/2/2021 15:37:28' prior: 50924488!
assertIsNotEmpty: aCart

	aCart isEmpty ifTrue: [
		self error: Cashier invalidCheckoutErrorMessage.
	].! !
!Cashier class methodsFor: 'instance creation' stamp: 'MR 11/2/2021 15:37:29' prior: 50924495!
assertIsNotEmpty: aCart

	aCart isEmpty ifTrue: [
		^self error: Cashier invalidCheckoutErrorMessage.
	].! !
!Cashier class methodsFor: 'instance creation' stamp: 'MR 11/2/2021 15:37:38'!
assertIsNotExpired: aCreditCard on: aDate.
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 15:37:45' prior: 50924365!
assertCreditCardExpirationDate

	| creditCardExpirationDate creditCardExpirationMonth creditCardExpirationYear |
	
	creditCardExpirationYear := GregorianYear number: (creditCard at: 'expirationYear').
	creditCardExpirationMonth := GregorianMonth numbered: (creditCard at: 'expirationMonth').
	creditCardExpirationDate := GregorianMonthOfYear year: creditCardExpirationYear month: creditCardExpirationMonth.
	
	(date > creditCardExpirationDate) ifTrue: [
		^self error: Cashier invalidCheckoutErrorMessage 
	].! !
!Cashier class methodsFor: 'instance creation' stamp: 'MR 11/2/2021 15:38:04' prior: 50924508!
assertIsNotExpired: aCreditCard on: aDate

	| creditCardExpirationDate creditCardExpirationMonth creditCardExpirationYear |
	
	creditCardExpirationYear := GregorianYear number: (aCreditCard at: 'expirationYear').
	creditCardExpirationMonth := GregorianMonth numbered: (aCreditCard at: 'expirationMonth').
	creditCardExpirationDate := GregorianMonthOfYear year: creditCardExpirationYear month: creditCardExpirationMonth.
	
	(aDate > creditCardExpirationDate) ifTrue: [
		^self error: Cashier invalidCheckoutErrorMessage 
	].! !

!methodRemoval: Cashier class #with: stamp: 'MR 11/2/2021 15:38:20'!
with: aCatalog
	^self new initializeWith: aCatalog. !

!testRun: #CashierTest #test09CannotCheckoutEmptyCart stamp: 'MR 11/2/2021 15:38:26'!
PASSED!

!testRun: #CashierTest #test10CartCheckoutWithMultipleItemsHasCorrectPrice stamp: 'MR 11/2/2021 15:38:26'!
PASSED!

!testRun: #CashierTest #test11CannotCheckoutCartWithExpiredCreditCard stamp: 'MR 11/2/2021 15:38:26'!
ERROR!

!testRun: #CashierTest #test12CannotCheckoutCartWithInvalidCreditCardName stamp: 'MR 11/2/2021 15:38:26'!
ERROR!

!testRun: #CashierTest #test13CannotCheckoutCartWithInvalidCreditCardNumber stamp: 'MR 11/2/2021 15:38:26'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'MR 11/2/2021 15:38:39' prior: 50924264!
test11CannotCheckoutCartWithExpiredCreditCard
	| cart expiredCreditCard salesBook |
	
	salesBook := OrderedCollection new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	
	expiredCreditCard := testObjectsFactory createCreditCard.
	expiredCreditCard at: 'expirationYear' put: 2020.
	
	self 
		should: [Cashier toCheckout: cart withCreditCard: expiredCreditCard onDate: testObjectsFactory today registerAt: salesBook]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !

!testRun: #CashierTest #test11CannotCheckoutCartWithExpiredCreditCard stamp: 'MR 11/2/2021 15:38:41'!
PASSED!

!testRun: #CashierTest #test09CannotCheckoutEmptyCart stamp: 'MR 11/2/2021 15:38:41'!
PASSED!

!testRun: #CashierTest #test10CartCheckoutWithMultipleItemsHasCorrectPrice stamp: 'MR 11/2/2021 15:38:41'!
PASSED!

!testRun: #CashierTest #test11CannotCheckoutCartWithExpiredCreditCard stamp: 'MR 11/2/2021 15:38:41'!
PASSED!

!testRun: #CashierTest #test12CannotCheckoutCartWithInvalidCreditCardName stamp: 'MR 11/2/2021 15:38:41'!
ERROR!

!testRun: #CashierTest #test13CannotCheckoutCartWithInvalidCreditCardNumber stamp: 'MR 11/2/2021 15:38:41'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'MR 11/2/2021 15:38:56' prior: 50923887!
test12CannotCheckoutCartWithInvalidCreditCardName
	| cart cashier invalidCreditCard |
	
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	
	invalidCreditCard := testObjectsFactory createCreditCard.
	invalidCreditCard at: 'name' put: ''.
	
	cashier := Cashier with: testObjectsFactory defaultCatalog.
	
	self 
		should: [cashier checkout: cart withCreditCard: invalidCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !
!CashierTest methodsFor: 'tests' stamp: 'MR 11/2/2021 15:39:30' prior: 50924616!
test12CannotCheckoutCartWithInvalidCreditCardName
	| cart cashier invalidCreditCard salesBook |
	
	salesBook := OrderedCollection new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	
	invalidCreditCard := testObjectsFactory createCreditCard.
	invalidCreditCard at: 'name' put: ''.
	
	cashier := Cashier toCheckout: cart withCreditCard: invalidCreditCard onDate: testObjectsFactory today registerAt: salesBook.
	
	self 
		should: [cashier checkout: cart withCreditCard: invalidCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !
!CashierTest methodsFor: 'tests' stamp: 'MR 11/2/2021 15:39:44' prior: 50924637!
test12CannotCheckoutCartWithInvalidCreditCardName
	| cart invalidCreditCard salesBook |
	
	salesBook := OrderedCollection new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	
	invalidCreditCard := testObjectsFactory createCreditCard.
	invalidCreditCard at: 'name' put: ''.
	
	self 
		should: [Cashier toCheckout: cart withCreditCard: invalidCreditCard onDate: testObjectsFactory today registerAt: salesBook]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !

!methodRemoval: CashierTest #test12CannotCheckoutCartWithInvalidCreditCardName stamp: 'MR 11/2/2021 15:41:24'!
test12CannotCheckoutCartWithInvalidCreditCardName
	| cart invalidCreditCard salesBook |
	
	salesBook := OrderedCollection new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	
	invalidCreditCard := testObjectsFactory createCreditCard.
	invalidCreditCard at: 'name' put: ''.
	
	self 
		should: [Cashier toCheckout: cart withCreditCard: invalidCreditCard onDate: testObjectsFactory today registerAt: salesBook]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]!

!methodRemoval: CashierTest #test13CannotCheckoutCartWithInvalidCreditCardNumber stamp: 'MR 11/2/2021 15:41:31'!
test13CannotCheckoutCartWithInvalidCreditCardNumber
	| cart cashier invalidCreditCard |
	
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	cashier := Cashier with: testObjectsFactory defaultCatalog.
	
	invalidCreditCard := testObjectsFactory createCreditCard.
	invalidCreditCard at: 'number' put: 'noSoyUnNumeroooo'.
	
	self 
		should: [cashier checkout: cart withCreditCard: invalidCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]!
!CashierTest methodsFor: 'tests' stamp: 'MR 11/2/2021 15:41:54'!
test12
	| cart expiredCreditCard salesBook |
	
	salesBook := OrderedCollection new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	
	expiredCreditCard := testObjectsFactory createCreditCard.
	expiredCreditCard at: 'expirationYear' put: 2020.
	
! !
!CashierTest methodsFor: 'tests' stamp: 'MR 11/2/2021 15:42:45' prior: 50924727!
test12
	| cart cashier creditCard salesBook |
	
	salesBook := OrderedCollection new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	cart add: testObjectsFactory itemSellByTheStore.
	
	creditCard := testObjectsFactory createCreditCard.
	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook.
	
	self assert: {} equals: salesBook.
	
! !
!CashierTest methodsFor: 'tests' stamp: 'MR 11/2/2021 15:42:54' prior: 50924739!
test12
	| cart cashier creditCard salesBook |
	
	salesBook := OrderedCollection new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	cart add: testObjectsFactory itemSellByTheStore.
	
	creditCard := testObjectsFactory createCreditCard.
	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook.
	cashier checkout.
	
	self assert: {} equals: salesBook.
	
! !
!CashierTest methodsFor: 'tests' stamp: 'MR 11/2/2021 15:50:12' prior: 50924756!
test12
	| cart cashier creditCard salesBook |
	
	salesBook := OrderedCollection new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	cart add: testObjectsFactory itemSellByTheStore.
	
	creditCard := testObjectsFactory createCreditCard.
	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook.
	cashier checkout.
	
	self assert: 2 equals: (salesBook at: testObjectsFactory itemSellByTheStore).
	
! !

!testRun: #CashierTest #test12 stamp: 'MR 11/2/2021 15:50:15'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'MR 11/2/2021 15:50:27' prior: 50924773!
test12
	| cart cashier creditCard salesBook |
	
	salesBook := Dictionary new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	cart add: testObjectsFactory itemSellByTheStore.
	
	creditCard := testObjectsFactory createCreditCard.
	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook.
	cashier checkout.
	
	self assert: 2 equals: (salesBook at: testObjectsFactory itemSellByTheStore).
	
! !
!CashierTest methodsFor: 'tests' stamp: 'MR 11/2/2021 15:50:36' prior: 50924573!
test11CannotCheckoutCartWithExpiredCreditCard
	| cart expiredCreditCard salesBook |
	
	salesBook := Dictionary new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	
	expiredCreditCard := testObjectsFactory createCreditCard.
	expiredCreditCard at: 'expirationYear' put: 2020.
	
	self 
		should: [Cashier toCheckout: cart withCreditCard: expiredCreditCard onDate: testObjectsFactory today registerAt: salesBook]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !
!CashierTest methodsFor: 'tests' stamp: 'MR 11/2/2021 15:50:38' prior: 50924138!
test10CartCheckoutWithMultipleItemsHasCorrectPrice
	| cart cashier creditCard salesBook |
	
	salesBook := Dictionary new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	cart add: testObjectsFactory itemSellByTheStore.
	
	creditCard := testObjectsFactory createCreditCard.
	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook.
	
	self assert: 20 equals: (cashier checkout).! !
!CashierTest methodsFor: 'tests' stamp: 'MR 11/2/2021 15:50:40' prior: 50924105!
test09CannotCheckoutEmptyCart
	| cart creditCard salesBook |

	salesBook := Dictionary new.
	cart := testObjectsFactory createCart.
	creditCard := testObjectsFactory createCreditCard.

	self
		should: [Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !

!testRun: #CashierTest #test12 stamp: 'MR 11/2/2021 15:50:42'!
ERROR!

!testRun: #CashierTest #test12 stamp: 'MR 11/2/2021 15:50:56'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 15:51:40' prior: 50924419!
checkout
	^cart total.! !

!testRun: #CashierTest #test12 stamp: 'MR 11/2/2021 15:51:41'!
ERROR!

!methodRemoval: Cashier #checkout:withCreditCard: stamp: 'MR 11/2/2021 15:52:11'!
checkout: aCart withCreditCard: aCreditCard 
	
	self assertCreditCardExpirationDate: aCreditCard.
	self assertCreditCardName: aCreditCard.
	self assertCreditCardNumber: aCreditCard.

	^self checkout: aCart.!

!methodRemoval: Cashier #initializeWith: stamp: 'MR 11/2/2021 15:52:15'!
initializeWith: aCatalog

	catalog _ aCatalog.!

!methodRemoval: Cashier #assertCreditCardNumber stamp: 'MR 11/2/2021 15:52:17'!
assertCreditCardNumber

	| creditCardNumber |
	creditCardNumber _ (creditCard at: 'number').
	creditCardNumber isNumber ifFalse: [
		^self error: Cashier invalidCheckoutErrorMessage.
	]. !

!methodRemoval: Cashier #assertCreditCardName stamp: 'MR 11/2/2021 15:52:18'!
assertCreditCardName
	
	| creditCardName |
	creditCardName _ creditCard at: 'name'.
	
	(creditCardName = '') ifTrue: [
		^self error: Cashier invalidCheckoutErrorMessage 
	].!

!methodRemoval: Cashier #assertCreditCardExpirationDate stamp: 'MR 11/2/2021 15:52:18'!
assertCreditCardExpirationDate

	| creditCardExpirationDate creditCardExpirationMonth creditCardExpirationYear |
	
	creditCardExpirationYear := GregorianYear number: (creditCard at: 'expirationYear').
	creditCardExpirationMonth := GregorianMonth numbered: (creditCard at: 'expirationMonth').
	creditCardExpirationDate := GregorianMonthOfYear year: creditCardExpirationYear month: creditCardExpirationMonth.
	
	(date > creditCardExpirationDate) ifTrue: [
		^self error: Cashier invalidCheckoutErrorMessage 
	].!

!testRun: #CashierTest #test09CannotCheckoutEmptyCart stamp: 'MR 11/2/2021 15:52:23'!
PASSED!

!testRun: #CashierTest #test10CartCheckoutWithMultipleItemsHasCorrectPrice stamp: 'MR 11/2/2021 15:52:23'!
PASSED!

!testRun: #CashierTest #test11CannotCheckoutCartWithExpiredCreditCard stamp: 'MR 11/2/2021 15:52:23'!
PASSED!

!testRun: #CashierTest #test12 stamp: 'MR 11/2/2021 15:52:23'!
ERROR!

!testRun: #CashierTest #test12 stamp: 'MR 11/2/2021 15:52:23'!
ERROR!

!testRun: #CashierTest #test12 stamp: 'MR 11/2/2021 15:52:26'!
FAILURE!

!testRun: #CashierTest #test12 stamp: 'MR 11/2/2021 15:52:27'!
PASSED!
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 15:52:44' prior: 50924875!
checkout
	^cart registerTotal: salesBook.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 15:52:53'!
registerTotal
	|value|

	value _ 0.
	items do: [:anItem |
		value _ value + catalog at: anItem.
	].

	^value.
	! !

!methodRemoval: Cart #total stamp: 'MR 11/2/2021 15:52:53'!
total
	|value|

	value _ 0.
	items do: [:anItem |
		value _ value + catalog at: anItem.
	].

	^value.
	!
!Cart methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 15:53:05'!
registerTotal: aSalesBook
	|value|

	value _ 0.
	items do: [:anItem |
		value _ value + catalog at: anItem.
	].

	^value.
	! !
!CashierTest methodsFor: 'tests' stamp: 'MR 11/2/2021 15:53:37' prior: 50924794!
test12
	| cart cashier creditCard salesBook |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	cart add: testObjectsFactory itemSellByTheStore.
	
	creditCard := testObjectsFactory createCreditCard.
	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook.
	cashier checkout.
	
	self assert: 2 equals: (salesBook at: testObjectsFactory itemSellByTheStore).
	
! !
!CashierTest methodsFor: 'tests' stamp: 'MR 11/2/2021 15:53:41' prior: 50924813!
test11CannotCheckoutCartWithExpiredCreditCard
	| cart expiredCreditCard salesBook |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	
	expiredCreditCard := testObjectsFactory createCreditCard.
	expiredCreditCard at: 'expirationYear' put: 2020.
	
	self 
		should: [Cashier toCheckout: cart withCreditCard: expiredCreditCard onDate: testObjectsFactory today registerAt: salesBook]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !
!CashierTest methodsFor: 'tests' stamp: 'MR 11/2/2021 15:53:43' prior: 50924835!
test10CartCheckoutWithMultipleItemsHasCorrectPrice
	| cart cashier creditCard salesBook |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	cart add: testObjectsFactory itemSellByTheStore.
	
	creditCard := testObjectsFactory createCreditCard.
	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook.
	
	self assert: 20 equals: (cashier checkout).! !
!CashierTest methodsFor: 'tests' stamp: 'MR 11/2/2021 15:53:45' prior: 50924853!
test09CannotCheckoutEmptyCart
	| cart creditCard salesBook |

	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	creditCard := testObjectsFactory createCreditCard.

	self
		should: [Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !

!methodRemoval: Cart #registerTotal stamp: 'MR 11/2/2021 15:53:52'!
registerTotal
	|value|

	value _ 0.
	items do: [:anItem |
		value _ value + catalog at: anItem.
	].

	^value.
	!
!Cart methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 15:54:04' prior: 50924964!
registerTotal: aSalesBook
	|value|

	value _ 0.
	items do: [:anItem |
		value _ value + catalog at: anItem.
		aSalesBook add: anItem.
	].

	^value.
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MR 11/2/2021 15:54:07'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MR 11/2/2021 15:54:07'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MR 11/2/2021 15:54:07'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MR 11/2/2021 15:54:07'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MR 11/2/2021 15:54:07'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MR 11/2/2021 15:54:07'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MR 11/2/2021 15:54:07'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MR 11/2/2021 15:54:07'!
PASSED!

!testRun: #CashierTest #test09CannotCheckoutEmptyCart stamp: 'MR 11/2/2021 15:54:09'!
PASSED!

!testRun: #CashierTest #test10CartCheckoutWithMultipleItemsHasCorrectPrice stamp: 'MR 11/2/2021 15:54:09'!
PASSED!

!testRun: #CashierTest #test11CannotCheckoutCartWithExpiredCreditCard stamp: 'MR 11/2/2021 15:54:09'!
PASSED!

!testRun: #CashierTest #test12 stamp: 'MR 11/2/2021 15:54:09'!
ERROR!

!testRun: #CashierTest #test12 stamp: 'MR 11/2/2021 15:54:09'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'MR 11/2/2021 15:55:03' prior: 50924971!
test12
	| cart cashier creditCard salesBook |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	cart add: testObjectsFactory itemSellByTheStore.
	
	creditCard := testObjectsFactory createCreditCard.
	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook.
	cashier checkout.
	
	self assert: 2 equals: (salesBook occurrencesOf: testObjectsFactory itemSellByTheStore).
	
! !

!testRun: #CashierTest #test12 stamp: 'MR 11/2/2021 15:55:06'!
PASSED!

!testRun: #CashierTest #test09CannotCheckoutEmptyCart stamp: 'MR 11/2/2021 15:55:06'!
PASSED!

!testRun: #CashierTest #test10CartCheckoutWithMultipleItemsHasCorrectPrice stamp: 'MR 11/2/2021 15:55:06'!
PASSED!

!testRun: #CashierTest #test11CannotCheckoutCartWithExpiredCreditCard stamp: 'MR 11/2/2021 15:55:06'!
PASSED!

!testRun: #CashierTest #test12 stamp: 'MR 11/2/2021 15:55:06'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'MR 11/2/2021 15:55:27'!
test12CashierCheckoutAddsBooksToSalesBook
	| cart cashier creditCard salesBook |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	cart add: testObjectsFactory itemSellByTheStore.
	
	creditCard := testObjectsFactory createCreditCard.
	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook.
	cashier checkout.
	
	self assert: 2 equals: (salesBook occurrencesOf: testObjectsFactory itemSellByTheStore).
	
! !

!methodRemoval: CashierTest #test12 stamp: 'MR 11/2/2021 15:55:27'!
test12
	| cart cashier creditCard salesBook |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	cart add: testObjectsFactory itemSellByTheStore.
	
	creditCard := testObjectsFactory createCreditCard.
	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook.
	cashier checkout.
	
	self assert: 2 equals: (salesBook occurrencesOf: testObjectsFactory itemSellByTheStore).
	
!
!CartTest methodsFor: 'tests' stamp: 'MR 11/2/2021 15:57:09' prior: 50923670!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [ cart add: testObjectsFactory itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty 
		]! !

----SNAPSHOT----(2 November 2021 15:57:20) CuisUniversity-4913.image priorSource: 18931052!
!CashierTest methodsFor: 'tests' stamp: 'MR 11/2/2021 16:05:08'!
test13
	| cart cashier creditCard salesBook |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	
	creditCard := testObjectsFactory createCreditCard.
	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook.
	cashier checkout.
	
	self assert: 2 equals: (salesBook occurrencesOf: testObjectsFactory itemSellByTheStore).
	
! !
!CashierTest methodsFor: 'tests' stamp: 'MR 11/2/2021 16:05:39' prior: 50925186!
test13
	| cart cashier creditCard salesBook |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	
	creditCard := testObjectsFactory createCreditCard.
	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook.
	
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		].
	
! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 16:06:35' prior: 50923591!
createCreditCard

	| creditCard |
	
	creditCard _ Dictionary new.
	
	creditCard 
		add: 'name' -> 'Mike Wazowsky';
		add: 'number' -> 4545565667677878;
		add: 'expirationMonth' -> 02;
		add: 'expirationYear' -> 2025.
		
	^creditCard.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 16:08:40' prior: 50924948!
checkout
	| total |
	total _ cart registerTotal: salesBook.
	
	
	
	^total.! !

!testRun: #CashierTest #test13 stamp: 'MR 11/2/2021 16:08:55'!
FAILURE!

!testRun: #CashierTest #test13 stamp: 'MR 11/2/2021 16:08:55'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 16:10:27' prior: 50925234!
checkout
	| total |
	total _ cart registerTotal: salesBook.
	
	self hablarConMerchantProcessor: total.
	
	^total.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 16:11:28'!
hablarConMerchantProcessor: aTransactionAmount.
	
	
	
	"API call a merchant processor .. ... . ."
	
	
	
	
! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 16:11:44' prior: 50925250!
hablarConMerchantProcessor: aTransactionAmount.
	
	
	
	"API call a merchant processor .. ... . ."
	
	
	
	
! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 16:12:28' prior: 50925257!
hablarConMerchantProcessor: aTransactionAmount
	
	| creditCards |
	creditCards _ Dictionary new.
	
	creditCards add: 'name' -> 15.
	
		
	
	
	"API call a merchant processor .. ... . ."
	
	
	
	
! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 16:13:05' prior: 50925264!
hablarConMerchantProcessor: aTransactionAmount
	
	| creditCards |
	creditCards _ Dictionary new.
	
	creditCards add: 4545565667677878 -> 10.
	creditCards add: 4545565667677879 -> 30.
	creditCards add: 4545565667677877 -> 0.
	
		
	
	
	"API call a merchant processor .. ... . ."
	
	
	
	
! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 16:13:10' prior: 50925273!
hablarConMerchantProcessor: aTransactionAmount
	
	| creditCards |
	creditCards _ Dictionary new.
	creditCards add: 4545565667677878 -> 10.
	creditCards add: 4545565667677879 -> 30.
	creditCards add: 4545565667677877 -> 0.
	
	
		
	
	
	"API call a merchant processor .. ... . ."
	
	
	
	
! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 16:14:36' prior: 50925285!
hablarConMerchantProcessor: aTransactionAmount
	
	| creditCards |
	creditCards _ Dictionary new.
	creditCards add: 4545565667677878 -> 10.
	creditCards add: 4545565667677879 -> 30.
	creditCards add: 4545565667677877 -> 0.
	
	(creditCards at: (creditCard at: 'number') < aTransactionAmount ) ifTrue: [
		^'1|Credit card has no funds'.
	].		
	
	" todo ok "
	
	"API call a merchant processor .. ... . ."
	
	
	
	
! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 16:14:46' prior: 50925297!
hablarConMerchantProcessor: aTransactionAmount
	
	| creditCards |
	creditCards _ Dictionary new.
	creditCards add: 4545565667677878 -> 10.
	creditCards add: 4545565667677879 -> 30.
	creditCards add: 4545565667677877 -> 0.
	
	(creditCards at: (creditCard at: 'number') < aTransactionAmount ) ifTrue: [
		^'1|Credit card has no funds'.
	].		
	
	^'0|OK'.
	
	"API call a merchant processor .. ... . ."
	
	
	
	
! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 16:14:48' prior: 50925313!
hablarConMerchantProcessor: aTransactionAmount
	
	| creditCards |
	creditCards _ Dictionary new.
	creditCards add: 4545565667677878 -> 10.
	creditCards add: 4545565667677879 -> 30.
	creditCards add: 4545565667677877 -> 0.
	
	(creditCards at: (creditCard at: 'number') < aTransactionAmount ) ifTrue: [
		^'1|Credit card has no funds'.
	].		
	
	^'0|OK'.
	
	"API call a merchant processor .. ... . ."
	
	
	
	
! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 16:16:06' prior: 50925244!
checkout
	| total result |
	
	result = ''.
	total _ cart registerTotal: salesBook.

	result = self hablarConMerchantProcessor: total.
	
	(result = '0|OK') ifTrue: [^total].
	
	^self error: Cashier invalidCheckoutErrorMessage.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 16:16:16' prior: 50925345!
checkout
	| total result |
	
	result _ ''.
	total _ cart registerTotal: salesBook.

	result = self hablarConMerchantProcessor: total.
	
	(result = '0|OK') ifTrue: [^total].
	
	^self error: Cashier invalidCheckoutErrorMessage.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 16:16:23' prior: 50925355!
checkout
	| total result |
	
	result _ ''.
	total _ cart registerTotal: salesBook.

	result _ self hablarConMerchantProcessor: total.
	
	(result = '0|OK') ifTrue: [^total].
	
	^self error: Cashier invalidCheckoutErrorMessage.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 16:16:34' prior: 50925329!
hablarConMerchantProcessor: aTransactionAmount
	
	| creditCards |
	creditCards _ Dictionary new.
	creditCards add: 4545565667677878 -> 10.
	creditCards add: 4545565667677879 -> 30.
	creditCards add: 4545565667677877 -> 0.
	
	(creditCards at: (creditCard at: 'number') < aTransactionAmount ) ifTrue: [
		^'1|Credit card has no funds'.
	].		
	
	^'0|OK'.
	
	
	
	
! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 16:16:54' prior: 50925223!
createCreditCard

	| creditCard |
	
	creditCard _ Dictionary new.
	
	creditCard 
		add: 'name' -> 'Mike Wazowsky';
		add: 'number' -> 4545565667677877;
		add: 'expirationMonth' -> 02;
		add: 'expirationYear' -> 2025.
		
	^creditCard.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 16:17:11' prior: 50925375!
hablarConMerchantProcessor: aTransactionAmount
	
	| creditCards |
	creditCards _ Dictionary new.
	creditCards add: 4545565667677878 -> 5.
	creditCards add: 4545565667677879 -> 30.
	creditCards add: 4545565667677877 -> 0.
	
	(creditCards at: (creditCard at: 'number') < aTransactionAmount ) ifTrue: [
		^'1|Credit card has no funds'.
	].		
	
	^'0|OK'.
	
	
	
	
! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 16:17:19' prior: 50925401!
hablarConMerchantProcessor: aTransactionAmount
	
	| creditCards |
	creditCards _ Dictionary new.
	creditCards add: 4545565667677878 -> 10.
	creditCards add: 4545565667677879 -> 30.
	creditCards add: 4545565667677877 -> 0.
	
	(creditCards at: (creditCard at: 'number') < aTransactionAmount ) ifTrue: [
		^'1|Credit card has no funds'.
	].		
	
	^'0|OK'.
	
	
	
	
! !

!testRun: #CashierTest #test13 stamp: 'MR 11/2/2021 16:17:32'!
FAILURE!

!testRun: #CashierTest #test13 stamp: 'MR 11/2/2021 16:17:32'!
FAILURE!

!testRun: #CashierTest #test13 stamp: 'MR 11/2/2021 16:17:48'!
FAILURE!

!testRun: #CashierTest #test13 stamp: 'MR 11/2/2021 16:18:17'!
FAILURE!

!testRun: #CashierTest #test13 stamp: 'MR 11/2/2021 16:19:07'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 16:20:07' prior: 50925416!
hablarConMerchantProcessor: aTransactionAmount
	
	| creditCards |
	creditCards _ Dictionary new.
	creditCards add: 4545565667677878 -> 10.
	creditCards add: 4545565667677879 -> 30.
	creditCards add: 4545565667677877 -> 0.
	
	(creditCards at: (creditCard at: 'number') < aTransactionAmount ) ifTrue: [
		^'1|Credit card has no funds'.
	].		
	
	^'0|OK'.
	
	
	
	
! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 16:21:18' prior: 50925442!
hablarConMerchantProcessor: aTransactionAmount
	
	| creditCards |
	creditCards _ Dictionary new.
	creditCards add: 4545565667677878 -> 10.
	creditCards add: 4545565667677879 -> 30.
	creditCards add: 4545565667677877 -> 0.
	
	((creditCards at: (creditCard at: 'number')) < aTransactionAmount ) ifTrue: [
		^'1|Credit card has no funds'.
	].		
	
	^'0|OK'.
	
	
	
	
! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 16:21:36' prior: 50925457!
hablarConMerchantProcessor: aTransactionAmount
	
	| creditCards |
	creditCards _ Dictionary new.
	creditCards add: 4545565667677878 -> 10.
	creditCards add: 4545565667677879 -> 30.
	creditCards add: 4545565667677877 -> 0.
	
	((creditCards at: (creditCard at: 'number')) < aTransactionAmount) ifTrue: [
		^'1|Credit card has no funds'.
	].		
	
	^'0|OK'.
	
	
	
	
! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 16:22:08' prior: 50925472!
hablarConMerchantProcessor: aTransactionAmount
	
	| creditCards creditCardNumber |
	creditCards _ Dictionary new.
	creditCards add: 4545565667677878 -> 10.
	creditCards add: 4545565667677879 -> 30.
	creditCards add: 4545565667677877 -> 0.
	creditCardNumber _ creditCard at: 'number'.
	
	((creditCards at: creditCardNumber) < aTransactionAmount) ifTrue: [
		^'1|Credit card has no funds'.
	].		
	
	^'0|OK'.
	
	
	
	
! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 16:22:15' prior: 50925487!
hablarConMerchantProcessor: aTransactionAmount
	
	| creditCards creditCardNumber |
	creditCards _ Dictionary new.
	creditCards add: 4545565667677878 -> 10.
	creditCards add: 4545565667677879 -> 30.
	creditCards add: 4545565667677877 -> 0.
	creditCardNumber _ creditCard at: 'number'.
	
	((creditCards at: creditCardNumber) < aTransactionAmount) ifTrue: [
		^'1|Credit card has no funds'.
	].		
	
	^'0|OK'.
	
	
	
	
! !

!testRun: #CashierTest #test09CannotCheckoutEmptyCart stamp: 'MR 11/2/2021 16:22:19'!
PASSED!

!testRun: #CashierTest #test10CartCheckoutWithMultipleItemsHasCorrectPrice stamp: 'MR 11/2/2021 16:22:19'!
ERROR!

!testRun: #CashierTest #test11CannotCheckoutCartWithExpiredCreditCard stamp: 'MR 11/2/2021 16:22:20'!
PASSED!

!testRun: #CashierTest #test12CashierCheckoutAddsBooksToSalesBook stamp: 'MR 11/2/2021 16:22:20'!
ERROR!

!testRun: #CashierTest #test13 stamp: 'MR 11/2/2021 16:22:20'!
PASSED!
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 16:22:41' prior: 50925390!
createCreditCard

	| creditCard |
	
	creditCard _ Dictionary new.
	
	creditCard 
		add: 'name' -> 'Mike Wazowsky';
		add: 'number' -> 4545565667677878;
		add: 'expirationMonth' -> 02;
		add: 'expirationYear' -> 2025.
		
	^creditCard.! !
!CashierTest methodsFor: 'tests' stamp: 'MR 11/2/2021 16:23:09' prior: 50925203!
test13
	| cart cashier creditCard salesBook |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	10 timesRepeat: [cart add: testObjectsFactory itemSellByTheStore.].
	
	creditCard := testObjectsFactory createCreditCard.
	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook.
	
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		].
	
! !

!testRun: #CashierTest #test13 stamp: 'MR 11/2/2021 16:23:12'!
PASSED!

!testRun: #CashierTest #test09CannotCheckoutEmptyCart stamp: 'MR 11/2/2021 16:23:12'!
PASSED!

!testRun: #CashierTest #test10CartCheckoutWithMultipleItemsHasCorrectPrice stamp: 'MR 11/2/2021 16:23:12'!
ERROR!

!testRun: #CashierTest #test11CannotCheckoutCartWithExpiredCreditCard stamp: 'MR 11/2/2021 16:23:12'!
PASSED!

!testRun: #CashierTest #test12CashierCheckoutAddsBooksToSalesBook stamp: 'MR 11/2/2021 16:23:12'!
ERROR!

!testRun: #CashierTest #test13 stamp: 'MR 11/2/2021 16:23:12'!
PASSED!
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 16:23:39' prior: 50925503!
hablarConMerchantProcessor: aTransactionAmount
	
	| creditCards creditCardNumber |
	creditCards _ Dictionary new.
	creditCards add: 4545565667677878 -> 50.
	creditCards add: 4545565667677879 -> 30.
	creditCards add: 4545565667677877 -> 0.
	creditCardNumber _ creditCard at: 'number'.
	
	((creditCards at: creditCardNumber) < aTransactionAmount) ifTrue: [
		^'1|Credit card has no funds'.
	].		
	
	^'0|OK'.
	
	
	
	
! !

!testRun: #CashierTest #test09CannotCheckoutEmptyCart stamp: 'MR 11/2/2021 16:23:41'!
PASSED!

!testRun: #CashierTest #test10CartCheckoutWithMultipleItemsHasCorrectPrice stamp: 'MR 11/2/2021 16:23:41'!
PASSED!

!testRun: #CashierTest #test11CannotCheckoutCartWithExpiredCreditCard stamp: 'MR 11/2/2021 16:23:41'!
PASSED!

!testRun: #CashierTest #test12CashierCheckoutAddsBooksToSalesBook stamp: 'MR 11/2/2021 16:23:41'!
PASSED!

!testRun: #CashierTest #test13 stamp: 'MR 11/2/2021 16:23:41'!
PASSED!
!Cashier class methodsFor: 'instance creation' stamp: 'MR 11/2/2021 16:29:05'!
toCheckout: aCart withCreditCard: aCreditCard onDate: aDate registerAt: aSalesBook aClientName: aClientName  

	self assertIsNotExpired: aCreditCard on: aDate.
	self assertIsNotEmpty: aCart.

	^self new initializeToCheckout: aCart withCreditCard: aCreditCard onDate: aDate registerAt: aSalesBook.! !

!methodRemoval: Cashier class #toCheckout:withCreditCard:onDate:registerAt: stamp: 'MR 11/2/2021 16:29:05'!
toCheckout: aCart withCreditCard: aCreditCard onDate: aDate registerAt: aSalesBook 

	self assertIsNotExpired: aCreditCard on: aDate.
	self assertIsNotEmpty: aCart.

	^self new initializeToCheckout: aCart withCreditCard: aCreditCard onDate: aDate registerAt: aSalesBook.!
!Cashier class methodsFor: 'instance creation' stamp: 'MR 11/2/2021 16:29:40'!
toCheckout: aCart withCreditCard: aCreditCard onDate: aDate registerAt: aSalesBook forClient: aClientName  

	self assertIsNotExpired: aCreditCard on: aDate.
	self assertIsNotEmpty: aCart.

	^self new initializeToCheckout: aCart withCreditCard: aCreditCard onDate: aDate registerAt: aSalesBook forClient: aClientName.! !

!methodRemoval: Cashier class #toCheckout:withCreditCard:onDate:registerAt:aClientName: stamp: 'MR 11/2/2021 16:29:42'!
toCheckout: aCart withCreditCard: aCreditCard onDate: aDate registerAt: aSalesBook aClientName: aClientName  

	self assertIsNotExpired: aCreditCard on: aDate.
	self assertIsNotEmpty: aCart.

	^self new initializeToCheckout: aCart withCreditCard: aCreditCard onDate: aDate registerAt: aSalesBook.!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'MR 11/2/2021 16:29:54'!
Object subclass: #Cashier
	instanceVariableNames: 'catalog cart creditCard date salesBook clientName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'MR 11/2/2021 16:29:52'!
initializeToCheckout: aCart withCreditCard: aCreditCard onDate: aDate registerAt: aSalesBook forClient: aClientName 
	cart := aCart.
	creditCard := aCreditCard.
	date := aDate.
	salesBook := aSalesBook.
	clientName := aClientName.! !

!methodRemoval: Cashier #initializeToCheckout:withCreditCard:onDate:registerAt: stamp: 'MR 11/2/2021 16:29:56'!
initializeToCheckout: aCart withCreditCard: aCreditCard onDate: aDate registerAt: aSalesBook 
	cart := aCart.
	creditCard := aCreditCard.
	date := aDate.
	salesBook := aSalesBook.!
!Cashier methodsFor: 'initialization' stamp: 'MR 11/2/2021 16:30:09' prior: 50925673!
initializeToCheckout: aCart withCreditCard: aCreditCard onDate: aDate registerAt: aSalesBook forClient: aClientName 
	cart := aCart.
	creditCard := aCreditCard.
	date := aDate.
	salesBook := aSalesBook.
	clientName := aClientName.! !
!CashierTest methodsFor: 'tests' stamp: 'MR 11/2/2021 16:30:41' prior: 50925029!
test09CannotCheckoutEmptyCart
	| cart creditCard salesBook clientName |

	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	creditCard := testObjectsFactory createCreditCard.
	clientName := creditCard at: 'name'.

	self
		should: [Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !
!CashierTest methodsFor: 'tests' stamp: 'MR 11/2/2021 16:30:51' prior: 50925703!
test09CannotCheckoutEmptyCart
	| cart creditCard salesBook clientName |

	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	creditCard := testObjectsFactory createCreditCard.
	clientName := creditCard at: 'name'.

	self
		should: [Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook forClient: clientName]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !
!CashierTest methodsFor: 'tests' stamp: 'MR 11/2/2021 16:31:08' prior: 50925011!
test10CartCheckoutWithMultipleItemsHasCorrectPrice
	| cart cashier creditCard salesBook clientName |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	cart add: testObjectsFactory itemSellByTheStore.
	
	creditCard := testObjectsFactory createCreditCard.
	clientName := creditCard at: 'name'.
	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook forClient: clientName.
	
	self assert: 20 equals: (cashier checkout).! !
!CashierTest methodsFor: 'tests' stamp: 'MR 11/2/2021 16:31:18' prior: 50924989!
test11CannotCheckoutCartWithExpiredCreditCard
	| cart expiredCreditCard salesBook clientName |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	
	expiredCreditCard := testObjectsFactory createCreditCard.
	expiredCreditCard at: 'expirationYear' put: 2020.
	clientName := expiredCreditCard at: 'name'.
	
	self 
		should: [Cashier toCheckout: cart withCreditCard: expiredCreditCard onDate: testObjectsFactory today registerAt: salesBook forClient: clientName]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !
!CashierTest methodsFor: 'tests' stamp: 'MR 11/2/2021 16:31:41' prior: 50925133!
test12CashierCheckoutAddsBooksToSalesBook
	| cart cashier creditCard salesBook clientName |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	cart add: testObjectsFactory itemSellByTheStore.
	
	creditCard := testObjectsFactory createCreditCard.
	clientName := creditCard at: 'name'.
	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook forClient: clientName.
	cashier checkout.
	
	self assert: 2 equals: (salesBook occurrencesOf: testObjectsFactory itemSellByTheStore).
	
! !
!CashierTest methodsFor: 'tests' stamp: 'MR 11/2/2021 16:31:50' prior: 50925545!
test13
	| cart cashier creditCard salesBook clientName |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	10 timesRepeat: [cart add: testObjectsFactory itemSellByTheStore.].
	
	creditCard := testObjectsFactory createCreditCard.
	clientName := creditCard at: 'name'.
	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook forClient: clientName.
	
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		].
	
! !

!testRun: #CashierTest #test13 stamp: 'MR 11/2/2021 16:31:52'!
PASSED!

!testRun: #CashierTest #test09CannotCheckoutEmptyCart stamp: 'MR 11/2/2021 16:31:52'!
PASSED!

!testRun: #CashierTest #test10CartCheckoutWithMultipleItemsHasCorrectPrice stamp: 'MR 11/2/2021 16:31:52'!
PASSED!

!testRun: #CashierTest #test11CannotCheckoutCartWithExpiredCreditCard stamp: 'MR 11/2/2021 16:31:52'!
PASSED!

!testRun: #CashierTest #test12CashierCheckoutAddsBooksToSalesBook stamp: 'MR 11/2/2021 16:31:52'!
PASSED!

!testRun: #CashierTest #test13 stamp: 'MR 11/2/2021 16:31:52'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'MR 11/2/2021 16:32:24'!
test14aSDASD
	| cart cashier creditCard salesBook clientName |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	10 timesRepeat: [cart add: testObjectsFactory itemSellByTheStore.].
	
	creditCard := testObjectsFactory createCreditCard.
	clientName := creditCard at: 'name'.
	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook forClient: clientName.
	
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		].
	
! !
!CashierTest methodsFor: 'tests' stamp: 'MR 11/2/2021 16:32:55'!
test13CashierCannotCheckoutWhenCreditCardHasNotEnoughFunds
	| cart cashier creditCard salesBook clientName |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	10 timesRepeat: [cart add: testObjectsFactory itemSellByTheStore.].
	
	creditCard := testObjectsFactory createCreditCard.
	clientName := creditCard at: 'name'.
	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook forClient: clientName.
	
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		].
	
! !
!CashierTest methodsFor: 'tests' stamp: 'MR 11/2/2021 16:33:03'!
test11CashierCannotCheckoutCartWithExpiredCreditCard
	| cart expiredCreditCard salesBook clientName |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	
	expiredCreditCard := testObjectsFactory createCreditCard.
	expiredCreditCard at: 'expirationYear' put: 2020.
	clientName := expiredCreditCard at: 'name'.
	
	self 
		should: [Cashier toCheckout: cart withCreditCard: expiredCreditCard onDate: testObjectsFactory today registerAt: salesBook forClient: clientName]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !

!methodRemoval: CashierTest #test11CannotCheckoutCartWithExpiredCreditCard stamp: 'MR 11/2/2021 16:33:03'!
test11CannotCheckoutCartWithExpiredCreditCard
	| cart expiredCreditCard salesBook clientName |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	
	expiredCreditCard := testObjectsFactory createCreditCard.
	expiredCreditCard at: 'expirationYear' put: 2020.
	clientName := expiredCreditCard at: 'name'.
	
	self 
		should: [Cashier toCheckout: cart withCreditCard: expiredCreditCard onDate: testObjectsFactory today registerAt: salesBook forClient: clientName]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]!

!methodRemoval: CashierTest #test13 stamp: 'MR 11/2/2021 16:33:09'!
test13
	| cart cashier creditCard salesBook clientName |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	10 timesRepeat: [cart add: testObjectsFactory itemSellByTheStore.].
	
	creditCard := testObjectsFactory createCreditCard.
	clientName := creditCard at: 'name'.
	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook forClient: clientName.
	
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		].
	
!
!CashierTest methodsFor: 'tests' stamp: 'MR 11/2/2021 16:33:17'!
test09CashierCannotCheckoutEmptyCart
	| cart creditCard salesBook clientName |

	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	creditCard := testObjectsFactory createCreditCard.
	clientName := creditCard at: 'name'.

	self
		should: [Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook forClient: clientName]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !

!methodRemoval: CashierTest #test09CannotCheckoutEmptyCart stamp: 'MR 11/2/2021 16:33:17'!
test09CannotCheckoutEmptyCart
	| cart creditCard salesBook clientName |

	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	creditCard := testObjectsFactory createCreditCard.
	clientName := creditCard at: 'name'.

	self
		should: [Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook forClient: clientName]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]!
!CashierTest methodsFor: 'tests' stamp: 'MR 11/2/2021 16:33:29'!
test10CashierCheckoutCartWithMultipleItemsHasCorrectPrice
	| cart cashier creditCard salesBook clientName |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	cart add: testObjectsFactory itemSellByTheStore.
	
	creditCard := testObjectsFactory createCreditCard.
	clientName := creditCard at: 'name'.
	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook forClient: clientName.
	
	self assert: 20 equals: (cashier checkout).! !

!methodRemoval: CashierTest #test10CartCheckoutWithMultipleItemsHasCorrectPrice stamp: 'MR 11/2/2021 16:33:29'!
test10CartCheckoutWithMultipleItemsHasCorrectPrice
	| cart cashier creditCard salesBook clientName |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	cart add: testObjectsFactory itemSellByTheStore.
	
	creditCard := testObjectsFactory createCreditCard.
	clientName := creditCard at: 'name'.
	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook forClient: clientName.
	
	self assert: 20 equals: (cashier checkout).!
!CashierTest methodsFor: 'tests' stamp: 'MR 11/2/2021 16:33:43'!
test14CashierNoSabemos
	| cart cashier creditCard salesBook clientName |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	10 timesRepeat: [cart add: testObjectsFactory itemSellByTheStore.].
	
	creditCard := testObjectsFactory createCreditCard.
	clientName := creditCard at: 'name'.
	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook forClient: clientName.
	
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		].
	
! !

!methodRemoval: CashierTest #test14aSDASD stamp: 'MR 11/2/2021 16:33:43'!
test14aSDASD
	| cart cashier creditCard salesBook clientName |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	10 timesRepeat: [cart add: testObjectsFactory itemSellByTheStore.].
	
	creditCard := testObjectsFactory createCreditCard.
	clientName := creditCard at: 'name'.
	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook forClient: clientName.
	
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		].
	
!
!CashierTest methodsFor: 'tests' stamp: 'MR 11/2/2021 16:34:05' prior: 50926041!
test14CashierNoSabemos
	| cart cashier creditCard salesBook clientName |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	10 timesRepeat: [cart add: testObjectsFactory itemSellByTheStore.].
	
	creditCard := testObjectsFactory createCreditCard.
	clientName := 'Pepe'.
	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook forClient: clientName.
	
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		].
	
! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/2/2021 16:36:11' prior: 50925583!
hablarConMerchantProcessor: aTransactionAmount
	
	| creditCards creditCardNumber |
	creditCards _ Dictionary new.
	creditCards add: 4545565667677878 -> 50.
	creditCards add: 4545565667677879 -> 30.
	creditCards add: 4545565667677877 -> 0.
	creditCardNumber _ creditCard at: 'number'.
	
	((creditCards at: creditCardNumber) < aTransactionAmount) ifTrue: [
		^'1|Credit card has no funds'.
	].

	((creditCard at: 'name') = clientName) ifFalse: [
		^'1|Client is not credit card owner'.
	].
	
	^'0|OK'.
	
	
	
	
! !

!testRun: #CashierTest #test14CashierNoSabemos stamp: 'MR 11/2/2021 16:36:16'!
PASSED!

!testRun: #CashierTest #test09CashierCannotCheckoutEmptyCart stamp: 'MR 11/2/2021 16:36:16'!
PASSED!

!testRun: #CashierTest #test10CashierCheckoutCartWithMultipleItemsHasCorrectPrice stamp: 'MR 11/2/2021 16:36:16'!
PASSED!

!testRun: #CashierTest #test11CashierCannotCheckoutCartWithExpiredCreditCard stamp: 'MR 11/2/2021 16:36:16'!
PASSED!

!testRun: #CashierTest #test12CashierCheckoutAddsBooksToSalesBook stamp: 'MR 11/2/2021 16:36:16'!
PASSED!

!testRun: #CashierTest #test13CashierCannotCheckoutWhenCreditCardHasNotEnoughFunds stamp: 'MR 11/2/2021 16:36:16'!
PASSED!

!testRun: #CashierTest #test14CashierNoSabemos stamp: 'MR 11/2/2021 16:36:16'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'MR 11/2/2021 16:37:20'!
test14CashierCannotCheckoutWhenClientIsNotCreditCardOwner
	| cart cashier creditCard salesBook clientName |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	10 timesRepeat: [cart add: testObjectsFactory itemSellByTheStore.].
	
	creditCard := testObjectsFactory createCreditCard.
	clientName := 'Pepe'.
	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook forClient: clientName.
	
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		].
	
! !

!methodRemoval: CashierTest #test14CashierNoSabemos stamp: 'MR 11/2/2021 16:37:20'!
test14CashierNoSabemos
	| cart cashier creditCard salesBook clientName |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	10 timesRepeat: [cart add: testObjectsFactory itemSellByTheStore.].
	
	creditCard := testObjectsFactory createCreditCard.
	clientName := 'Pepe'.
	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook forClient: clientName.
	
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		].
	
!
!CashierTest methodsFor: 'tests' stamp: 'MR 11/2/2021 16:38:00' prior: 50925869!
test13CashierCannotCheckoutWhenCreditCardHasNotEnoughFunds
	| cart cashier creditCard salesBook clientName |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	10 timesRepeat: [cart add: testObjectsFactory itemSellByTheStore.].
	
	creditCard := testObjectsFactory createCreditCard.
	clientName := creditCard at: 'name'.
	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook forClient: clientName.
	
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		].
	
! !
!CashierTest methodsFor: 'tests' stamp: 'MR 11/2/2021 16:38:06' prior: 50926151!
test14CashierCannotCheckoutWhenClientIsNotCreditCardOwner
	| cart cashier creditCard salesBook clientName |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	
	creditCard := testObjectsFactory createCreditCard.
	clientName := 'Pepe'.
	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook forClient: clientName.
	
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		].
	
! !

!testRun: #CashierTest #test14CashierCannotCheckoutWhenClientIsNotCreditCardOwner stamp: 'MR 11/2/2021 16:38:25'!
PASSED!

!testRun: #CashierTest #test09CashierCannotCheckoutEmptyCart stamp: 'MR 11/2/2021 16:38:25'!
PASSED!

!testRun: #CashierTest #test10CashierCheckoutCartWithMultipleItemsHasCorrectPrice stamp: 'MR 11/2/2021 16:38:25'!
PASSED!

!testRun: #CashierTest #test11CashierCannotCheckoutCartWithExpiredCreditCard stamp: 'MR 11/2/2021 16:38:25'!
PASSED!

!testRun: #CashierTest #test12CashierCheckoutAddsBooksToSalesBook stamp: 'MR 11/2/2021 16:38:25'!
PASSED!

!testRun: #CashierTest #test13CashierCannotCheckoutWhenCreditCardHasNotEnoughFunds stamp: 'MR 11/2/2021 16:38:25'!
PASSED!

!testRun: #CashierTest #test14CashierCannotCheckoutWhenClientIsNotCreditCardOwner stamp: 'MR 11/2/2021 16:38:25'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'MR 11/2/2021 16:38:41'!
test15Cashier
	| cart cashier creditCard salesBook clientName |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	
	creditCard := testObjectsFactory createCreditCard.
	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook forClient: clientName.
	
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		].
	
! !
!CashierTest methodsFor: 'tests' stamp: 'MR 11/2/2021 16:38:51' prior: 50926268!
test15Cashier
	| cart cashier creditCard salesBook clientName |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	
	creditCard := testObjectsFactory createCreditCard.
	clientName := creditCard at: 'name'.
	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook forClient: clientName.
	
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		].
	
! !

!testRun: #CashierTest #test15Cashier stamp: 'MR 11/2/2021 16:38:55'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'MR 11/2/2021 16:39:45' prior: 50926289!
test15Cashier
	| cart cashier creditCard salesBook clientName |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	
	creditCard := testObjectsFactory createCreditCard.
	clientName := creditCard at: 'name'.
	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook forClient: clientName.
	
	self assert: '' equals: cashier checkout.
	
! !
!CashierTest methodsFor: 'tests' stamp: 'MR 11/2/2021 16:40:00' prior: 50926313!
test15Cashier
	| cart cashier creditCard salesBook clientName |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	
	creditCard := testObjectsFactory createCreditCard.
	clientName := creditCard at: 'name'.
	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook forClient: clientName.
	
	self assert: 10 equals: cashier checkout.
	
! !

!testRun: #CashierTest #test15Cashier stamp: 'MR 11/2/2021 16:40:01'!
PASSED!

!testRun: #CashierTest #test09CashierCannotCheckoutEmptyCart stamp: 'MR 11/2/2021 16:40:01'!
PASSED!

!testRun: #CashierTest #test10CashierCheckoutCartWithMultipleItemsHasCorrectPrice stamp: 'MR 11/2/2021 16:40:01'!
PASSED!

!testRun: #CashierTest #test11CashierCannotCheckoutCartWithExpiredCreditCard stamp: 'MR 11/2/2021 16:40:01'!
PASSED!

!testRun: #CashierTest #test12CashierCheckoutAddsBooksToSalesBook stamp: 'MR 11/2/2021 16:40:01'!
PASSED!

!testRun: #CashierTest #test13CashierCannotCheckoutWhenCreditCardHasNotEnoughFunds stamp: 'MR 11/2/2021 16:40:01'!
PASSED!

!testRun: #CashierTest #test14CashierCannotCheckoutWhenClientIsNotCreditCardOwner stamp: 'MR 11/2/2021 16:40:01'!
PASSED!

!testRun: #CashierTest #test15Cashier stamp: 'MR 11/2/2021 16:40:01'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'MR 11/2/2021 16:41:33'!
test15CashierCheckoutsCorrectlyWithValidCreditCardAndClient
	| cart cashier creditCard salesBook clientName |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	
	creditCard := testObjectsFactory createCreditCard.
	clientName := creditCard at: 'name'.
	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook forClient: clientName.
	
	self assert: 10 equals: cashier checkout.
	
! !

!methodRemoval: CashierTest #test15Cashier stamp: 'MR 11/2/2021 16:41:33'!
test15Cashier
	| cart cashier creditCard salesBook clientName |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	
	creditCard := testObjectsFactory createCreditCard.
	clientName := creditCard at: 'name'.
	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook forClient: clientName.
	
	self assert: 10 equals: cashier checkout.
	
!

----SNAPSHOT----(2 November 2021 16:46:08) CuisUniversity-4913.image priorSource: 18993048!

----STARTUP---- (4 November 2021 09:41:16) as C:\Users\migue\Desktop\CuisUniversity\CuisUniversity-4913.image!


Object subclass: #CreditCard
	instanceVariableNames: 'name number expirationMonth expirationYear'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'MR 11/4/2021 09:43:59'!
Object subclass: #CreditCard
	instanceVariableNames: 'name number expirationMonth expirationYear'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard class methodsFor: 'nil' stamp: 'MR 11/4/2021 09:44:56'!
withName: aName number: aNumber expirationMonth: anExpirationMonth expirationYear: anExpirationYear
	^self new initializeWithName: aName number: aNumber expirationMonth: anExpirationMonth expirationYear: anExpirationYear.! !
!CreditCard methodsFor: 'nil' stamp: 'MR 11/4/2021 09:45:35'!
initializeWithName: aName number: aNumber expirationMonth: anExpirationMonth expirationYear: anExpirationYear
	name _ aName.
	number _ aNumber.
	expirationMonth _ anExpirationMonth.
	expirationYear _ anExpirationYear.! !
!CreditCard methodsFor: 'nil' stamp: 'MR 11/4/2021 09:45:47' overrides: 16882612!
name
	^name.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 09:45:50'!
number
	^number.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 09:45:58'!
expirationMonth
	^expirationMonth.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 09:46:02'!
expirationYear
	^expirationYear.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 09:46:40' prior: 50925535!
createCreditCard

	
	
	^CreditCard 
		withName: 'Mike Wazowsky'
		number:  4545565667677878
		expirationMonth: 02 
		expirationYear: 2025.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 09:46:47' prior: 50926465!
createCreditCard

	^CreditCard 
		withName: 'Mike Wazowsky'
		number: 4545565667677878
		expirationMonth: 02
		expirationYear: 2025.! !
!CashierTest methodsFor: 'tests' stamp: 'MR 11/4/2021 09:47:13' prior: 50925962!
test09CashierCannotCheckoutEmptyCart
	| cart creditCard salesBook clientName |

	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	creditCard := testObjectsFactory createCreditCard.
	clientName := creditCard name.

	self
		should: [Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook forClient: clientName]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !
!CashierTest methodsFor: 'tests' stamp: 'MR 11/4/2021 09:47:25' prior: 50926000!
test10CashierCheckoutCartWithMultipleItemsHasCorrectPrice
	| cart cashier creditCard salesBook clientName |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	cart add: testObjectsFactory itemSellByTheStore.
	
	creditCard := testObjectsFactory createCreditCard.
	clientName := creditCard name.
	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook forClient: clientName.
	
	self assert: 20 equals: (cashier checkout).! !
!CashierTest methodsFor: 'tests' stamp: 'MR 11/4/2021 09:47:53' prior: 50925892!
test11CashierCannotCheckoutCartWithExpiredCreditCard
	| cart expiredCreditCard salesBook |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	
	expiredCreditCard := testObjectsFactory createExpiredCreditCard.
	
	self 
		should: [Cashier toCheckout: cart withCreditCard: expiredCreditCard onDate: testObjectsFactory today registerAt: salesBook forClient: expiredCreditCard name]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 09:48:09'!
createExpiredCreditCard

	^CreditCard 
		withName: 'Mike Wazowsky'
		number: 4545565667677878
		expirationMonth: 02
		expirationYear: 2020.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 09:48:17'!
createValidCreditCard

	^CreditCard 
		withName: 'Mike Wazowsky'
		number: 4545565667677878
		expirationMonth: 02
		expirationYear: 2025.! !

!methodRemoval: StoreTestObjectsFactory #createValidCreditCard stamp: 'MR 11/4/2021 09:48:22'!
createValidCreditCard

	^CreditCard 
		withName: 'Mike Wazowsky'
		number: 4545565667677878
		expirationMonth: 02
		expirationYear: 2025.!
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 09:48:32'!
createValidCreditCard

	^CreditCard 
		withName: 'Mike Wazowsky'
		number: 4545565667677878
		expirationMonth: 02
		expirationYear: 2025.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 09:48:32' prior: 50926375!
test15CashierCheckoutsCorrectlyWithValidCreditCardAndClient
	| cart cashier creditCard salesBook clientName |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	
	creditCard := testObjectsFactory createValidCreditCard.
	clientName := creditCard at: 'name'.
	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook forClient: clientName.
	
	self assert: 10 equals: cashier checkout.
	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 09:48:32' prior: 50926196!
test13CashierCannotCheckoutWhenCreditCardHasNotEnoughFunds
	| cart cashier creditCard salesBook clientName |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	10 timesRepeat: [cart add: testObjectsFactory itemSellByTheStore.].
	
	creditCard := testObjectsFactory createValidCreditCard.
	clientName := creditCard at: 'name'.
	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook forClient: clientName.
	
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		].
	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 09:48:32' prior: 50926220!
test14CashierCannotCheckoutWhenClientIsNotCreditCardOwner
	| cart cashier creditCard salesBook clientName |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	
	creditCard := testObjectsFactory createValidCreditCard.
	clientName := 'Pepe'.
	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook forClient: clientName.
	
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		].
	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 09:48:32' prior: 50926499!
test10CashierCheckoutCartWithMultipleItemsHasCorrectPrice
	| cart cashier creditCard salesBook clientName |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	cart add: testObjectsFactory itemSellByTheStore.
	
	creditCard := testObjectsFactory createValidCreditCard.
	clientName := creditCard name.
	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook forClient: clientName.
	
	self assert: 20 equals: (cashier checkout).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 09:48:32' prior: 50926480!
test09CashierCannotCheckoutEmptyCart
	| cart creditCard salesBook clientName |

	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	creditCard := testObjectsFactory createValidCreditCard.
	clientName := creditCard name.

	self
		should: [Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook forClient: clientName]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 09:48:32' prior: 50925785!
test12CashierCheckoutAddsBooksToSalesBook
	| cart cashier creditCard salesBook clientName |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	cart add: testObjectsFactory itemSellByTheStore.
	
	creditCard := testObjectsFactory createValidCreditCard.
	clientName := creditCard at: 'name'.
	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook forClient: clientName.
	cashier checkout.
	
	self assert: 2 equals: (salesBook occurrencesOf: testObjectsFactory itemSellByTheStore).
	
! !

!methodRemoval: StoreTestObjectsFactory #createCreditCard stamp: 'MR 11/4/2021 09:48:32'!
createCreditCard

	^CreditCard 
		withName: 'Mike Wazowsky'
		number: 4545565667677878
		expirationMonth: 02
		expirationYear: 2025.!
!CashierTest methodsFor: 'tests' stamp: 'MR 11/4/2021 09:48:46' prior: 50926640!
test10CashierCheckoutCartWithMultipleItemsHasCorrectPrice
	| cart cashier creditCard salesBook |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	cart add: testObjectsFactory itemSellByTheStore.
	
	creditCard := testObjectsFactory createValidCreditCard.
	
	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook forClient: creditCard name.
	
	self assert: 20 equals: (cashier checkout).! !
!CashierTest methodsFor: 'tests' stamp: 'MR 11/4/2021 09:48:58' prior: 50926681!
test12CashierCheckoutAddsBooksToSalesBook
	| cart cashier creditCard salesBook |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	cart add: testObjectsFactory itemSellByTheStore.
	
	creditCard := testObjectsFactory createValidCreditCard.

	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook forClient: creditCard name.
	cashier checkout.
	
	self assert: 2 equals: (salesBook occurrencesOf: testObjectsFactory itemSellByTheStore).
	
! !
!CashierTest methodsFor: 'tests' stamp: 'MR 11/4/2021 09:49:06' prior: 50926592!
test13CashierCannotCheckoutWhenCreditCardHasNotEnoughFunds
	| cart cashier creditCard salesBook |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	10 timesRepeat: [cart add: testObjectsFactory itemSellByTheStore.].
	
	creditCard := testObjectsFactory createValidCreditCard.

	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook forClient: creditCard name.
	
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		].
	
! !
!CashierTest methodsFor: 'tests' stamp: 'MR 11/4/2021 09:49:28' prior: 50926617!
test14CashierCannotCheckoutWhenClientIsNotCreditCardOwner
	| cart cashier creditCard salesBook clientName |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	
	creditCard := testObjectsFactory createValidCreditCard.
	clientName := 'Pepe'.
	
	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook forClient: clientName.
	
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		].
	
! !
!CashierTest methodsFor: 'tests' stamp: 'MR 11/4/2021 09:49:35' prior: 50926572!
test15CashierCheckoutsCorrectlyWithValidCreditCardAndClient
	| cart cashier creditCard salesBook |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	
	creditCard := testObjectsFactory createValidCreditCard.

	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook forClient: creditCard name.
	
	self assert: 10 equals: cashier checkout.
	
! !

!testRun: #CashierTest #test15CashierCheckoutsCorrectlyWithValidCreditCardAndClient stamp: 'MR 11/4/2021 09:49:39'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 09:50:29' prior: 50926109!
hablarConMerchantProcessor: aTransactionAmount
	
	| creditCards creditCardNumber |
	creditCards _ Dictionary new.
	creditCards add: 4545565667677878 -> 50.
	creditCards add: 4545565667677879 -> 30.
	creditCards add: 4545565667677877 -> 0.
	creditCardNumber _ creditCard at: 'number'.
	
	((creditCards at: creditCardNumber) < aTransactionAmount) ifTrue: [
		^'1|Credit card has no funds'.
	].

	(creditCard name = clientName) ifFalse: [
		^'1|Client is not credit card owner'.
	].
	
	^'0|OK'.
	
	
	
	
! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 09:50:35' prior: 50926818!
hablarConMerchantProcessor: aTransactionAmount
	
	| creditCards creditCardNumber |
	creditCards _ Dictionary new.
	creditCards add: 4545565667677878 -> 50.
	creditCards add: 4545565667677879 -> 30.
	creditCards add: 4545565667677877 -> 0.
	creditCardNumber _ creditCard number.
	
	((creditCards at: creditCardNumber) < aTransactionAmount) ifTrue: [
		^'1|Credit card has no funds'.
	].

	(creditCard name = clientName) ifFalse: [
		^'1|Client is not credit card owner'.
	].
	
	^'0|OK'.
	
	
	
	
! !

!testRun: #CashierTest #test10CashierCheckoutCartWithMultipleItemsHasCorrectPrice stamp: 'MR 11/4/2021 09:50:39'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'MR 11/4/2021 09:51:10' prior: 50924532!
assertIsNotExpired: aCreditCard on: aDate

	| creditCardExpirationDate creditCardExpirationMonth creditCardExpirationYear |
	
	creditCardExpirationYear := GregorianYear number: (aCreditCard expirationYear).
	creditCardExpirationMonth := GregorianMonth numbered: (aCreditCard expirationMonth).
	creditCardExpirationDate := GregorianMonthOfYear year: creditCardExpirationYear month: creditCardExpirationMonth.
	
	(aDate > creditCardExpirationDate) ifTrue: [
		^self error: Cashier invalidCheckoutErrorMessage 
	].! !

!testRun: #CashierTest #test09CashierCannotCheckoutEmptyCart stamp: 'MR 11/4/2021 09:51:17'!
PASSED!

!testRun: #CashierTest #test10CashierCheckoutCartWithMultipleItemsHasCorrectPrice stamp: 'MR 11/4/2021 09:51:17'!
PASSED!

!testRun: #CashierTest #test11CashierCannotCheckoutCartWithExpiredCreditCard stamp: 'MR 11/4/2021 09:51:17'!
PASSED!

!testRun: #CashierTest #test12CashierCheckoutAddsBooksToSalesBook stamp: 'MR 11/4/2021 09:51:17'!
PASSED!

!testRun: #CashierTest #test13CashierCannotCheckoutWhenCreditCardHasNotEnoughFunds stamp: 'MR 11/4/2021 09:51:17'!
PASSED!

!testRun: #CashierTest #test14CashierCannotCheckoutWhenClientIsNotCreditCardOwner stamp: 'MR 11/4/2021 09:51:17'!
PASSED!

!testRun: #CashierTest #test15CashierCheckoutsCorrectlyWithValidCreditCardAndClient stamp: 'MR 11/4/2021 09:51:17'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MR 11/4/2021 09:51:19'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MR 11/4/2021 09:51:19'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MR 11/4/2021 09:51:19'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MR 11/4/2021 09:51:19'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MR 11/4/2021 09:51:19'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MR 11/4/2021 09:51:19'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MR 11/4/2021 09:51:19'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MR 11/4/2021 09:51:19'!
PASSED!

!testRun: #CashierTest #test09CashierCannotCheckoutEmptyCart stamp: 'MR 11/4/2021 09:51:19'!
PASSED!

!testRun: #CashierTest #test10CashierCheckoutCartWithMultipleItemsHasCorrectPrice stamp: 'MR 11/4/2021 09:51:19'!
PASSED!

!testRun: #CashierTest #test11CashierCannotCheckoutCartWithExpiredCreditCard stamp: 'MR 11/4/2021 09:51:19'!
PASSED!

!testRun: #CashierTest #test12CashierCheckoutAddsBooksToSalesBook stamp: 'MR 11/4/2021 09:51:19'!
PASSED!

!testRun: #CashierTest #test13CashierCannotCheckoutWhenCreditCardHasNotEnoughFunds stamp: 'MR 11/4/2021 09:51:19'!
PASSED!

!testRun: #CashierTest #test14CashierCannotCheckoutWhenClientIsNotCreditCardOwner stamp: 'MR 11/4/2021 09:51:19'!
PASSED!

!testRun: #CashierTest #test15CashierCheckoutsCorrectlyWithValidCreditCardAndClient stamp: 'MR 11/4/2021 09:51:19'!
PASSED!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'MR 11/4/2021 09:53:51'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'setup' stamp: 'MR 11/4/2021 09:54:17' prior: 50923825 overrides: 16927572!
setUp

	testObjectsFactory := StoreTestObjectsFactory new.
	merchantProcessor := MerchantProcessorSimulator new.! !

TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'MR 11/4/2021 09:54:32'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #MerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'MR 11/4/2021 09:54:44'!
TestCase subclass: #MerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier class methodsFor: 'instance creation' stamp: 'MR 11/4/2021 09:56:10'!
toCheckout: aCart withCreditCard: aCreditCard onDate: aDate registerAt: aSalesBook forClient: aClientName andMerchantProcessor: andMerchantProcessor   

	self assertIsNotExpired: aCreditCard on: aDate.
	self assertIsNotEmpty: aCart.

	^self new initializeToCheckout: aCart withCreditCard: aCreditCard onDate: aDate registerAt: aSalesBook forClient: aClientName.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 09:56:10' prior: 50926519!
test11CashierCannotCheckoutCartWithExpiredCreditCard
	| cart expiredCreditCard salesBook |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	
	expiredCreditCard := testObjectsFactory createExpiredCreditCard.
	
	self 
		should: [Cashier toCheckout: cart withCreditCard: expiredCreditCard onDate: testObjectsFactory today registerAt: salesBook forClient: expiredCreditCard name andMerchantProcessor: aMerchantProcessor]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 09:56:10' prior: 50926710!
test10CashierCheckoutCartWithMultipleItemsHasCorrectPrice
	| cart cashier creditCard salesBook |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	cart add: testObjectsFactory itemSellByTheStore.
	
	creditCard := testObjectsFactory createValidCreditCard.
	
	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook forClient: creditCard name andMerchantProcessor: aMerchantProcessor.
	
	self assert: 20 equals: (cashier checkout).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 09:56:10' prior: 50926729!
test12CashierCheckoutAddsBooksToSalesBook
	| cart cashier creditCard salesBook |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	cart add: testObjectsFactory itemSellByTheStore.
	
	creditCard := testObjectsFactory createValidCreditCard.

	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook forClient: creditCard name andMerchantProcessor: aMerchantProcessor.
	cashier checkout.
	
	self assert: 2 equals: (salesBook occurrencesOf: testObjectsFactory itemSellByTheStore).
	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 09:56:10' prior: 50926661!
test09CashierCannotCheckoutEmptyCart
	| cart creditCard salesBook clientName |

	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	creditCard := testObjectsFactory createValidCreditCard.
	clientName := creditCard name.

	self
		should: [Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook forClient: clientName andMerchantProcessor: aMerchantProcessor]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 09:56:10' prior: 50926796!
test15CashierCheckoutsCorrectlyWithValidCreditCardAndClient
	| cart cashier creditCard salesBook |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	
	creditCard := testObjectsFactory createValidCreditCard.

	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook forClient: creditCard name andMerchantProcessor: aMerchantProcessor.
	
	self assert: 10 equals: cashier checkout.
	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 09:56:10' prior: 50926773!
test14CashierCannotCheckoutWhenClientIsNotCreditCardOwner
	| cart cashier creditCard salesBook clientName |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	
	creditCard := testObjectsFactory createValidCreditCard.
	clientName := 'Pepe'.
	
	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook forClient: clientName andMerchantProcessor: aMerchantProcessor.
	
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		].
	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 09:56:10' prior: 50926750!
test13CashierCannotCheckoutWhenCreditCardHasNotEnoughFunds
	| cart cashier creditCard salesBook |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	10 timesRepeat: [cart add: testObjectsFactory itemSellByTheStore.].
	
	creditCard := testObjectsFactory createValidCreditCard.

	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook forClient: creditCard name andMerchantProcessor: aMerchantProcessor.
	
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		].
	
! !

!methodRemoval: Cashier class #toCheckout:withCreditCard:onDate:registerAt:forClient: stamp: 'MR 11/4/2021 09:56:10'!
toCheckout: aCart withCreditCard: aCreditCard onDate: aDate registerAt: aSalesBook forClient: aClientName  

	self assertIsNotExpired: aCreditCard on: aDate.
	self assertIsNotEmpty: aCart.

	^self new initializeToCheckout: aCart withCreditCard: aCreditCard onDate: aDate registerAt: aSalesBook forClient: aClientName.!
!Cashier class methodsFor: 'instance creation' stamp: 'MR 11/4/2021 09:56:19' prior: 50926996!
toCheckout: aCart withCreditCard: aCreditCard onDate: aDate registerAt: aSalesBook forClient: aClientName andMerchantProcessor: aMerchantProcessor   

	self assertIsNotExpired: aCreditCard on: aDate.
	self assertIsNotEmpty: aCart.

	^self new initializeToCheckout: aCart withCreditCard: aCreditCard onDate: aDate registerAt: aSalesBook forClient: aClientName.! !
!Cashier class methodsFor: 'instance creation' stamp: 'MR 11/4/2021 09:56:39' prior: 50927181!
toCheckout: aCart withCreditCard: aCreditCard onDate: aDate registerAt: aSalesBook forClient: aClientName andMerchantProcessor: aMerchantProcessor   

	self assertIsNotExpired: aCreditCard on: aDate.
	self assertIsNotEmpty: aCart.

	^self new initializeToCheckout: aCart withCreditCard: aCreditCard onDate: aDate registerAt: aSalesBook forClient: aClientName andMerchantProcessor: aMerchantProcessor.! !
!Cashier methodsFor: 'initialization' stamp: 'MR 11/4/2021 09:57:56'!
initializeToCheckout: aCart withCreditCard: aCreditCard onDate: aDate registerAt: aSalesBook forClient: aClientName aMerchantProcessor: andMerchantProcessor  
	cart := aCart.
	creditCard := aCreditCard.
	date := aDate.
	salesBook := aSalesBook.
	clientName := aClientName.! !

!methodRemoval: Cashier #initializeToCheckout:withCreditCard:onDate:registerAt:forClient: stamp: 'MR 11/4/2021 09:57:56'!
initializeToCheckout: aCart withCreditCard: aCreditCard onDate: aDate registerAt: aSalesBook forClient: aClientName 
	cart := aCart.
	creditCard := aCreditCard.
	date := aDate.
	salesBook := aSalesBook.
	clientName := aClientName.!
!Cashier methodsFor: 'initialization' stamp: 'MR 11/4/2021 09:58:06'!
initializeToCheckout: aCart withCreditCard: aCreditCard onDate: aDate registerAt: aSalesBook forClient: aClientName andMerchantProcessor: aMerchantProcessor  
	cart := aCart.
	creditCard := aCreditCard.
	date := aDate.
	salesBook := aSalesBook.
	clientName := aClientName.! !

!methodRemoval: Cashier #initializeToCheckout:withCreditCard:onDate:registerAt:forClient:aMerchantProcessor: stamp: 'MR 11/4/2021 09:58:08'!
initializeToCheckout: aCart withCreditCard: aCreditCard onDate: aDate registerAt: aSalesBook forClient: aClientName aMerchantProcessor: andMerchantProcessor  
	cart := aCart.
	creditCard := aCreditCard.
	date := aDate.
	salesBook := aSalesBook.
	clientName := aClientName.!
!CashierTest methodsFor: 'tests' stamp: 'MR 11/4/2021 09:58:20' prior: 50927078!
test09CashierCannotCheckoutEmptyCart
	| cart creditCard salesBook clientName |

	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	creditCard := testObjectsFactory createValidCreditCard.
	clientName := creditCard name.

	self
		should: [Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook forClient: clientName andMerchantProcessor: merchantProcessor]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !
!CashierTest methodsFor: 'tests' stamp: 'MR 11/4/2021 09:58:28' prior: 50927034!
test10CashierCheckoutCartWithMultipleItemsHasCorrectPrice
	| cart cashier creditCard salesBook |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	cart add: testObjectsFactory itemSellByTheStore.
	
	creditCard := testObjectsFactory createValidCreditCard.
	
	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook forClient: creditCard name andMerchantProcessor: merchantProcessor.
	
	self assert: 20 equals: (cashier checkout).! !
!CashierTest methodsFor: 'tests' stamp: 'MR 11/4/2021 09:58:48' prior: 50927011!
test11CashierCannotCheckoutCartWithExpiredCreditCard
	| cart expiredCreditCard salesBook |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	
	expiredCreditCard := testObjectsFactory createExpiredCreditCard.
	
	self 
		should: [Cashier toCheckout: cart withCreditCard: expiredCreditCard onDate: testObjectsFactory today registerAt: salesBook forClient: expiredCreditCard name andMerchantProcessor: merchantProcessor]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		]! !
!CashierTest methodsFor: 'tests' stamp: 'MR 11/4/2021 09:58:51' prior: 50927055!
test12CashierCheckoutAddsBooksToSalesBook
	| cart cashier creditCard salesBook |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	cart add: testObjectsFactory itemSellByTheStore.
	
	creditCard := testObjectsFactory createValidCreditCard.

	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook forClient: creditCard name andMerchantProcessor: merchantProcessor.
	cashier checkout.
	
	self assert: 2 equals: (salesBook occurrencesOf: testObjectsFactory itemSellByTheStore).
	
! !
!CashierTest methodsFor: 'tests' stamp: 'MR 11/4/2021 09:58:54' prior: 50927143!
test13CashierCannotCheckoutWhenCreditCardHasNotEnoughFunds
	| cart cashier creditCard salesBook |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	10 timesRepeat: [cart add: testObjectsFactory itemSellByTheStore.].
	
	creditCard := testObjectsFactory createValidCreditCard.

	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook forClient: creditCard name andMerchantProcessor: merchantProcessor.
	
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		].
	
! !
!CashierTest methodsFor: 'tests' stamp: 'MR 11/4/2021 09:58:59' prior: 50927118!
test14CashierCannotCheckoutWhenClientIsNotCreditCardOwner
	| cart cashier creditCard salesBook clientName |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	
	creditCard := testObjectsFactory createValidCreditCard.
	clientName := 'Pepe'.
	
	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook forClient: clientName andMerchantProcessor: merchantProcessor.
	
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		].
	
! !
!CashierTest methodsFor: 'tests' stamp: 'MR 11/4/2021 09:59:03' prior: 50927099!
test15CashierCheckoutsCorrectlyWithValidCreditCardAndClient
	| cart cashier creditCard salesBook |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	
	creditCard := testObjectsFactory createValidCreditCard.

	cashier := Cashier toCheckout: cart withCreditCard: creditCard onDate: testObjectsFactory today registerAt: salesBook forClient: creditCard name andMerchantProcessor: merchantProcessor.
	
	self assert: 10 equals: cashier checkout.
	
! !

Object subclass: #Cashier
	instanceVariableNames: 'catalog cart creditCard date salesBook clientName merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'MR 11/4/2021 09:59:15'!
Object subclass: #Cashier
	instanceVariableNames: 'catalog cart creditCard date salesBook clientName merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'MR 11/4/2021 09:59:24' prior: 50927233!
initializeToCheckout: aCart withCreditCard: aCreditCard onDate: aDate registerAt: aSalesBook forClient: aClientName andMerchantProcessor: aMerchantProcessor  
	cart := aCart.
	creditCard := aCreditCard.
	date := aDate.
	salesBook := aSalesBook.
	clientName := aClientName.
	merchantProcessor := aMerchantProcessor.! !

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'MR 11/4/2021 10:00:23'!
TestCase subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'creditCards'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'nil' stamp: 'MR 11/4/2021 10:00:21' overrides: 16896425!
initialize

	creditCards := Dictionary new.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:03:01' prior: 50925365!
checkout
	| total result |
	
	result _ ''.
	total _ cart registerTotal: salesBook.
	
	" if production ? "
	result _ merchantProcessor debit: total onCreditCard: creditCard.
	
	(result = '0|OK') ifTrue: [^total].
	
	^self error: Cashier invalidCheckoutErrorMessage.! !

!methodRemoval: Cashier #hablarConMerchantProcessor: stamp: 'MR 11/4/2021 10:03:10'!
hablarConMerchantProcessor: aTransactionAmount
	
	| creditCards creditCardNumber |
	creditCards _ Dictionary new.
	creditCards add: 4545565667677878 -> 50.
	creditCards add: 4545565667677879 -> 30.
	creditCards add: 4545565667677877 -> 0.
	creditCardNumber _ creditCard number.
	
	((creditCards at: creditCardNumber) < aTransactionAmount) ifTrue: [
		^'1|Credit card has no funds'.
	].

	(creditCard name = clientName) ifFalse: [
		^'1|Client is not credit card owner'.
	].
	
	^'0|OK'.
	
	
	
	
!
!MerchantProcessorSimulator methodsFor: 'nil' stamp: 'MR 11/4/2021 10:03:59'!
debit: anAmount on: aCreditCard
	"| creditCards creditCardNumber |
	creditCards _ Dictionary new.
	creditCards add: 4545565667677878 -> 50.
	creditCards add: 4545565667677879 -> 30.
	creditCards add: 4545565667677877 -> 0.
	creditCardNumber _ creditCard number.
	
	
	((creditCards at: aCreditCard number) < aTransactionAmount) ifTrue: [
		^'1|Credit card has no funds'.
	].

	(creditCards name = clientName) ifFalse: [
		^'1|Client is not credit card owner'.
	].
	"
	^'0|OK'.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:04:06' prior: 50927453!
checkout
	| total result |
	
	result _ ''.
	total _ cart registerTotal: salesBook.
	
	" if production ? "
	result _ merchantProcessor debit: total on: creditCard.
	
	(result = '0|OK') ifTrue: [^total].
	
	^self error: Cashier invalidCheckoutErrorMessage.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:04:11' prior: 50927500!
checkout
	| total result |
	
	result _ ''.
	total _ cart registerTotal: salesBook.
	
	result _ merchantProcessor debit: total on: creditCard. " if production ? "
	
	(result = '0|OK') ifTrue: [^total].
	
	^self error: Cashier invalidCheckoutErrorMessage.! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:07:19' prior: 50927482!
debit: aTransactionAmount on: aCreditCard
	"| creditCards creditCardNumber |
	creditCards _ Dictionary new.
	creditCards add: 4545565667677878 -> 50.
	creditCards add: 4545565667677879 -> 30.
	creditCards add: 4545565667677877 -> 0.
	creditCardNumber _ creditCard number.
	
	self assertHasEnoughFunds: aCreditCard for: aTransactionAmount.
	self assertIsNotStolen: aCreditCard.
	
	((creditCards at: aCreditCard number) < aTransactionAmount) ifTrue: [
		^'1|Credit card has no funds'.
	].

	(creditCards name = clientName) ifFalse: [
		^'1|Client is not credit card owner'.
	].
	"
	^'0|OK'.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:07:47' prior: 50927511!
checkout
	| total result |
	
	result _ ''.
	total _ cart registerTotal: salesBook.
	
	result _ merchantProcessor debit: total on: creditCard. " if production ? "
	
	(result = '0|OK') ifTrue: [^total].
	
	^self error: Cashier invalidCheckoutErrorMessage.! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:08:43'!
debit: aTransactionAmount on: aCreditCard aClientName: andClientName 
	"| creditCards creditCardNumber |
	creditCards _ Dictionary new.
	creditCards add: 4545565667677878 -> 50.
	creditCards add: 4545565667677879 -> 30.
	creditCards add: 4545565667677877 -> 0.
	creditCardNumber _ creditCard number.
	
	self assertHasEnoughFunds: aCreditCard for: aTransactionAmount.
	self assertIsNotStolen: aCreditCard.
	
	((creditCards at: aCreditCard number) < aTransactionAmount) ifTrue: [
		^'1|Credit card has no funds'.
	].

	(creditCards name = clientName) ifFalse: [
		^'1|Client is not credit card owner'.
	].
	"
	^'0|OK'.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:08:43' prior: 50927545!
checkout
	| total result |
	
	result _ ''.
	total _ cart registerTotal: salesBook.
	
	result _ merchantProcessor debit: total on: creditCard aClientName: clientName. " if production ? "
	
	(result = '0|OK') ifTrue: [^total].
	
	^self error: Cashier invalidCheckoutErrorMessage.! !

!methodRemoval: MerchantProcessorSimulator #debit:on: stamp: 'MR 11/4/2021 10:08:43'!
debit: aTransactionAmount on: aCreditCard
	"| creditCards creditCardNumber |
	creditCards _ Dictionary new.
	creditCards add: 4545565667677878 -> 50.
	creditCards add: 4545565667677879 -> 30.
	creditCards add: 4545565667677877 -> 0.
	creditCardNumber _ creditCard number.
	
	self assertHasEnoughFunds: aCreditCard for: aTransactionAmount.
	self assertIsNotStolen: aCreditCard.
	
	((creditCards at: aCreditCard number) < aTransactionAmount) ifTrue: [
		^'1|Credit card has no funds'.
	].

	(creditCards name = clientName) ifFalse: [
		^'1|Client is not credit card owner'.
	].
	"
	^'0|OK'.!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:08:51'!
debit: aTransactionAmount on: aCreditCard andClientName: aClientName 
	"| creditCards creditCardNumber |
	creditCards _ Dictionary new.
	creditCards add: 4545565667677878 -> 50.
	creditCards add: 4545565667677879 -> 30.
	creditCards add: 4545565667677877 -> 0.
	creditCardNumber _ creditCard number.
	
	self assertHasEnoughFunds: aCreditCard for: aTransactionAmount.
	self assertIsNotStolen: aCreditCard.
	
	((creditCards at: aCreditCard number) < aTransactionAmount) ifTrue: [
		^'1|Credit card has no funds'.
	].

	(creditCards name = clientName) ifFalse: [
		^'1|Client is not credit card owner'.
	].
	"
	^'0|OK'.! !

!methodRemoval: MerchantProcessorSimulator #debit:on:aClientName: stamp: 'MR 11/4/2021 10:08:57'!
debit: aTransactionAmount on: aCreditCard aClientName: andClientName 
	"| creditCards creditCardNumber |
	creditCards _ Dictionary new.
	creditCards add: 4545565667677878 -> 50.
	creditCards add: 4545565667677879 -> 30.
	creditCards add: 4545565667677877 -> 0.
	creditCardNumber _ creditCard number.
	
	self assertHasEnoughFunds: aCreditCard for: aTransactionAmount.
	self assertIsNotStolen: aCreditCard.
	
	((creditCards at: aCreditCard number) < aTransactionAmount) ifTrue: [
		^'1|Credit card has no funds'.
	].

	(creditCards name = clientName) ifFalse: [
		^'1|Client is not credit card owner'.
	].
	"
	^'0|OK'.!
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:09:13' prior: 50927579!
checkout
	| total result |
	
	result _ ''.
	total _ cart registerTotal: salesBook.
	
	result _ merchantProcessor debit: total on: creditCard andClientName: clientName. " if production ? "
	
	(result = '0|OK') ifTrue: [^total].
	
	^self error: Cashier invalidCheckoutErrorMessage.! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:09:39'!
debit: aTransactionAmount on: aCreditCard forClient: aClientName 
	"| creditCards creditCardNumber |
	creditCards _ Dictionary new.
	creditCards add: 4545565667677878 -> 50.
	creditCards add: 4545565667677879 -> 30.
	creditCards add: 4545565667677877 -> 0.
	creditCardNumber _ creditCard number.
	
	self assertHasEnoughFunds: aCreditCard for: aTransactionAmount.
	self assertIsNotStolen: aCreditCard.
	
	((creditCards at: aCreditCard number) < aTransactionAmount) ifTrue: [
		^'1|Credit card has no funds'.
	].

	(creditCards name = clientName) ifFalse: [
		^'1|Client is not credit card owner'.
	].
	"
	^'0|OK'.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:09:39' prior: 50927657!
checkout
	| total result |
	
	result _ ''.
	total _ cart registerTotal: salesBook.
	
	result _ merchantProcessor debit: total on: creditCard forClient: clientName. " if production ? "
	
	(result = '0|OK') ifTrue: [^total].
	
	^self error: Cashier invalidCheckoutErrorMessage.! !

!methodRemoval: MerchantProcessorSimulator #debit:on:andClientName: stamp: 'MR 11/4/2021 10:09:39'!
debit: aTransactionAmount on: aCreditCard andClientName: aClientName 
	"| creditCards creditCardNumber |
	creditCards _ Dictionary new.
	creditCards add: 4545565667677878 -> 50.
	creditCards add: 4545565667677879 -> 30.
	creditCards add: 4545565667677877 -> 0.
	creditCardNumber _ creditCard number.
	
	self assertHasEnoughFunds: aCreditCard for: aTransactionAmount.
	self assertIsNotStolen: aCreditCard.
	
	((creditCards at: aCreditCard number) < aTransactionAmount) ifTrue: [
		^'1|Credit card has no funds'.
	].

	(creditCards name = clientName) ifFalse: [
		^'1|Client is not credit card owner'.
	].
	"
	^'0|OK'.!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:11:16' prior: 50927669!
debit: aTransactionAmount on: aCreditCard forClient: aClientName 
	"| creditCards creditCardNumber |
	creditCards _ Dictionary new.
	creditCards add: 4545565667677878 -> 50.
	creditCards add: 4545565667677879 -> 30.
	creditCards add: 4545565667677877 -> 0.
	creditCardNumber _ creditCard number.
	"
	self assertHasEnoughFunds: aCreditCard for: aTransactionAmount.
	self assertIsNotStolen: aCreditCard usedBy: aClientName.
	"
	((creditCards at: aCreditCard number) < aTransactionAmount) ifTrue: [
		^'1|Credit card has no funds'.
	].

	(creditCards name = clientName) ifFalse: [
		^'1|Client is not credit card owner'.
	].
	"
	^'0|OK'.! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:11:55'!
assertHasEnoughFunds: aCreditCard for: aTransactionAmount.
	((creditCards at: aCreditCard number) < aTransactionAmount) ifTrue: [
		^'1|Credit card has no funds'.
	].! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:12:22'!
assertIsNotStolen: aCreditCard usedBy: aClientName.
	(creditCards name = aClientName) ifFalse: [
		^'1|Client is not credit card owner'.
	].! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:12:37' prior: 50927727!
debit: aTransactionAmount on: aCreditCard forClient: aClientName 
	"| creditCards creditCardNumber |
	creditCards _ Dictionary new.
	creditCards add: 4545565667677878 -> 50.
	creditCards add: 4545565667677879 -> 30.
	creditCards add: 4545565667677877 -> 0.
	creditCardNumber _ creditCard number.
	"
	self assertHasEnoughFunds: aCreditCard for: aTransactionAmount.
	self assertIsNotStolen: aCreditCard usedBy: aClientName.

	^'0|OK'.! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:13:04' prior: 50927767!
debit: aTransactionAmount on: aCreditCard forClient: aClientName 

	self assertHasEnoughFunds: aCreditCard for: aTransactionAmount.
	self assertIsNotStolen: aCreditCard usedBy: aClientName.

	^'0|OK'.! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:13:22' prior: 50927448 overrides: 16896425!
initialize

	creditCards := Dictionary new.
	creditCards add: 4545565667677878 -> 50.
	creditCards add: 4545565667677879 -> 30.
	creditCards add: 4545565667677877 -> 0.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MR 11/4/2021 10:13:27'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MR 11/4/2021 10:13:27'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MR 11/4/2021 10:13:27'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MR 11/4/2021 10:13:27'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MR 11/4/2021 10:13:27'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MR 11/4/2021 10:13:27'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MR 11/4/2021 10:13:27'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MR 11/4/2021 10:13:27'!
PASSED!

!testRun: #CashierTest #test09CashierCannotCheckoutEmptyCart stamp: 'MR 11/4/2021 10:13:27'!
PASSED!

!testRun: #CashierTest #test10CashierCheckoutCartWithMultipleItemsHasCorrectPrice stamp: 'MR 11/4/2021 10:13:27'!
PASSED!

!testRun: #CashierTest #test11CashierCannotCheckoutCartWithExpiredCreditCard stamp: 'MR 11/4/2021 10:13:27'!
PASSED!

!testRun: #CashierTest #test12CashierCheckoutAddsBooksToSalesBook stamp: 'MR 11/4/2021 10:13:27'!
PASSED!

!testRun: #CashierTest #test13CashierCannotCheckoutWhenCreditCardHasNotEnoughFunds stamp: 'MR 11/4/2021 10:13:27'!
FAILURE!

!testRun: #CashierTest #test14CashierCannotCheckoutWhenClientIsNotCreditCardOwner stamp: 'MR 11/4/2021 10:13:27'!
FAILURE!

!testRun: #CashierTest #test15CashierCheckoutsCorrectlyWithValidCreditCardAndClient stamp: 'MR 11/4/2021 10:13:27'!
PASSED!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:14:06' prior: 50927759!
assertIsNotStolen: aCreditCard usedBy: aClientName.
	(aCreditCard name = aClientName) ifFalse: [
		^'1|Client is not credit card owner'.
	].! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MR 11/4/2021 10:14:20'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MR 11/4/2021 10:14:20'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MR 11/4/2021 10:14:20'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MR 11/4/2021 10:14:20'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MR 11/4/2021 10:14:20'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MR 11/4/2021 10:14:20'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MR 11/4/2021 10:14:20'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MR 11/4/2021 10:14:20'!
PASSED!

!testRun: #CashierTest #test09CashierCannotCheckoutEmptyCart stamp: 'MR 11/4/2021 10:14:20'!
PASSED!

!testRun: #CashierTest #test10CashierCheckoutCartWithMultipleItemsHasCorrectPrice stamp: 'MR 11/4/2021 10:14:20'!
PASSED!

!testRun: #CashierTest #test11CashierCannotCheckoutCartWithExpiredCreditCard stamp: 'MR 11/4/2021 10:14:20'!
PASSED!

!testRun: #CashierTest #test12CashierCheckoutAddsBooksToSalesBook stamp: 'MR 11/4/2021 10:14:20'!
PASSED!

!testRun: #CashierTest #test13CashierCannotCheckoutWhenCreditCardHasNotEnoughFunds stamp: 'MR 11/4/2021 10:14:20'!
FAILURE!

!testRun: #CashierTest #test14CashierCannotCheckoutWhenClientIsNotCreditCardOwner stamp: 'MR 11/4/2021 10:14:20'!
FAILURE!

!testRun: #CashierTest #test15CashierCheckoutsCorrectlyWithValidCreditCardAndClient stamp: 'MR 11/4/2021 10:14:20'!
PASSED!

!testRun: #CashierTest #test13CashierCannotCheckoutWhenCreditCardHasNotEnoughFunds stamp: 'MR 11/4/2021 10:14:26'!
FAILURE!

(creditCards at: aCreditCard number)!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:17:36' prior: 50927785!
debit: aTransactionAmount on: aCreditCard forClient: aClientName 
	
	| result | 
	result _ '0|OK'.
	
	result _ self assertHasEnoughFunds: aCreditCard for: aTransactionAmount.
	result _ self assertIsNotStolen: aCreditCard usedBy: aClientName.

	^result.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MR 11/4/2021 10:17:40'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MR 11/4/2021 10:17:40'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MR 11/4/2021 10:17:40'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MR 11/4/2021 10:17:40'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MR 11/4/2021 10:17:40'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MR 11/4/2021 10:17:40'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MR 11/4/2021 10:17:40'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MR 11/4/2021 10:17:40'!
PASSED!

!testRun: #CashierTest #test09CashierCannotCheckoutEmptyCart stamp: 'MR 11/4/2021 10:17:40'!
PASSED!

!testRun: #CashierTest #test10CashierCheckoutCartWithMultipleItemsHasCorrectPrice stamp: 'MR 11/4/2021 10:17:40'!
ERROR!

!testRun: #CashierTest #test11CashierCannotCheckoutCartWithExpiredCreditCard stamp: 'MR 11/4/2021 10:17:40'!
PASSED!

!testRun: #CashierTest #test12CashierCheckoutAddsBooksToSalesBook stamp: 'MR 11/4/2021 10:17:40'!
ERROR!

!testRun: #CashierTest #test13CashierCannotCheckoutWhenCreditCardHasNotEnoughFunds stamp: 'MR 11/4/2021 10:17:40'!
PASSED!

!testRun: #CashierTest #test14CashierCannotCheckoutWhenClientIsNotCreditCardOwner stamp: 'MR 11/4/2021 10:17:40'!
PASSED!

!testRun: #CashierTest #test15CashierCheckoutsCorrectlyWithValidCreditCardAndClient stamp: 'MR 11/4/2021 10:17:40'!
ERROR!

!testRun: #CashierTest #test14CashierCannotCheckoutWhenClientIsNotCreditCardOwner stamp: 'MR 11/4/2021 10:18:13'!
PASSED!

!testRun: #CashierTest #test09CashierCannotCheckoutEmptyCart stamp: 'MR 11/4/2021 10:18:13'!
PASSED!

!testRun: #CashierTest #test10CashierCheckoutCartWithMultipleItemsHasCorrectPrice stamp: 'MR 11/4/2021 10:18:13'!
ERROR!

!testRun: #CashierTest #test11CashierCannotCheckoutCartWithExpiredCreditCard stamp: 'MR 11/4/2021 10:18:13'!
PASSED!

!testRun: #CashierTest #test12CashierCheckoutAddsBooksToSalesBook stamp: 'MR 11/4/2021 10:18:13'!
ERROR!

!testRun: #CashierTest #test13CashierCannotCheckoutWhenCreditCardHasNotEnoughFunds stamp: 'MR 11/4/2021 10:18:13'!
PASSED!

!testRun: #CashierTest #test14CashierCannotCheckoutWhenClientIsNotCreditCardOwner stamp: 'MR 11/4/2021 10:18:13'!
PASSED!

!testRun: #CashierTest #test15CashierCheckoutsCorrectlyWithValidCreditCardAndClient stamp: 'MR 11/4/2021 10:18:13'!
ERROR!

!testRun: #CashierTest #test10CashierCheckoutCartWithMultipleItemsHasCorrectPrice stamp: 'MR 11/4/2021 10:18:17'!
ERROR!

!testRun: #CashierTest #test10CashierCheckoutCartWithMultipleItemsHasCorrectPrice stamp: 'MR 11/4/2021 10:18:24'!
ERROR!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:19:50' prior: 50927750!
assertHasEnoughFunds: aCreditCard for: aTransactionAmount.
	^(creditCards at: (aCreditCard number)) < aTransactionAmount.! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:20:02' prior: 50927856!
assertIsNotStolen: aCreditCard usedBy: aClientName.
	^aCreditCard name = aClientName.! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:20:43' prior: 50927921!
debit: aTransactionAmount on: aCreditCard forClient: aClientName 
	
	(self assertHasEnoughFunds: aCreditCard for: aTransactionAmount) ifTrue: [
		
	].

	(self assertIsNotStolen: aCreditCard usedBy: aClientName) ifTrue: [
		
	].

	^'0|OK'.! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:20:53' prior: 50928036!
debit: aTransactionAmount on: aCreditCard forClient: aClientName 
	
	(self assertHasEnoughFunds: aCreditCard for: aTransactionAmount) ifTrue: [
		
	].

	(self assertIsNotStolen: aCreditCard usedBy: aClientName) ifTrue: [
		^'1|Client is not credit card owner'.
	].

	^'0|OK'.! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:21:03' prior: 50928047!
debit: aTransactionAmount on: aCreditCard forClient: aClientName 
	
	(self assertHasEnoughFunds: aCreditCard for: aTransactionAmount) ifTrue: [
		^'1|Credit card has no funds'.
	].

	(self assertIsNotStolen: aCreditCard usedBy: aClientName) ifTrue: [
		^'1|Client is not credit card owner'.
	].

	^'0|OK'.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MR 11/4/2021 10:21:07'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MR 11/4/2021 10:21:07'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MR 11/4/2021 10:21:07'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MR 11/4/2021 10:21:07'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MR 11/4/2021 10:21:07'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MR 11/4/2021 10:21:07'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MR 11/4/2021 10:21:07'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MR 11/4/2021 10:21:07'!
PASSED!

!testRun: #CashierTest #test09CashierCannotCheckoutEmptyCart stamp: 'MR 11/4/2021 10:21:07'!
PASSED!

!testRun: #CashierTest #test10CashierCheckoutCartWithMultipleItemsHasCorrectPrice stamp: 'MR 11/4/2021 10:21:07'!
ERROR!

!testRun: #CashierTest #test11CashierCannotCheckoutCartWithExpiredCreditCard stamp: 'MR 11/4/2021 10:21:07'!
PASSED!

!testRun: #CashierTest #test12CashierCheckoutAddsBooksToSalesBook stamp: 'MR 11/4/2021 10:21:07'!
ERROR!

!testRun: #CashierTest #test13CashierCannotCheckoutWhenCreditCardHasNotEnoughFunds stamp: 'MR 11/4/2021 10:21:07'!
PASSED!

!testRun: #CashierTest #test14CashierCannotCheckoutWhenClientIsNotCreditCardOwner stamp: 'MR 11/4/2021 10:21:07'!
FAILURE!

!testRun: #CashierTest #test15CashierCheckoutsCorrectlyWithValidCreditCardAndClient stamp: 'MR 11/4/2021 10:21:07'!
ERROR!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:21:48' prior: 50928060!
debit: aTransactionAmount on: aCreditCard forClient: aClientName 
	
	(self assertHasEnoughFunds: aCreditCard for: aTransactionAmount) ifTrue: [
		^'1|Credit card has no funds'.
	].

	(self assertIsNotStolen: aCreditCard usedBy: aClientName) ifFalse: [
		^'1|Client is not credit card owner'.
	].

	^'0|OK'.! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:21:52' prior: 50928125!
debit: aTransactionAmount on: aCreditCard forClient: aClientName 
	
	(self assertHasEnoughFunds: aCreditCard for: aTransactionAmount) ifFalse: [
		^'1|Credit card has no funds'.
	].

	(self assertIsNotStolen: aCreditCard usedBy: aClientName) ifFalse: [
		^'1|Client is not credit card owner'.
	].

	^'0|OK'.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MR 11/4/2021 10:21:53'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MR 11/4/2021 10:21:53'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MR 11/4/2021 10:21:53'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MR 11/4/2021 10:21:53'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MR 11/4/2021 10:21:53'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MR 11/4/2021 10:21:53'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MR 11/4/2021 10:21:53'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MR 11/4/2021 10:21:53'!
PASSED!

!testRun: #CashierTest #test09CashierCannotCheckoutEmptyCart stamp: 'MR 11/4/2021 10:21:53'!
PASSED!

!testRun: #CashierTest #test10CashierCheckoutCartWithMultipleItemsHasCorrectPrice stamp: 'MR 11/4/2021 10:21:53'!
ERROR!

!testRun: #CashierTest #test11CashierCannotCheckoutCartWithExpiredCreditCard stamp: 'MR 11/4/2021 10:21:53'!
PASSED!

!testRun: #CashierTest #test12CashierCheckoutAddsBooksToSalesBook stamp: 'MR 11/4/2021 10:21:53'!
ERROR!

!testRun: #CashierTest #test13CashierCannotCheckoutWhenCreditCardHasNotEnoughFunds stamp: 'MR 11/4/2021 10:21:53'!
FAILURE!

!testRun: #CashierTest #test14CashierCannotCheckoutWhenClientIsNotCreditCardOwner stamp: 'MR 11/4/2021 10:21:53'!
PASSED!

!testRun: #CashierTest #test15CashierCheckoutsCorrectlyWithValidCreditCardAndClient stamp: 'MR 11/4/2021 10:21:53'!
ERROR!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:22:05' prior: 50928139!
debit: aTransactionAmount on: aCreditCard forClient: aClientName 
	
	(self assertHasEnoughFunds: aCreditCard for: aTransactionAmount) ifTrue: [
		^'1|Credit card has no funds'.
	].

	(self assertIsNotStolen: aCreditCard usedBy: aClientName) ifFalse: [
		^'1|Client is not credit card owner'.
	].

	^'0|OK'.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MR 11/4/2021 10:22:08'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MR 11/4/2021 10:22:08'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MR 11/4/2021 10:22:08'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MR 11/4/2021 10:22:08'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MR 11/4/2021 10:22:08'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MR 11/4/2021 10:22:08'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MR 11/4/2021 10:22:08'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MR 11/4/2021 10:22:08'!
PASSED!

!testRun: #CashierTest #test09CashierCannotCheckoutEmptyCart stamp: 'MR 11/4/2021 10:22:08'!
PASSED!

!testRun: #CashierTest #test10CashierCheckoutCartWithMultipleItemsHasCorrectPrice stamp: 'MR 11/4/2021 10:22:08'!
PASSED!

!testRun: #CashierTest #test11CashierCannotCheckoutCartWithExpiredCreditCard stamp: 'MR 11/4/2021 10:22:08'!
PASSED!

!testRun: #CashierTest #test12CashierCheckoutAddsBooksToSalesBook stamp: 'MR 11/4/2021 10:22:08'!
PASSED!

!testRun: #CashierTest #test13CashierCannotCheckoutWhenCreditCardHasNotEnoughFunds stamp: 'MR 11/4/2021 10:22:08'!
PASSED!

!testRun: #CashierTest #test14CashierCannotCheckoutWhenClientIsNotCreditCardOwner stamp: 'MR 11/4/2021 10:22:08'!
PASSED!

!testRun: #CashierTest #test15CashierCheckoutsCorrectlyWithValidCreditCardAndClient stamp: 'MR 11/4/2021 10:22:08'!
PASSED!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:22:31' prior: 50928204!
debit: aTransactionAmount on: aCreditCard forClient: aClientName 
	
	(self assertHasEnoughFunds: aCreditCard for: aTransactionAmount) ifFalse: [
		^'1|Credit card has no funds'.
	].

	(self assertIsNotStolen: aCreditCard usedBy: aClientName) ifFalse: [
		^'1|Client is not credit card owner'.
	].

	^'0|OK'.! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:22:42' prior: 50928021!
assertHasEnoughFunds: aCreditCard for: aTransactionAmount.
	^(creditCards at: (aCreditCard number)) >= aTransactionAmount.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MR 11/4/2021 10:22:47'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MR 11/4/2021 10:22:47'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MR 11/4/2021 10:22:47'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MR 11/4/2021 10:22:47'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MR 11/4/2021 10:22:47'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MR 11/4/2021 10:22:47'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MR 11/4/2021 10:22:48'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MR 11/4/2021 10:22:48'!
PASSED!

!testRun: #CashierTest #test09CashierCannotCheckoutEmptyCart stamp: 'MR 11/4/2021 10:22:48'!
PASSED!

!testRun: #CashierTest #test10CashierCheckoutCartWithMultipleItemsHasCorrectPrice stamp: 'MR 11/4/2021 10:22:48'!
PASSED!

!testRun: #CashierTest #test11CashierCannotCheckoutCartWithExpiredCreditCard stamp: 'MR 11/4/2021 10:22:48'!
PASSED!

!testRun: #CashierTest #test12CashierCheckoutAddsBooksToSalesBook stamp: 'MR 11/4/2021 10:22:48'!
PASSED!

!testRun: #CashierTest #test13CashierCannotCheckoutWhenCreditCardHasNotEnoughFunds stamp: 'MR 11/4/2021 10:22:48'!
PASSED!

!testRun: #CashierTest #test14CashierCannotCheckoutWhenClientIsNotCreditCardOwner stamp: 'MR 11/4/2021 10:22:48'!
PASSED!

!testRun: #CashierTest #test15CashierCheckoutsCorrectlyWithValidCreditCardAndClient stamp: 'MR 11/4/2021 10:22:48'!
PASSED!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:23:05' prior: 50928269!
debit: aTransactionAmount on: aCreditCard forClient: aClientName 
	
	(self assertHasEnoughFunds: aCreditCard for: aTransactionAmount) ifFalse: [^'1|Credit card has no funds'.].
	(self assertIsNotStolen: aCreditCard usedBy: aClientName) ifFalse: [^'1|Client is not credit card owner'.].

	^'0|OK'.! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:23:46'!
assertHasNotEnoughFunds: aCreditCard for: aTransactionAmount.
	^(creditCards at: (aCreditCard number)) >= aTransactionAmount.! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:23:46' prior: 50928342!
debit: aTransactionAmount on: aCreditCard forClient: aClientName 
	
	(self assertHasNotEnoughFunds: aCreditCard for: aTransactionAmount) ifFalse: [^'1|Credit card has no funds'.].
	(self assertIsNotStolen: aCreditCard usedBy: aClientName) ifFalse: [^'1|Client is not credit card owner'.].

	^'0|OK'.! !

!methodRemoval: MerchantProcessorSimulator #assertHasEnoughFunds:for: stamp: 'MR 11/4/2021 10:23:46'!
assertHasEnoughFunds: aCreditCard for: aTransactionAmount.
	^(creditCards at: (aCreditCard number)) >= aTransactionAmount.!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:23:56'!
assertIsStolen: aCreditCard usedBy: aClientName.
	^aCreditCard name = aClientName.! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:23:56' prior: 50928363!
debit: aTransactionAmount on: aCreditCard forClient: aClientName 
	
	(self assertHasNotEnoughFunds: aCreditCard for: aTransactionAmount) ifFalse: [^'1|Credit card has no funds'.].
	(self assertIsStolen: aCreditCard usedBy: aClientName) ifFalse: [^'1|Client is not credit card owner'.].

	^'0|OK'.! !

!methodRemoval: MerchantProcessorSimulator #assertIsNotStolen:usedBy: stamp: 'MR 11/4/2021 10:23:56'!
assertIsNotStolen: aCreditCard usedBy: aClientName.
	^aCreditCard name = aClientName.!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:24:06' prior: 50928390!
debit: aTransactionAmount on: aCreditCard forClient: aClientName 
	
	(self assertHasNotEnoughFunds: aCreditCard for: aTransactionAmount) ifTrue: [^'1|Credit card has no funds'.].
	(self assertIsStolen: aCreditCard usedBy: aClientName) ifTrue: [^'1|Client is not credit card owner'.].

	^'0|OK'.! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:24:17' prior: 50928355!
assertHasNotEnoughFunds: aCreditCard for: aTransactionAmount.
	^(creditCards at: (aCreditCard number)) < aTransactionAmount.! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:24:26' prior: 50928383!
assertIsStolen: aCreditCard usedBy: aClientName.
	^aCreditCard name /= aClientName.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MR 11/4/2021 10:24:30'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MR 11/4/2021 10:24:30'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MR 11/4/2021 10:24:30'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MR 11/4/2021 10:24:30'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MR 11/4/2021 10:24:30'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MR 11/4/2021 10:24:30'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MR 11/4/2021 10:24:30'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MR 11/4/2021 10:24:30'!
PASSED!

!testRun: #CashierTest #test09CashierCannotCheckoutEmptyCart stamp: 'MR 11/4/2021 10:24:30'!
PASSED!

!testRun: #CashierTest #test10CashierCheckoutCartWithMultipleItemsHasCorrectPrice stamp: 'MR 11/4/2021 10:24:30'!
ERROR!

!testRun: #CashierTest #test11CashierCannotCheckoutCartWithExpiredCreditCard stamp: 'MR 11/4/2021 10:24:30'!
PASSED!

!testRun: #CashierTest #test12CashierCheckoutAddsBooksToSalesBook stamp: 'MR 11/4/2021 10:24:30'!
ERROR!

!testRun: #CashierTest #test13CashierCannotCheckoutWhenCreditCardHasNotEnoughFunds stamp: 'MR 11/4/2021 10:24:30'!
PASSED!

!testRun: #CashierTest #test14CashierCannotCheckoutWhenClientIsNotCreditCardOwner stamp: 'MR 11/4/2021 10:24:30'!
ERROR!

!testRun: #CashierTest #test15CashierCheckoutsCorrectlyWithValidCreditCardAndClient stamp: 'MR 11/4/2021 10:24:30'!
ERROR!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:24:40' prior: 50928430!
assertIsStolen: aCreditCard usedBy: aClientName.
	^(aCreditCard name = aClientName) not.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MR 11/4/2021 10:24:42'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MR 11/4/2021 10:24:42'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MR 11/4/2021 10:24:42'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MR 11/4/2021 10:24:42'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MR 11/4/2021 10:24:42'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MR 11/4/2021 10:24:42'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MR 11/4/2021 10:24:42'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MR 11/4/2021 10:24:42'!
PASSED!

!testRun: #CashierTest #test09CashierCannotCheckoutEmptyCart stamp: 'MR 11/4/2021 10:24:42'!
PASSED!

!testRun: #CashierTest #test10CashierCheckoutCartWithMultipleItemsHasCorrectPrice stamp: 'MR 11/4/2021 10:24:42'!
PASSED!

!testRun: #CashierTest #test11CashierCannotCheckoutCartWithExpiredCreditCard stamp: 'MR 11/4/2021 10:24:42'!
PASSED!

!testRun: #CashierTest #test12CashierCheckoutAddsBooksToSalesBook stamp: 'MR 11/4/2021 10:24:42'!
PASSED!

!testRun: #CashierTest #test13CashierCannotCheckoutWhenCreditCardHasNotEnoughFunds stamp: 'MR 11/4/2021 10:24:42'!
PASSED!

!testRun: #CashierTest #test14CashierCannotCheckoutWhenClientIsNotCreditCardOwner stamp: 'MR 11/4/2021 10:24:42'!
PASSED!

!testRun: #CashierTest #test15CashierCheckoutsCorrectlyWithValidCreditCardAndClient stamp: 'MR 11/4/2021 10:24:42'!
PASSED!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:27:27' prior: 50928422!
assertHasNotEnoughFunds: aCreditCard for: aTransactionAmount.
	^(creditCards at: (aCreditCard)) < aTransactionAmount.! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:28:07' prior: 50928546!
assertHasNotEnoughFunds: aCreditCard for: aTransactionAmount.
	^(creditCards at: (aCreditCard number)) < aTransactionAmount.! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:29:10' prior: 50927796 overrides: 16896425!
initialize

	creditCards := Dictionary new.
	creditCards 
		add: 4545565667677878 -> 50;
	 	add: 4545565667677879 -> 30;
	 	add: 4545565667677877 -> 0.! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:29:12' prior: 50928563 overrides: 16896425!
initialize

	creditCards := Dictionary new.
	
	creditCards 
		add: 4545565667677878 -> 50;
	 	add: 4545565667677879 -> 30;
	 	add: 4545565667677877 -> 0.! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:30:51' prior: 50928488!
assertIsStolen: aCreditCard usedBy: aClientName.
	^(aCreditCard belongsTo: aClientName) not.! !
!CreditCard methodsFor: 'nil' stamp: 'MR 11/4/2021 10:31:18'!
belongsTo: aName

	^aName = name.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MR 11/4/2021 10:31:20'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MR 11/4/2021 10:31:20'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MR 11/4/2021 10:31:20'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MR 11/4/2021 10:31:20'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MR 11/4/2021 10:31:20'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MR 11/4/2021 10:31:21'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MR 11/4/2021 10:31:21'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MR 11/4/2021 10:31:21'!
PASSED!

!testRun: #CashierTest #test09CashierCannotCheckoutEmptyCart stamp: 'MR 11/4/2021 10:31:21'!
PASSED!

!testRun: #CashierTest #test10CashierCheckoutCartWithMultipleItemsHasCorrectPrice stamp: 'MR 11/4/2021 10:31:21'!
PASSED!

!testRun: #CashierTest #test11CashierCannotCheckoutCartWithExpiredCreditCard stamp: 'MR 11/4/2021 10:31:21'!
PASSED!

!testRun: #CashierTest #test12CashierCheckoutAddsBooksToSalesBook stamp: 'MR 11/4/2021 10:31:21'!
PASSED!

!testRun: #CashierTest #test13CashierCannotCheckoutWhenCreditCardHasNotEnoughFunds stamp: 'MR 11/4/2021 10:31:21'!
PASSED!

!testRun: #CashierTest #test14CashierCannotCheckoutWhenClientIsNotCreditCardOwner stamp: 'MR 11/4/2021 10:31:21'!
PASSED!

!testRun: #CashierTest #test15CashierCheckoutsCorrectlyWithValidCreditCardAndClient stamp: 'MR 11/4/2021 10:31:21'!
PASSED!
!Cashier class methodsFor: 'instance creation' stamp: 'MR 11/4/2021 10:32:15' prior: 50926860!
assertIsNotExpired: aCreditCard on: aDate

	^aCreditCard isValidOn: aDate.! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'MR 11/4/2021 10:33:55'!
Object subclass: #CreditCard
	instanceVariableNames: 'name number expirationMonth expirationYear expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'nil' stamp: 'MR 11/4/2021 10:33:54'!
isValidOn: aDate
	
	^aDate > expirationDate.! !
!CreditCard methodsFor: 'initialization' stamp: 'MR 11/4/2021 10:34:17' prior: 50926439!
initializeWithName: aName number: aNumber expirationMonth: anExpirationMonth expirationYear: anExpirationYear
	name _ aName.
	number _ aNumber.	
	expirationDate := GregorianMonthOfYear 
					year: (GregorianYear number: (anExpirationYear)) 
					month: (GregorianMonth numbered: (anExpirationMonth))! !

Object subclass: #CreditCard
	instanceVariableNames: 'name number expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'MR 11/4/2021 10:34:23'!
Object subclass: #CreditCard
	instanceVariableNames: 'name number expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CashierTest #test11CashierCannotCheckoutCartWithExpiredCreditCard stamp: 'MR 11/4/2021 10:34:36'!
FAILURE!
!Cashier class methodsFor: 'instance creation' stamp: 'MR 11/4/2021 10:35:05' prior: 50924502!
assertIsNotEmpty: aCart

	aCart isEmpty ifTrue: [^self error: Cashier invalidCheckoutErrorMessage.].! !
!Cashier class methodsFor: 'instance creation' stamp: 'MR 11/4/2021 10:35:19' prior: 50928642!
assertIsNotExpired: aCreditCard on: aDate

	^(aCreditCard isValidOn: aDate) ifFalse: [^self error: Cashier invalidCheckoutErrorMessage].! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MR 11/4/2021 10:35:20'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MR 11/4/2021 10:35:20'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MR 11/4/2021 10:35:20'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MR 11/4/2021 10:35:20'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MR 11/4/2021 10:35:20'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MR 11/4/2021 10:35:20'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MR 11/4/2021 10:35:20'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MR 11/4/2021 10:35:20'!
PASSED!

!testRun: #CashierTest #test09CashierCannotCheckoutEmptyCart stamp: 'MR 11/4/2021 10:35:20'!
PASSED!

!testRun: #CashierTest #test10CashierCheckoutCartWithMultipleItemsHasCorrectPrice stamp: 'MR 11/4/2021 10:35:20'!
ERROR!

!testRun: #CashierTest #test11CashierCannotCheckoutCartWithExpiredCreditCard stamp: 'MR 11/4/2021 10:35:20'!
FAILURE!

!testRun: #CashierTest #test12CashierCheckoutAddsBooksToSalesBook stamp: 'MR 11/4/2021 10:35:20'!
ERROR!

!testRun: #CashierTest #test13CashierCannotCheckoutWhenCreditCardHasNotEnoughFunds stamp: 'MR 11/4/2021 10:35:20'!
ERROR!

!testRun: #CashierTest #test14CashierCannotCheckoutWhenClientIsNotCreditCardOwner stamp: 'MR 11/4/2021 10:35:20'!
ERROR!

!testRun: #CashierTest #test15CashierCheckoutsCorrectlyWithValidCreditCardAndClient stamp: 'MR 11/4/2021 10:35:20'!
ERROR!

!testRun: #CashierTest #test10CashierCheckoutCartWithMultipleItemsHasCorrectPrice stamp: 'MR 11/4/2021 10:35:28'!
ERROR!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:35:58' prior: 50928655!
isValidOn: aDate
	
	^aDate < expirationDate.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:36:09' prior: 50928759!
isValidOn: aDate
	
	^aDate <= expirationDate.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MR 11/4/2021 10:36:15'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MR 11/4/2021 10:36:15'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MR 11/4/2021 10:36:15'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MR 11/4/2021 10:36:15'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MR 11/4/2021 10:36:15'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MR 11/4/2021 10:36:15'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MR 11/4/2021 10:36:15'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MR 11/4/2021 10:36:15'!
PASSED!

!testRun: #CashierTest #test09CashierCannotCheckoutEmptyCart stamp: 'MR 11/4/2021 10:36:15'!
PASSED!

!testRun: #CashierTest #test10CashierCheckoutCartWithMultipleItemsHasCorrectPrice stamp: 'MR 11/4/2021 10:36:15'!
PASSED!

!testRun: #CashierTest #test11CashierCannotCheckoutCartWithExpiredCreditCard stamp: 'MR 11/4/2021 10:36:15'!
PASSED!

!testRun: #CashierTest #test12CashierCheckoutAddsBooksToSalesBook stamp: 'MR 11/4/2021 10:36:15'!
PASSED!

!testRun: #CashierTest #test13CashierCannotCheckoutWhenCreditCardHasNotEnoughFunds stamp: 'MR 11/4/2021 10:36:15'!
PASSED!

!testRun: #CashierTest #test14CashierCannotCheckoutWhenClientIsNotCreditCardOwner stamp: 'MR 11/4/2021 10:36:15'!
PASSED!

!testRun: #CashierTest #test15CashierCheckoutsCorrectlyWithValidCreditCardAndClient stamp: 'MR 11/4/2021 10:36:16'!
PASSED!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:37:45' prior: 50928554!
assertHasNotEnoughFunds: aCreditCard for: aTransactionAmount.
	"self funds: aCreditCard"
	"check si tarjeta existe?"
	^(creditCards at: (aCreditCard number)) < aTransactionAmount.! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:42:51' prior: 50928409!
debit: aTransactionAmount on: aCreditCard forClient: aClientName 
	
	(self assertCardExists: aCreditCard) ifFalse: [^'1|Credit card does not exist'].
	(self assertCardHasEnoughFunds: aCreditCard for: aTransactionAmount) ifFalse: [^'1|Credit card has no funds'.].
	(self assertCardIsNotStolen: aCreditCard usedBy: aClientName) ifFalse: [^'1|Client is not credit card owner'.].

	^'0|OK'.! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:43:01'!
assertIsNotStolen: aCreditCard usedBy: aClientName.
	^(aCreditCard belongsTo: aClientName) not.! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:43:04' prior: 50928846!
assertIsNotStolen: aCreditCard usedBy: aClientName.
	^aCreditCard belongsTo: aClientName.! !

!methodRemoval: MerchantProcessorSimulator #assertIsStolen:usedBy: stamp: 'MR 11/4/2021 10:43:07'!
assertIsStolen: aCreditCard usedBy: aClientName.
	^(aCreditCard belongsTo: aClientName) not.!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:43:17'!
assertCardHasEnoughFunds: aCreditCard for: aTransactionAmount.
	"self funds: aCreditCard"
	"check si tarjeta existe?"
	^(creditCards at: (aCreditCard number)) >= aTransactionAmount.! !

!methodRemoval: MerchantProcessorSimulator #assertHasNotEnoughFunds:for: stamp: 'MR 11/4/2021 10:43:18'!
assertHasNotEnoughFunds: aCreditCard for: aTransactionAmount.
	"self funds: aCreditCard"
	"check si tarjeta existe?"
	^(creditCards at: (aCreditCard number)) < aTransactionAmount.!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:43:25' prior: 50928865!
assertCardHasEnoughFunds: aCreditCard for: aTransactionAmount.
	"self funds: aCreditCard"
	^(creditCards at: (aCreditCard number)) >= aTransactionAmount.! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:43:34' prior: 50928830!
debit: aTransactionAmount on: aCreditCard forClient: aClientName 
	
	(self assertCardExists: aCreditCard) ifFalse: [^'1|Credit card does not exist'].
	(self assertCardHasEnoughFunds: aCreditCard for: aTransactionAmount) ifFalse: [^'1|Credit card has no funds'.].
	(self assertCardIsNotStolen: aCreditCard usedBy: aClientName) ifFalse: [^'1|Client is not credit card owner'.].

	^'0|OK'.! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:43:41'!
assertCardIsNotStolen: aCreditCard usedBy: aClientName.
	^aCreditCard belongsTo: aClientName.! !

!methodRemoval: MerchantProcessorSimulator #assertIsNotStolen:usedBy: stamp: 'MR 11/4/2021 10:43:41'!
assertIsNotStolen: aCreditCard usedBy: aClientName.
	^aCreditCard belongsTo: aClientName.!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:44:33'!
assertCardExists: aCreditCard
	^creditCards includesKey: (aCreditCard number).! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MR 11/4/2021 10:44:36'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MR 11/4/2021 10:44:36'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MR 11/4/2021 10:44:36'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MR 11/4/2021 10:44:36'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MR 11/4/2021 10:44:36'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MR 11/4/2021 10:44:36'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MR 11/4/2021 10:44:36'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MR 11/4/2021 10:44:36'!
PASSED!

!testRun: #CashierTest #test09CashierCannotCheckoutEmptyCart stamp: 'MR 11/4/2021 10:44:36'!
PASSED!

!testRun: #CashierTest #test10CashierCheckoutCartWithMultipleItemsHasCorrectPrice stamp: 'MR 11/4/2021 10:44:36'!
PASSED!

!testRun: #CashierTest #test11CashierCannotCheckoutCartWithExpiredCreditCard stamp: 'MR 11/4/2021 10:44:36'!
PASSED!

!testRun: #CashierTest #test12CashierCheckoutAddsBooksToSalesBook stamp: 'MR 11/4/2021 10:44:36'!
PASSED!

!testRun: #CashierTest #test13CashierCannotCheckoutWhenCreditCardHasNotEnoughFunds stamp: 'MR 11/4/2021 10:44:36'!
PASSED!

!testRun: #CashierTest #test14CashierCannotCheckoutWhenClientIsNotCreditCardOwner stamp: 'MR 11/4/2021 10:44:36'!
PASSED!

!testRun: #CashierTest #test15CashierCheckoutsCorrectlyWithValidCreditCardAndClient stamp: 'MR 11/4/2021 10:44:36'!
PASSED!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:44:44' prior: 50928893!
debit: aTransactionAmount on: aCreditCard forClient: aClientName 
	
	(self assertCardExists: aCreditCard) ifFalse: [^'1|Credit card does not exist'].
	(self assertCardHasEnoughFunds: aCreditCard for: aTransactionAmount) ifFalse: [^'1|Credit card has no funds'].
	(self assertCardIsNotStolen: aCreditCard usedBy: aClientName) ifFalse: [^'1|Client is not credit card owner'].

	^'0|OK'.! !
!CashierTest methodsFor: 'tests' stamp: 'MR 11/4/2021 10:46:14'!
test16CashierCannotCheckoutWhenCreditCardDoesNotExist
	| cart cashier invalidCreditCard salesBook |
	
	salesBook := Bag new.
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	
	invalidCreditCard := testObjectsFactory createInvalidCreditCard.
	
	cashier := Cashier toCheckout: cart withCreditCard: invalidCreditCard onDate: testObjectsFactory today registerAt: salesBook forClient: invalidCreditCard name andMerchantProcessor: merchantProcessor.
	
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCheckoutErrorMessage.
		].
	
! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:46:25'!
createInvalidCreditCard

	^CreditCard 
		withName: 'Mike Wazowsky'
		number: 4545565667677810
		expirationMonth: 02
		expirationYear: 2020.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:46:28' prior: 50929020!
createInvalidCreditCard

	^CreditCard 
		withName: 'Mike Wazowsky'
		number: 4545565667677810
		expirationMonth: 02
		expirationYear: 2025.! !

!testRun: #CashierTest #test16CashierCannotCheckoutWhenCreditCardDoesNotExist stamp: 'MR 11/4/2021 10:46:35'!
PASSED!

!testRun: #CashierTest #test09CashierCannotCheckoutEmptyCart stamp: 'MR 11/4/2021 10:46:35'!
PASSED!

!testRun: #CashierTest #test10CashierCheckoutCartWithMultipleItemsHasCorrectPrice stamp: 'MR 11/4/2021 10:46:35'!
PASSED!

!testRun: #CashierTest #test11CashierCannotCheckoutCartWithExpiredCreditCard stamp: 'MR 11/4/2021 10:46:35'!
PASSED!

!testRun: #CashierTest #test12CashierCheckoutAddsBooksToSalesBook stamp: 'MR 11/4/2021 10:46:35'!
PASSED!

!testRun: #CashierTest #test13CashierCannotCheckoutWhenCreditCardHasNotEnoughFunds stamp: 'MR 11/4/2021 10:46:35'!
PASSED!

!testRun: #CashierTest #test14CashierCannotCheckoutWhenClientIsNotCreditCardOwner stamp: 'MR 11/4/2021 10:46:35'!
PASSED!

!testRun: #CashierTest #test15CashierCheckoutsCorrectlyWithValidCreditCardAndClient stamp: 'MR 11/4/2021 10:46:35'!
PASSED!

!testRun: #CashierTest #test16CashierCannotCheckoutWhenCreditCardDoesNotExist stamp: 'MR 11/4/2021 10:46:35'!
PASSED!
!Cashier class methodsFor: 'instance creation' stamp: 'MR 11/4/2021 10:48:41'!
assertCartIsNotEmpty: aCart

	aCart isEmpty ifTrue: [^self error: Cashier invalidCheckoutErrorMessage.].! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:48:41' prior: 50927196!
toCheckout: aCart withCreditCard: aCreditCard onDate: aDate registerAt: aSalesBook forClient: aClientName andMerchantProcessor: aMerchantProcessor   

	self assertIsNotExpired: aCreditCard on: aDate.
	self assertCartIsNotEmpty: aCart.

	^self new initializeToCheckout: aCart withCreditCard: aCreditCard onDate: aDate registerAt: aSalesBook forClient: aClientName andMerchantProcessor: aMerchantProcessor.! !

!methodRemoval: Cashier class #assertIsNotEmpty: stamp: 'MR 11/4/2021 10:48:41'!
assertIsNotEmpty: aCart

	aCart isEmpty ifTrue: [^self error: Cashier invalidCheckoutErrorMessage.].!
!Cashier class methodsFor: 'instance creation' stamp: 'MR 11/4/2021 10:48:50'!
assertCardIsNotExpired: aCreditCard on: aDate

	^(aCreditCard isValidOn: aDate) ifFalse: [^self error: Cashier invalidCheckoutErrorMessage].! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:48:50' prior: 50929076!
toCheckout: aCart withCreditCard: aCreditCard onDate: aDate registerAt: aSalesBook forClient: aClientName andMerchantProcessor: aMerchantProcessor   

	self assertCardIsNotExpired: aCreditCard on: aDate.
	self assertCartIsNotEmpty: aCart.

	^self new initializeToCheckout: aCart withCreditCard: aCreditCard onDate: aDate registerAt: aSalesBook forClient: aClientName andMerchantProcessor: aMerchantProcessor.! !

!methodRemoval: Cashier class #assertIsNotExpired:on: stamp: 'MR 11/4/2021 10:48:50'!
assertIsNotExpired: aCreditCard on: aDate

	^(aCreditCard isValidOn: aDate) ifFalse: [^self error: Cashier invalidCheckoutErrorMessage].!
!Cashier methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:49:53' prior: 50927692!
checkout
	| total result |
	total _ 0.
	result _ ''.
	
	total _ cart registerTotal: salesBook.
	result _ merchantProcessor debit: total on: creditCard forClient: clientName. " if production ? "
	
	(result = '0|OK') ifTrue: [^total].
	^self error: Cashier invalidCheckoutErrorMessage.! !

!methodRemoval: Cart #checkout stamp: 'MR 11/4/2021 10:51:40'!
checkout
	|value|
	
	self isEmpty ifTrue: [	^self error: Cart invalidCheckoutErrorMessage].
	
	value _ 0.
	items do: [:anItem |
		value _ value + catalog at: anItem.
	].

	^value.
	!
!Cart methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:54:38' prior: 50925052!
registerTotal: aSalesBook
	aSalesBook addAll: items.
	
	^items inject: 0 into: [:itemsTotal :anItem | itemsTotal + catalog at: anItem].
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MR 11/4/2021 10:54:42'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MR 11/4/2021 10:54:42'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MR 11/4/2021 10:54:42'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MR 11/4/2021 10:54:42'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MR 11/4/2021 10:54:42'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MR 11/4/2021 10:54:42'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MR 11/4/2021 10:54:42'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MR 11/4/2021 10:54:42'!
PASSED!

!testRun: #CashierTest #test09CashierCannotCheckoutEmptyCart stamp: 'MR 11/4/2021 10:54:42'!
PASSED!

!testRun: #CashierTest #test10CashierCheckoutCartWithMultipleItemsHasCorrectPrice stamp: 'MR 11/4/2021 10:54:42'!
PASSED!

!testRun: #CashierTest #test11CashierCannotCheckoutCartWithExpiredCreditCard stamp: 'MR 11/4/2021 10:54:42'!
PASSED!

!testRun: #CashierTest #test12CashierCheckoutAddsBooksToSalesBook stamp: 'MR 11/4/2021 10:54:42'!
PASSED!

!testRun: #CashierTest #test13CashierCannotCheckoutWhenCreditCardHasNotEnoughFunds stamp: 'MR 11/4/2021 10:54:42'!
PASSED!

!testRun: #CashierTest #test14CashierCannotCheckoutWhenClientIsNotCreditCardOwner stamp: 'MR 11/4/2021 10:54:42'!
PASSED!

!testRun: #CashierTest #test15CashierCheckoutsCorrectlyWithValidCreditCardAndClient stamp: 'MR 11/4/2021 10:54:42'!
PASSED!

!testRun: #CashierTest #test16CashierCannotCheckoutWhenCreditCardDoesNotExist stamp: 'MR 11/4/2021 10:54:42'!
PASSED!
!Cart methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:54:54' prior: 50929148!
registerTotal: aSalesBook
	aSalesBook addAll: items.
	
	^items inject: 0 into: [:booksTotal :anItem | booksTotal + catalog at: anItem].
	! !
!Cart methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:55:07' prior: 50929210!
registerTotal: aSalesBook
	aSalesBook addAll: items.
	
	^items inject: 0 into: [:itemsTotal :anItem | itemsTotal + catalog at: anItem].
	! !
!Cashier methodsFor: 'checkout' stamp: 'MR 11/4/2021 10:57:39' prior: 50929128!
checkout
	| price result |
	price _ 0.
	result _ ''.
	
	cart registerItemsOn: salesBook.
	price _ cart calculatePrice.
	result _ merchantProcessor debit: price on: creditCard forClient: clientName. " if production ? "
	
	(result = '0|OK') ifTrue: [^price].
	^self error: Cashier invalidCheckoutErrorMessage.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:57:52'!
registerItemsOn: aSalesBook
	aSalesBook addAll: items.
	
	^items inject: 0 into: [:itemsTotal :anItem | itemsTotal + catalog at: anItem].
	! !
!Cart methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:57:58'!
calculatePrice
	^items inject: 0 into: [:itemsTotal :anItem | itemsTotal + catalog at: anItem].
	! !

!methodRemoval: Cart #registerTotal: stamp: 'MR 11/4/2021 10:57:59'!
registerTotal: aSalesBook
	aSalesBook addAll: items.
	
	^items inject: 0 into: [:itemsTotal :anItem | itemsTotal + catalog at: anItem].
	!
!Cart methodsFor: 'as yet unclassified' stamp: 'MR 11/4/2021 10:58:02' prior: 50929237!
registerItemsOn: aSalesBook
	aSalesBook addAll: items.
	! !
!Cashier methodsFor: 'checkout' stamp: 'MR 11/4/2021 10:59:03' prior: 50929225!
checkout
	| price result |
		
	cart registerItemsOn: salesBook.
	
	price _ cart calculatePrice.
	result _ merchantProcessor debit: price on: creditCard forClient: clientName. " if production ? "
	
	(result = '0|OK') ifTrue: [^price].
	^self error: Cashier invalidCheckoutErrorMessage.! !
!Cashier methodsFor: 'checkout' stamp: 'MR 11/4/2021 11:00:19' prior: 50929262!
checkout
	| price result |
		
	cart registerItemsOn: salesBook.
	
	price _ cart calculatePrice.
	result _ merchantProcessor debit: price on: creditCard forClient: clientName.
	
	(result = '0|OK') ifTrue: [^price].
	^self error: Cashier invalidCheckoutErrorMessage.! !

!methodRemoval: CreditCard #expirationMonth stamp: 'MR 11/4/2021 11:00:38'!
expirationMonth
	^expirationMonth.!

!methodRemoval: CreditCard #expirationYear stamp: 'MR 11/4/2021 11:00:39'!
expirationYear
	^expirationYear.!
!MerchantProcessorSimulator methodsFor: 'asserting' stamp: 'MR 11/4/2021 11:02:10' prior: 50928884!
assertCardHasEnoughFunds: aCreditCard for: aTransactionAmount.
	^(creditCards at: (aCreditCard number)) >= aTransactionAmount.! !

----SNAPSHOT----(4 November 2021 11:14:37) CuisUniversity-4913.image priorSource: 19032311!